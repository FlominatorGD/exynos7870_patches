diff --git a/arch/arm64/include/asm/pgalloc.h b/arch/arm64/include/asm/pgalloc.h
index 6e6fa1ce1d15..a93b30585ae1 100644
--- a/arch/arm64/include/asm/pgalloc.h
+++ b/arch/arm64/include/asm/pgalloc.h
@@ -28,21 +28,57 @@
 
 #if CONFIG_PGTABLE_LEVELS > 2
 
+#ifndef CONFIG_TIMA_RKP
 static inline pmd_t *pmd_alloc_one(struct mm_struct *mm, unsigned long addr)
 {
 	return (pmd_t *)get_zeroed_page(GFP_KERNEL | __GFP_REPEAT);
 }
+#else
+static inline pmd_t *pmd_alloc_one(struct mm_struct *mm, unsigned long addr)
+{
+	/* FIXME not zeroing the page */
+	int rkp_do = 0;
+	pmd_t *rkp_ropage = NULL;
+#ifdef CONFIG_KNOX_KAP
+	if (boot_mode_security)
+#endif	//CONFIG_KNOX_KAP
+		rkp_do = 1;
+	
+	if (rkp_do) rkp_ropage = (pmd_t *)rkp_ro_alloc();
+	if (rkp_ropage)
+		return rkp_ropage;
+	else
+		return (pmd_t *)get_zeroed_page(GFP_KERNEL | __GFP_REPEAT);
+}
+#endif
+
+static inline void __pud_populate(pud_t *pud, phys_addr_t pmd, pudval_t prot)
+{
+	set_pud(pud, __pud(pmd | prot));
+}
 
+#ifndef CONFIG_TIMA_RKP
 static inline void pmd_free(struct mm_struct *mm, pmd_t *pmd)
 {
 	BUG_ON((unsigned long)pmd & (PAGE_SIZE-1));
 	free_page((unsigned long)pmd);
 }
 
-static inline void __pud_populate(pud_t *pud, phys_addr_t pmd, pudval_t prot)
+#else
+static inline void pmd_free(struct mm_struct *mm, pmd_t *pmd)
 {
-	set_pud(pud, __pud(pmd | prot));
+	int rkp_do = 0;
+	BUG_ON((unsigned long)pmd & (PAGE_SIZE-1));
+#ifdef CONFIG_KNOX_KAP
+	if (boot_mode_security)
+#endif	//CONFIG_KNOX_KAP
+		rkp_do = 1;
+	if( rkp_do && (unsigned long)pmd >= (unsigned long)RKP_RBUF_VA && (unsigned long)pmd < ((unsigned long)RKP_RBUF_VA + TIMA_ROBUF_SIZE))
+		rkp_ro_free((void*)pmd);
+	else
+		free_page((unsigned long)pmd);
 }
+#endif
 
 static inline void pud_populate(struct mm_struct *mm, pud_t *pud, pmd_t *pmd)
 {
@@ -57,16 +93,50 @@ static inline void __pud_populate(pud_t *pud, phys_addr_t pmd, pudval_t prot)
 
 #if CONFIG_PGTABLE_LEVELS > 3
 
+#ifndef CONFIG_TIMA_RKP
 static inline pud_t *pud_alloc_one(struct mm_struct *mm, unsigned long addr)
 {
 	return (pud_t *)get_zeroed_page(GFP_KERNEL | __GFP_REPEAT);
 }
+#else
+static inline pud_t *pud_alloc_one(struct mm_struct *mm, unsigned long addr)
+{
+	int rkp_do = 0;
+	pud_t *rkp_ropage = NULL;
+#ifdef CONFIG_KNOX_KAP
+	if (boot_mode_security)
+#endif	//CONFIG_KNOX_KAP
+		rkp_do = 1;
+	if (rkp_do) rkp_ropage = (pud_t *)rkp_ro_alloc();
+	if (rkp_ropage)
+		return rkp_ropage;
+	else
+		return (pud_t *)get_zeroed_page(GFP_KERNEL | __GFP_REPEAT);
+}
+#endif
 
+#ifndef CONFIG_TIMA_RKP
 static inline void pud_free(struct mm_struct *mm, pud_t *pud)
 {
 	BUG_ON((unsigned long)pud & (PAGE_SIZE-1));
 	free_page((unsigned long)pud);
 }
+#else
+static inline void pud_free(struct mm_struct *mm, pud_t *pud)
+{
+	int rkp_do = 0;
+#ifdef CONFIG_KNOX_KAP
+	if (boot_mode_security)
+#endif	//CONFIG_KNOX_KAP
+		rkp_do = 1;
+	BUG_ON((unsigned long)pud & (PAGE_SIZE-1));
+
+	if(rkp_do && (unsigned long)pud >= (unsigned long)RKP_RBUF_VA && (unsigned long)pud < ((unsigned long)RKP_RBUF_VA + TIMA_ROBUF_SIZE))
+		rkp_ro_free((void*)pud);
+	else
+		free_page((unsigned long)pud);
+}	
+#endif
 
 static inline void __pgd_populate(pgd_t *pgdp, phys_addr_t pud, pgdval_t prot)
 {
