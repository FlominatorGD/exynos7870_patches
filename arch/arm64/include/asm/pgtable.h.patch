diff --git a/arch/arm64/include/asm/pgtable.h b/arch/arm64/include/asm/pgtable.h
index 26d143064dff..37cc5e98cdc7 100644
--- a/arch/arm64/include/asm/pgtable.h
+++ b/arch/arm64/include/asm/pgtable.h
@@ -21,6 +21,10 @@
 #include <asm/memory.h>
 #include <asm/pgtable-hwdef.h>
 
+#ifdef CONFIG_TIMA_RKP
+#include <linux/rkp_entry.h> 
+#endif /* CONFIG_TIMA_RKP */
+
 /*
  * Software defined PTE bits definition.
  */
@@ -41,7 +45,7 @@
  *	fixed mappings and modules
  */
 #define VMEMMAP_SIZE		ALIGN((1UL << (VA_BITS - PAGE_SHIFT)) * sizeof(struct page), PUD_SIZE)
-#define VMALLOC_START		(UL(0xffffffffffffffff) << VA_BITS)
+#define VMALLOC_START		(VA_START)
 #define VMALLOC_END		(PAGE_OFFSET - PUD_SIZE - VMEMMAP_SIZE - SZ_64K)
 
 #define VMEMMAP_START		(VMALLOC_END + SZ_64K)
@@ -72,6 +76,7 @@ extern void __pgd_error(const char *file, int line, unsigned long val);
 #define PROT_NORMAL		(PROT_DEFAULT | PTE_PXN | PTE_UXN | PTE_ATTRINDX(MT_NORMAL))
 
 #define PROT_SECT_DEVICE_nGnRE	(PROT_SECT_DEFAULT | PMD_SECT_PXN | PMD_SECT_UXN | PMD_ATTRINDX(MT_DEVICE_nGnRE))
+#define PROT_SECT_NORMAL_NC	(PROT_SECT_DEFAULT | PMD_SECT_PXN | PMD_SECT_UXN | PMD_ATTRINDX(MT_NORMAL_NC))
 #define PROT_SECT_NORMAL	(PROT_SECT_DEFAULT | PMD_SECT_PXN | PMD_SECT_UXN | PMD_ATTRINDX(MT_NORMAL))
 #define PROT_SECT_NORMAL_EXEC	(PROT_SECT_DEFAULT | PMD_SECT_UXN | PMD_ATTRINDX(MT_NORMAL))
 
@@ -118,7 +123,11 @@ extern void __pgd_error(const char *file, int line, unsigned long val);
  * ZERO_PAGE is a global shared page that is always zero: used
  * for zero-mapped memory areas etc..
  */
+#ifdef CONFIG_TIMA_RKP
+extern unsigned long *empty_zero_page;
+#else
 extern unsigned long empty_zero_page[PAGE_SIZE / sizeof(unsigned long)];
+#endif
 #define ZERO_PAGE(vaddr)	virt_to_page(empty_zero_page)
 
 #define pte_ERROR(pte)		__pte_error(__FILE__, __LINE__, pte_val(pte))
@@ -202,9 +211,32 @@ static inline pte_t pte_mkspecial(pte_t pte)
 {
 	return set_pte_bit(pte, __pgprot(PTE_SPECIAL));
 }
-
+#ifdef CONFIG_TIMA_RKP
+extern  int printk(const char *s, ...);
+extern void panic(const char *fmt, ...);
+#endif /* CONFIG_TIMA_RKP */
 static inline void set_pte(pte_t *ptep, pte_t pte)
 {
+#ifdef CONFIG_TIMA_RKP
+	if (pte && rkp_is_pg_dbl_mapped((u64)(pte)) ) {
+		panic("TIMA RKP : Double mapping Detected pte = 0x%llx ptep = %p",(u64)pte, ptep);
+		return;
+	}
+	if (rkp_is_pg_protected((u64)ptep)) {
+		rkp_call(RKP_PTE_SET, (unsigned long)ptep, pte_val(pte), 0, 0, 0);
+	} else {
+		asm volatile("mov x1, %0\n"
+					  "mov x2, %1\n"
+ 					  "str x2, [x1]\n"
+		:
+		: "r" (ptep), "r" (pte)
+		: "x1", "x2", "memory" );
+		if (pte_valid_not_user(pte)) {
+			dsb(ishst);
+			isb();
+		}
+	}
+#else
 	*ptep = pte;
 
 	/*
@@ -215,6 +247,7 @@ static inline void set_pte(pte_t *ptep, pte_t pte)
 		dsb(ishst);
 		isb();
 	}
+#endif /* CONFIG_TIMA_RKP */
 }
 
 extern void __sync_icache_dcache(pte_t pteval, unsigned long addr);
@@ -334,6 +367,8 @@ static inline int has_transparent_hugepage(void)
 	__pgprot_modify(prot, PTE_ATTRINDX_MASK, PTE_ATTRINDX(MT_NORMAL_NC) | PTE_PXN | PTE_UXN)
 #define pgprot_device(prot) \
 	__pgprot_modify(prot, PTE_ATTRINDX_MASK, PTE_ATTRINDX(MT_DEVICE_nGnRE) | PTE_PXN | PTE_UXN)
+#define pgprot_iotable_init(prot) \
+	__pgprot_modify(prot, PTE_ATTRINDX_MASK, PTE_ATTRINDX(MT_DEVICE_GRE))
 #define __HAVE_PHYS_MEM_ACCESS_PROT
 struct file;
 extern pgprot_t phys_mem_access_prot(struct file *file, unsigned long pfn,
@@ -358,11 +393,30 @@ extern pgprot_t phys_mem_access_prot(struct file *file, unsigned long pfn,
 				 PUD_TYPE_TABLE)
 #endif
 
+#ifdef CONFIG_TIMA_RKP
+#define pmd_block(pmd)      ((pmd_val(pmd) & 0x3)  == 1)
+#endif
+
 static inline void set_pmd(pmd_t *pmdp, pmd_t pmd)
 {
+#ifdef CONFIG_TIMA_RKP
+	if (rkp_is_pg_protected((u64)pmdp)) {
+		rkp_call(RKP_PMD_SET, (unsigned long)pmdp, pmd_val(pmd), 0, 0, 0);
+	} else {
+		asm volatile("mov x1, %0\n"
+					  "mov x2, %1\n"
+ 					  "str x2, [x1]\n"
+		:
+		: "r" (pmdp), "r" (pmd)
+		: "x1", "x2", "memory" );
+		dsb(ishst);
+		isb();
+	}
+#else 
 	*pmdp = pmd;
 	dsb(ishst);
 	isb();
+#endif
 }
 
 static inline void pmd_clear(pmd_t *pmdp)
@@ -393,9 +447,24 @@ static inline pte_t *pmd_page_vaddr(pmd_t pmd)
 
 static inline void set_pud(pud_t *pudp, pud_t pud)
 {
+#ifdef CONFIG_TIMA_RKP
+	if (rkp_is_pg_protected((u64)pudp)) {
+		rkp_call(RKP_PGD_SET, (unsigned long)pudp, pud_val(pud), 0, 0, 0);
+	} else {
+		asm volatile("mov x1, %0\n"
+					  "mov x2, %1\n"
+ 					  "str x2, [x1]\n"
+		:
+		: "r" (pudp), "r" (pud)
+		: "x1", "x2", "memory" );
+		dsb(ishst);
+		isb();
+	}
+#else
 	*pudp = pud;
 	dsb(ishst);
 	isb();
+#endif
 }
 
 static inline void pud_clear(pud_t *pudp)
