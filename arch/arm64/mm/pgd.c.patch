diff --git a/arch/arm64/mm/pgd.c b/arch/arm64/mm/pgd.c
index 6682b361d3ac..e1d072d40c0b 100644
--- a/arch/arm64/mm/pgd.c
+++ b/arch/arm64/mm/pgd.c
@@ -28,10 +28,14 @@
 
 #include "mm.h"
 
+#ifdef CONFIG_TIMA_RKP
+#include <linux/rkp_entry.h>
+extern u8 rkp_started;
+#endif /* CONFIG_TIMA_RKP */
 #define PGD_SIZE	(PTRS_PER_PGD * sizeof(pgd_t))
 
 static struct kmem_cache *pgd_cache;
-
+#ifndef CONFIG_TIMA_RKP
 pgd_t *pgd_alloc(struct mm_struct *mm)
 {
 	if (PGD_SIZE == PAGE_SIZE)
@@ -39,7 +43,35 @@ pgd_t *pgd_alloc(struct mm_struct *mm)
 	else
 		return kmem_cache_zalloc(pgd_cache, GFP_KERNEL);
 }
+#else
+pgd_t *pgd_alloc(struct mm_struct *mm)
+{
+	pgd_t *ret = NULL;
+#ifdef CONFIG_KNOX_KAP
+	if (boot_mode_security)
+#endif
+		ret = (pgd_t *) rkp_ro_alloc();
+	if (!ret) {
+		if (PGD_SIZE == PAGE_SIZE)
+			ret = (pgd_t *)get_zeroed_page(GFP_KERNEL);
+		else
+			ret = kmem_cache_zalloc(pgd_cache, GFP_KERNEL);
+	}
+
+	if(unlikely(!ret)) {
+		pr_warn("%s: pgd alloc is failed\n", __func__);
+		return ret;
+	}
+
+#ifdef CONFIG_KNOX_KAP
+	if (boot_mode_security && rkp_started)
+#endif  //CONFIG_KNOX_KAP
+		rkp_call(RKP_PGD_NEW, (unsigned long)ret, 0, 0, 0, 0);
+	return ret;
+}
+#endif
 
+#ifndef  CONFIG_TIMA_RKP
 void pgd_free(struct mm_struct *mm, pgd_t *pgd)
 {
 	if (PGD_SIZE == PAGE_SIZE)
@@ -47,7 +79,29 @@ void pgd_free(struct mm_struct *mm, pgd_t *pgd)
 	else
 		kmem_cache_free(pgd_cache, pgd);
 }
-
+#else
+void pgd_free(struct mm_struct *mm, pgd_t *pgd)
+{
+	int rkp_do = 0;
+#ifdef CONFIG_KNOX_KAP
+	if (boot_mode_security)
+#endif	//CONFIG_KNOX_KAP
+		rkp_do = 1;
+	
+	if (rkp_do) rkp_call(RKP_PGD_FREE, (unsigned long)pgd, 0, 0, 0, 0);
+	/* if pgd memory come from read only buffer, the put it back */
+	/*TODO: use a macro*/
+	if( rkp_do &&	(unsigned long)pgd >= (unsigned long)RKP_RBUF_VA && (unsigned long)pgd < ((unsigned long)RKP_RBUF_VA +  TIMA_ROBUF_SIZE))
+		rkp_ro_free((void*)pgd);
+	else
+	{
+		if (PGD_SIZE == PAGE_SIZE)
+			free_page((unsigned long)pgd);
+		else
+			kmem_cache_free(pgd_cache, pgd);
+	}
+}
+#endif
 static int __init pgd_cache_init(void)
 {
 	/*
