diff --git a/arch/arm64/kernel/psci.c b/arch/arm64/kernel/psci.c
index 5944031faa9f..b34f860a7a8a 100644
--- a/arch/arm64/kernel/psci.c
+++ b/arch/arm64/kernel/psci.c
@@ -486,10 +486,49 @@ static int psci_suspend_finisher(unsigned long index)
 				    virt_to_phys(cpu_resume));
 }
 
+/**
+ * Ideally, we hope that PSCI framework cover the all power states, but it
+ * is not correspond on some platforms. Below function supports extra power
+ * state that PSCI cannot be handled.
+ */
+static int psci_suspend_customized_finisher(unsigned long index)
+{
+	struct psci_power_state state = {
+			.id = 0,
+			.type = 0,
+			.affinity_level = 0,
+	};
+
+	switch (index) {
+	case PSCI_CLUSTER_SLEEP:
+		state.affinity_level = 1;
+		break;
+	case PSCI_SYSTEM_IDLE:
+		state.id = 1;
+		break;
+	case PSCI_SYSTEM_IDLE_CLUSTER_SLEEP:
+		state.id = 1;
+		state.affinity_level = 1;
+		break;
+	case PSCI_SYSTEM_SLEEP:
+		state.affinity_level = 3;
+		break;
+	case PSCI_SYSTEM_CP_CALL:
+		state.affinity_level = 1;
+		break;
+	default:
+		panic("Unsupported psci state, index = %ld\n", index);
+		break;
+	};
+
+	return psci_ops.cpu_suspend(state, virt_to_phys(cpu_resume));
+}
+
 static int __maybe_unused cpu_psci_cpu_suspend(unsigned long index)
 {
 	int ret;
 	struct psci_power_state *state = __get_cpu_var(psci_power_state);
+
 	/*
 	 * idle state index 0 corresponds to wfi, should never be called
 	 * from the cpu_suspend operations
@@ -497,6 +536,9 @@ static int __maybe_unused cpu_psci_cpu_suspend(unsigned long index)
 	if (WARN_ON_ONCE(!index))
 		return -EINVAL;
 
+	if (unlikely(index >= PSCI_UNUSED_INDEX))
+		return __cpu_suspend(index, psci_suspend_customized_finisher);
+
 	if (state[index - 1].type == PSCI_POWER_STATE_TYPE_STANDBY)
 		ret = psci_ops.cpu_suspend(state[index - 1], 0);
 	else
@@ -509,6 +551,8 @@ const struct cpu_operations cpu_psci_ops = {
 	.name		= "psci",
 #ifdef CONFIG_CPU_IDLE
 	.cpu_init_idle	= cpu_psci_cpu_init_idle,
+#endif
+#ifdef CONFIG_ARM64_CPU_SUSPEND
 	.cpu_suspend	= cpu_psci_cpu_suspend,
 #endif
 	.cpu_init	= cpu_psci_cpu_init,
