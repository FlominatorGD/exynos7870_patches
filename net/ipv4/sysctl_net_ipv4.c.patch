diff --git a/net/ipv4/sysctl_net_ipv4.c b/net/ipv4/sysctl_net_ipv4.c
index 33ee2976c041..11cb00412fd2 100644
--- a/net/ipv4/sysctl_net_ipv4.c
+++ b/net/ipv4/sysctl_net_ipv4.c
@@ -43,6 +43,10 @@ static int tcp_syn_retries_min = 1;
 static int tcp_syn_retries_max = MAX_TCP_SYNCNT;
 static int ip_ping_group_range_min[] = { 0, 0 };
 static int ip_ping_group_range_max[] = { GID_T_MAX, GID_T_MAX };
+static int tcp_delack_seg_min = TCP_DELACK_MIN;
+static int tcp_delack_seg_max = 60;
+static int tcp_use_userconfig_min;
+static int tcp_use_userconfig_max = 1;
 
 /* Update system visible IP port range */
 static void set_local_port_range(struct net *net, int range[2])
@@ -273,6 +277,93 @@ bad_key:
 	return ret;
 }
 
+#ifdef CONFIG_NETPM
+#define TCP_NETPM_IFNAME_MAX	23
+#define TCP_NETPM_IFDEVS_MAX	64
+
+static int proc_netpm_ifdevs(struct ctl_table *ctl, int write,
+			     void __user *buffer, size_t *lenp,
+			     loff_t *ppos)
+{
+	size_t offs = 0;
+	char ifname[TCP_NETPM_IFNAME_MAX + 1];
+	char *strbuf = NULL;
+	struct net_device *dev;
+	struct ctl_table tbl = { .maxlen = ((TCP_NETPM_IFNAME_MAX + 1) * TCP_NETPM_IFDEVS_MAX) };
+	int ret = 0;
+
+	if (!write) {
+		char *dev_list;
+		int len = tbl.maxlen, used;
+
+		tbl.data = kzalloc(tbl.maxlen, GFP_KERNEL);
+		if (!tbl.data)
+			return -ENOMEM;
+		dev_list = (char *)tbl.data;
+
+		rcu_read_lock();
+		for_each_netdev_rcu(&init_net, dev) {
+			if (dev && dev->netpm_use) {
+				used = snprintf(dev_list, len, "%s ", dev->name);
+				dev_list += used;
+				len -= used;
+			}
+		}
+		rcu_read_unlock();
+
+		ret = proc_dostring(&tbl, write, buffer, lenp, ppos);
+
+		kfree(tbl.data);
+		return ret;
+	}
+
+	if (*lenp > tbl.maxlen || *lenp < 1) {
+		pr_info("%s: netpm: lenp=%lu\n", __func__, *lenp);
+		return -EINVAL;
+	}
+
+	strbuf = kzalloc(*lenp + 1, GFP_USER);
+	if (!strbuf)
+		return -ENOMEM;
+
+	if (copy_from_user(strbuf, buffer, *lenp)) {
+		kfree(strbuf);
+		return -EFAULT;
+	}
+
+	/* clear netpm use */
+	rcu_read_lock();
+	for_each_netdev_rcu(&init_net, dev) {
+		if (dev)
+			dev->netpm_use = 0;
+	}
+	rcu_read_unlock();
+
+	while (offs < *lenp && sscanf(strbuf + offs, "%23s", ifname) > 0) {
+		struct net_device *dev;
+		int len = strlen(ifname);
+
+		if (!len)
+			break;
+
+		rcu_read_lock();
+		dev = dev_get_by_name_rcu(&init_net, ifname);
+		if (dev) {
+			dev->netpm_use = 1;
+			pr_info("%s: netpm: ifdev %s added\n", __func__, ifname);
+		}
+		rcu_read_unlock();
+
+		offs += len;
+		while (offs < *lenp && ((char *)strbuf)[offs] == ' ')
+			offs++;
+	}
+
+	kfree(strbuf);
+	return 0;
+}
+#endif
+
 static struct ctl_table ipv4_table[] = {
 	{
 		.procname	= "tcp_timestamps",
@@ -664,6 +755,21 @@ static struct ctl_table ipv4_table[] = {
 		.mode		= 0644,
 		.proc_handler	= proc_dointvec
 	},
+#ifdef CONFIG_NETPM
+	{
+		.procname	= "tcp_netpm",
+		.data		= &sysctl_tcp_netpm,
+		.maxlen		= sizeof(sysctl_tcp_netpm),
+		.mode		= 0644,
+		.proc_handler	= proc_dointvec
+	},
+	{
+		.procname	= "tcp_netpm_ifdevs",
+		.maxlen		= ((TCP_NETPM_IFNAME_MAX + 1) * TCP_NETPM_IFDEVS_MAX),
+		.mode		= 0644,
+		.proc_handler	= proc_netpm_ifdevs
+	},
+#endif
 #ifdef CONFIG_NETLABEL
 	{
 		.procname	= "cipso_cache_enable",
@@ -793,6 +899,25 @@ static struct ctl_table ipv4_table[] = {
 		.proc_handler	= proc_dointvec_minmax,
 		.extra1		= &one
 	},
+	{
+		.procname	= "tcp_delack_seg",
+		.data		= &sysctl_tcp_delack_seg,
+		.maxlen		= sizeof(sysctl_tcp_delack_seg),
+		.mode		= 0644,
+		.proc_handler	= tcp_proc_delayed_ack_control,
+		.extra1		= &tcp_delack_seg_min,
+		.extra2		= &tcp_delack_seg_max,
+	},
+	{
+		.procname       = "tcp_use_userconfig",
+		.data           = &sysctl_tcp_use_userconfig,
+		.maxlen         = sizeof(sysctl_tcp_use_userconfig),
+		.mode           = 0644,
+		.proc_handler   = tcp_use_userconfig_sysctl_handler,
+		.extra1		= &tcp_use_userconfig_min,
+		.extra2		= &tcp_use_userconfig_max,
+	},
+
 	{ }
 };
 
