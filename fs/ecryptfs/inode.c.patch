diff --git a/fs/ecryptfs/inode.c b/fs/ecryptfs/inode.c
index d50bfa36f459..f10ac795e90e 100644
--- a/fs/ecryptfs/inode.c
+++ b/fs/ecryptfs/inode.c
@@ -36,6 +36,49 @@
 #include <asm/unaligned.h>
 #include "ecryptfs_kernel.h"
 
+#ifdef CONFIG_SDP
+#include <sdp/fs_request.h>
+#include "ecryptfs_sdp_chamber.h"
+#include "ecryptfs_dek.h"
+#if (ANDROID_VERSION < 80000)
+#include "sdcardfs.h"
+#endif
+
+#endif
+
+#ifdef CONFIG_DLP
+#include "ecryptfs_dlp.h"
+#endif
+
+/* Do not directly use this function. Use ECRYPTFS_OVERRIDE_CRED() instead. */
+const struct cred * ecryptfs_override_fsids(uid_t fsuid, gid_t fsgid)
+{
+	struct cred * cred; 
+	const struct cred * old_cred; 
+
+	cred = prepare_creds(); 
+	if (!cred) 
+		return NULL; 
+
+	cred->fsuid = make_kuid(current_user_ns(), fsuid);
+	cred->fsgid = make_kgid(current_user_ns(), fsgid);
+
+	old_cred = override_creds(cred); 
+
+	return old_cred; 
+}
+
+/* Do not directly use this function, use REVERT_CRED() instead. */
+void ecryptfs_revert_fsids(const struct cred * old_cred)
+{
+	const struct cred * cur_cred; 
+
+	cur_cred = current->cred; 
+	revert_creds(old_cred); 
+	put_cred(cur_cred); 
+}
+
+#if !defined(CONFIG_SDP) || (ANDROID_VERSION >= 80000)
 static struct dentry *lock_parent(struct dentry *dentry)
 {
 	struct dentry *dir;
@@ -50,6 +93,7 @@ static void unlock_dir(struct dentry *dir)
 	mutex_unlock(&dir->d_inode->i_mutex);
 	dput(dir);
 }
+#endif
 
 static int ecryptfs_inode_test(struct inode *inode, void *lower_inode)
 {
@@ -136,7 +180,43 @@ static int ecryptfs_interpose(struct dentry *lower_dentry,
 
 	if (IS_ERR(inode))
 		return PTR_ERR(inode);
+
 	d_instantiate(dentry, inode);
+#if (ANDROID_VERSION < 80000)
+	if(d_unhashed(dentry))
+		d_rehash(dentry);
+#endif
+
+#ifdef CONFIG_SDP
+	if(S_ISDIR(inode->i_mode) && dentry) {
+	    if(IS_UNDER_ROOT(dentry)) {
+	        struct ecryptfs_mount_crypt_stat *mount_crypt_stat  =
+	                &ecryptfs_superblock_to_private(inode->i_sb)->mount_crypt_stat;
+	        int engineid;
+
+	        printk("Creating a directoy under root directory of current partition.\n");
+
+	        if(is_chamber_directory(mount_crypt_stat, dentry->d_name.name, &engineid)) {
+	            printk("This is a chamber directory engine[%d]\n", engineid);
+	            set_chamber_flag(engineid, inode);
+	        }
+	    } else if(IS_SENSITIVE_DENTRY(dentry->d_parent)) {
+	        /*
+	         * When parent directory is sensitive
+	         */
+	        struct ecryptfs_crypt_stat *crypt_stat =
+	                &ecryptfs_inode_to_private(inode)->crypt_stat;
+            struct ecryptfs_crypt_stat *parent_crypt_stat =
+                    &ecryptfs_inode_to_private(dentry->d_parent->d_inode)->crypt_stat;
+
+            //TODO : remove this log
+            DEK_LOGE("Parent %s[id:%d] is sensitive. so this directory is sensitive too\n",
+	                dentry->d_parent->d_name.name, parent_crypt_stat->engine_id);
+	        crypt_stat->flags |= ECRYPTFS_DEK_IS_SENSITIVE;
+            crypt_stat->engine_id = parent_crypt_stat->engine_id;
+	    }
+	}
+#endif
 
 	return 0;
 }
@@ -225,6 +305,10 @@ int ecryptfs_initialize_file(struct dentry *ecryptfs_dentry,
 		&ecryptfs_inode_to_private(ecryptfs_inode)->crypt_stat;
 	int rc = 0;
 
+#ifdef CONFIG_DLP
+	sdp_fs_command_t *cmd = NULL;
+#endif
+
 	if (S_ISDIR(ecryptfs_inode->i_mode)) {
 		ecryptfs_printk(KERN_DEBUG, "This is a directory\n");
 		crypt_stat->flags &= ~(ECRYPTFS_ENCRYPTED);
@@ -245,11 +329,88 @@ int ecryptfs_initialize_file(struct dentry *ecryptfs_dentry,
 			ecryptfs_dentry, rc);
 		goto out;
 	}
+#ifdef CONFIG_DLP
+	if(crypt_stat->mount_crypt_stat->flags & ECRYPTFS_MOUNT_DLP_ENABLED) {
+#if DLP_DEBUG
+		printk(KERN_ERR "DLP %s: file name: [%s], userid: [%d]\n",
+				__func__, ecryptfs_dentry->d_iname, crypt_stat->mount_crypt_stat->userid);
+#endif
+		if(!rc && (in_egroup_p(AID_KNOX_DLP) || in_egroup_p(AID_KNOX_DLP_RESTRICTED) || in_egroup_p(AID_KNOX_DLP_MEDIA))) {
+			/* TODO: Can DLP files be created while in locked state? */
+			struct timespec ts;
+			crypt_stat->flags |= ECRYPTFS_DLP_ENABLED;
+			getnstimeofday(&ts);
+			if(in_egroup_p(AID_KNOX_DLP_MEDIA)) {
+				printk(KERN_ERR "DLP %s: media process creating file  : %s\n", __func__, ecryptfs_dentry->d_iname);
+			} else {
+				crypt_stat->expiry.expiry_time.tv_sec = (int64_t)ts.tv_sec + 20;
+				crypt_stat->expiry.expiry_time.tv_nsec = (int64_t)ts.tv_nsec;
+			}
+#if DLP_DEBUG
+			printk(KERN_ERR "DLP %s: current->pid : %d\n", __func__, current->tgid);
+			printk(KERN_ERR "DLP %s: crypt_stat->mount_crypt_stat->userid : %d\n", __func__, crypt_stat->mount_crypt_stat->userid);
+			printk(KERN_ERR "DLP %s: crypt_stat->mount_crypt_stat->partition_id : %d\n", __func__, crypt_stat->mount_crypt_stat->partition_id);
+#endif
+			if(in_egroup_p(AID_KNOX_DLP)) {
+				cmd = sdp_fs_command_alloc(FSOP_DLP_FILE_INIT,
+                current->tgid, crypt_stat->mount_crypt_stat->userid, crypt_stat->mount_crypt_stat->partition_id,
+                ecryptfs_inode->i_ino, GFP_KERNEL);
+			}
+			else if(in_egroup_p(AID_KNOX_DLP_RESTRICTED)) {
+				cmd = sdp_fs_command_alloc(FSOP_DLP_FILE_INIT_RESTRICTED,
+                current->tgid, crypt_stat->mount_crypt_stat->userid, crypt_stat->mount_crypt_stat->partition_id,
+                ecryptfs_inode->i_ino, GFP_KERNEL);
+			}
+		} else {
+			printk(KERN_ERR "DLP %s: not in group\n", __func__);
+		}
+	}
+#endif
+#ifdef CONFIG_WTL_ENCRYPTION_FILTER
+	mutex_lock(&crypt_stat->cs_mutex);
+	if (crypt_stat->flags & ECRYPTFS_ENCRYPTED) {
+		struct dentry *fp_dentry =
+			ecryptfs_inode_to_private(ecryptfs_inode)
+			->lower_file->f_dentry;
+		struct ecryptfs_mount_crypt_stat *mount_crypt_stat =
+			&ecryptfs_superblock_to_private(ecryptfs_dentry->d_sb)
+			->mount_crypt_stat;
+		char filename[NAME_MAX+1] = {0};
+		if (fp_dentry->d_name.len <= NAME_MAX)
+			memcpy(filename, fp_dentry->d_name.name,
+					fp_dentry->d_name.len + 1);
+
+		if ((mount_crypt_stat->flags & ECRYPTFS_ENABLE_NEW_PASSTHROUGH)
+		|| ((mount_crypt_stat->flags & ECRYPTFS_ENABLE_FILTERING) &&
+			(is_file_name_match(mount_crypt_stat, fp_dentry) ||
+			is_file_ext_match(mount_crypt_stat, filename)))) {
+			crypt_stat->flags &= ~(ECRYPTFS_I_SIZE_INITIALIZED
+				| ECRYPTFS_ENCRYPTED);
+			ecryptfs_put_lower_file(ecryptfs_inode);
+		} else {
+			rc = ecryptfs_write_metadata(ecryptfs_dentry,
+				 ecryptfs_inode);
+			if (rc)
+				printk(
+				KERN_ERR "Error writing headers; rc = [%d]\n"
+				    , rc);
+			ecryptfs_put_lower_file(ecryptfs_inode);
+		}
+	}
+	mutex_unlock(&crypt_stat->cs_mutex);
+#else
 	rc = ecryptfs_write_metadata(ecryptfs_dentry, ecryptfs_inode);
 	if (rc)
 		printk(KERN_ERR "Error writing headers; rc = [%d]\n", rc);
 	ecryptfs_put_lower_file(ecryptfs_inode);
+#endif
 out:
+#ifdef CONFIG_DLP
+	if(cmd) {
+		sdp_fs_request(cmd, NULL);
+		sdp_fs_command_free(cmd);
+	}
+#endif
 	return rc;
 }
 
@@ -290,6 +451,10 @@ ecryptfs_create(struct inode *directory_inode, struct dentry *ecryptfs_dentry,
 		goto out;
 	}
 	d_instantiate_new(ecryptfs_dentry, ecryptfs_inode);
+#if (ANDROID_VERSION < 80000)
+	if(d_unhashed(ecryptfs_dentry))
+		d_rehash(ecryptfs_dentry);
+#endif
 out:
 	return rc;
 }
@@ -332,9 +497,9 @@ static int ecryptfs_lookup_interpose(struct dentry *dentry,
 				     struct dentry *lower_dentry,
 				     struct inode *dir_inode)
 {
-	struct path *path = ecryptfs_dentry_to_lower_path(dentry->d_parent);
-	struct inode *inode, *lower_inode;
+	struct inode *inode, *lower_inode = lower_dentry->d_inode;
 	struct ecryptfs_dentry_info *dentry_info;
+	struct vfsmount *lower_mnt;
 	int rc = 0;
 
 	dentry_info = kmem_cache_alloc(ecryptfs_dentry_info_cache, GFP_KERNEL);
@@ -346,24 +511,19 @@ static int ecryptfs_lookup_interpose(struct dentry *dentry,
 		return -ENOMEM;
 	}
 
-	fsstack_copy_attr_atime(dir_inode, d_inode(path->dentry));
+	lower_mnt = mntget(ecryptfs_dentry_to_lower_mnt(dentry->d_parent));
+	fsstack_copy_attr_atime(dir_inode, lower_dentry->d_parent->d_inode);
 	BUG_ON(!d_count(lower_dentry));
 
 	ecryptfs_set_dentry_private(dentry, dentry_info);
-	dentry_info->lower_path.mnt = mntget(path->mnt);
+	dentry_info->lower_path.mnt = lower_mnt;
 	dentry_info->lower_path.dentry = lower_dentry;
 
-	/*
-	 * negative dentry can go positive under us here - its parent is not
-	 * locked.  That's OK and that could happen just as we return from
-	 * ecryptfs_lookup() anyway.  Just need to be careful and fetch
-	 * ->d_inode only once - it's not stable here.
-	 */
-	lower_inode = READ_ONCE(lower_dentry->d_inode);
-
-	if (!lower_inode) {
+	if (!lower_dentry->d_inode) {
+#if (ANDROID_VERSION >= 80000)
 		/* We want to add because we couldn't find in lower */
 		d_add(dentry, NULL);
+#endif
 		return 0;
 	}
 	inode = __ecryptfs_get_inode(lower_inode, dir_inode->i_sb);
@@ -380,6 +540,39 @@ static int ecryptfs_lookup_interpose(struct dentry *dentry,
 		}
 	}
 
+#ifdef CONFIG_SDP
+	if (S_ISDIR(inode->i_mode) && dentry) {
+	    if(IS_UNDER_ROOT(dentry)) {
+	        struct ecryptfs_mount_crypt_stat *mount_crypt_stat  =
+	                &ecryptfs_superblock_to_private(inode->i_sb)->mount_crypt_stat;
+	        int engineid;
+
+	        //printk("Lookup a directoy under root directory of current partition.\n");
+
+	        if(is_chamber_directory(mount_crypt_stat, dentry->d_name.name, &engineid)) {
+	            /*
+	             * When this directory is under ROOT directory and the name is registered
+	             * as Chamber.
+	             */
+	            printk("This is a chamber directory engine[%d]\n", engineid);
+	            set_chamber_flag(engineid, inode);
+	        }
+	    } else if(IS_SENSITIVE_DENTRY(dentry->d_parent)) {
+	        /*
+	         * When parent directory is sensitive
+	         */
+	        struct ecryptfs_crypt_stat *crypt_stat =
+	                &ecryptfs_inode_to_private(inode)->crypt_stat;
+	        struct ecryptfs_crypt_stat *parent_crypt_stat =
+	                &ecryptfs_inode_to_private(dentry->d_parent->d_inode)->crypt_stat;
+	        printk("Parent %s is sensitive. so this directory is sensitive too\n",
+	                dentry->d_parent->d_name.name);
+	        crypt_stat->flags |= ECRYPTFS_DEK_IS_SENSITIVE;
+	        crypt_stat->engine_id = parent_crypt_stat->engine_id;
+	    }
+	}
+#endif
+
 	if (inode->i_state & I_NEW)
 		unlock_new_inode(inode);
 	d_add(dentry, inode);
@@ -387,6 +580,13 @@ static int ecryptfs_lookup_interpose(struct dentry *dentry,
 	return rc;
 }
 
+#ifdef CONFIG_SDP
+static inline int isdigit(int ch)
+{
+	return (ch >= '0') && (ch <= '9');
+}
+#endif
+
 /**
  * ecryptfs_lookup
  * @ecryptfs_dir_inode: The eCryptfs directory inode
@@ -437,9 +637,68 @@ static struct dentry *ecryptfs_lookup(struct inode *ecryptfs_dir_inode,
 		goto out;
 	}
 	mutex_lock(&lower_dir_dentry->d_inode->i_mutex);
+
+#if defined(CONFIG_SDP) && (ANDROID_VERSION < 80000)
+	if(!strncmp(lower_dir_dentry->d_sb->s_type->name, "sdcardfs", 8)) {
+		struct sdcardfs_dentry_info *dinfo = SDCARDFS_D(lower_dir_dentry);
+		struct dentry *parent = dget_parent(lower_dir_dentry);
+		struct sdcardfs_dentry_info *parent_info = SDCARDFS_D(parent);
+
+		dinfo->under_knox = 1;
+		dinfo->userid = -1;
+
+		if(IS_UNDER_ROOT(ecryptfs_dentry)) {
+			parent_info->permission = PERMISSION_PRE_ROOT;
+			if(mount_crypt_stat->userid >= 100 && mount_crypt_stat->userid <= 200) {
+				parent_info->userid = mount_crypt_stat->userid;
+
+				/* Assume masked off by default. */
+				if (!strcasecmp(ecryptfs_dentry->d_name.name, "Android")) {
+					/* App-specific directories inside; let anyone traverse */
+					dinfo->permission = PERMISSION_ROOT;
+				}	
+			}
+			else {
+				int len = strlen(ecryptfs_dentry->d_name.name);
+				int i, numeric = 1;
+
+				for(i=0 ; i < len ; i++)
+					if(!isdigit(ecryptfs_dentry->d_name.name[i])) { numeric = 0; break; }
+				if(numeric) {
+					dinfo->userid = simple_strtoul(ecryptfs_dentry->d_name.name, NULL, 10);
+				}
+			} 
+		}
+		else {
+			struct sdcardfs_sb_info *sbi = SDCARDFS_SB(lower_dir_dentry->d_sb);
+			
+			/* Derive custom permissions based on parent and current node */
+			switch (parent_info->permission) {
+				case PERMISSION_ROOT:
+					if (!strcasecmp(ecryptfs_dentry->d_name.name, "data") || !strcasecmp(ecryptfs_dentry->d_name.name, "obb") || !strcasecmp(ecryptfs_dentry->d_name.name, "media")) {
+						/* App-specific directories inside; let anyone traverse */
+						dinfo->permission = PERMISSION_ANDROID;
+					} 
+					break;
+               			case PERMISSION_ANDROID:
+					dinfo->permission = PERMISSION_UNDER_ANDROID;
+               				dinfo->appid = get_appid(sbi->pkgl_id, ecryptfs_dentry->d_name.name);
+					break;
+			}
+		}
+		dput(parent);
+	}
+#endif
 	lower_dentry = lookup_one_len(encrypted_and_encoded_name,
 				      lower_dir_dentry,
 				      encrypted_and_encoded_name_size);
+#if defined(CONFIG_SDP) && (ANDROID_VERSION < 80000)
+	if(!strncmp(lower_dir_dentry->d_sb->s_type->name, "sdcardfs", 8)) {
+		struct sdcardfs_dentry_info *dinfo = SDCARDFS_D(lower_dir_dentry);
+		dinfo->under_knox = 0;
+		dinfo->userid = -1;
+	}
+#endif
 	mutex_unlock(&lower_dir_dentry->d_inode->i_mutex);
 	if (IS_ERR(lower_dentry)) {
 		rc = PTR_ERR(lower_dentry);
@@ -543,6 +802,24 @@ static int ecryptfs_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode
 
 	lower_dentry = ecryptfs_dentry_to_lower(dentry);
 	lower_dir_dentry = lock_parent(lower_dentry);
+
+#if defined(CONFIG_SDP) && (ANDROID_VERSION < 80000)
+	if(!strncmp(lower_dir_dentry->d_sb->s_type->name, "sdcardfs", 8)) {
+		struct sdcardfs_dentry_info *dinfo = SDCARDFS_D(lower_dir_dentry);
+		int len = strlen(dentry->d_name.name);
+		int i, numeric = 1;
+
+		dinfo->under_knox = 1;
+		dinfo->userid = -1;
+		if(IS_UNDER_ROOT(dentry)) {
+			for(i=0 ; i < len ; i++)
+				if(!isdigit(dentry->d_name.name[i])) { numeric = 0; break; }
+			if(numeric) {
+				dinfo->userid = simple_strtoul(dentry->d_name.name, NULL, 10);
+			}
+		}
+	}
+#endif
 	rc = vfs_mkdir(lower_dir_dentry->d_inode, lower_dentry, mode);
 	if (rc || !lower_dentry->d_inode)
 		goto out;
@@ -553,6 +830,13 @@ static int ecryptfs_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode
 	fsstack_copy_inode_size(dir, lower_dir_dentry->d_inode);
 	set_nlink(dir, lower_dir_dentry->d_inode->i_nlink);
 out:
+#if defined(CONFIG_SDP) && (ANDROID_VERSION < 80000)
+	if(!strncmp(lower_dir_dentry->d_sb->s_type->name, "sdcardfs", 8)) {
+		struct sdcardfs_dentry_info *dinfo = SDCARDFS_D(lower_dir_dentry);
+		dinfo->under_knox = 0;
+		dinfo->userid = -1;
+	}
+#endif
 	unlock_dir(lower_dir_dentry);
 	if (!dentry->d_inode)
 		d_drop(dentry);
@@ -565,6 +849,13 @@ static int ecryptfs_rmdir(struct inode *dir, struct dentry *dentry)
 	struct dentry *lower_dir_dentry;
 	int rc;
 
+#ifdef CONFIG_SDP
+	if(IS_CHAMBER_DENTRY(dentry)) {
+		printk("You're removing chamber directory. I/O error\n");
+		return -EIO;
+	}
+#endif
+
 	lower_dentry = ecryptfs_dentry_to_lower(dentry);
 	dget(dentry);
 	lower_dir_dentry = lock_parent(lower_dentry);
@@ -606,6 +897,8 @@ out:
 	return rc;
 }
 
+#define ECRYPTFS_SDP_RENAME_DEBUG 0
+
 static int
 ecryptfs_rename(struct inode *old_dir, struct dentry *old_dentry,
 		struct inode *new_dir, struct dentry *new_dentry)
@@ -617,6 +910,76 @@ ecryptfs_rename(struct inode *old_dir, struct dentry *old_dentry,
 	struct dentry *lower_new_dir_dentry;
 	struct dentry *trap = NULL;
 	struct inode *target_inode;
+#ifdef CONFIG_DLP
+	sdp_fs_command_t *cmd1 = NULL;
+	unsigned long old_inode = old_dentry->d_inode->i_ino;
+#endif
+#ifdef CONFIG_SDP
+	sdp_fs_command_t *cmd = NULL;
+	int rename_event = 0x00;
+	struct ecryptfs_crypt_stat *crypt_stat =
+	        &(ecryptfs_inode_to_private(old_dentry->d_inode)->crypt_stat);
+	struct ecryptfs_crypt_stat *parent_crypt_stat =
+	        &(ecryptfs_inode_to_private(old_dentry->d_parent->d_inode)->crypt_stat);
+	struct ecryptfs_crypt_stat *new_parent_crypt_stat =
+	        &(ecryptfs_inode_to_private(new_dentry->d_parent->d_inode)->crypt_stat);
+	struct ecryptfs_mount_crypt_stat *mount_crypt_stat =
+	        &ecryptfs_superblock_to_private(old_dentry->d_sb)->mount_crypt_stat;
+
+#if ECRYPTFS_SDP_RENAME_DEBUG
+	printk("You're renaming %s to %s\n",
+			old_dentry->d_name.name,
+			new_dentry->d_name.name);
+	printk("old_dentry[%p] : %s [parent %s : %s] inode:%p\n",
+			old_dentry, old_dentry->d_name.name,
+			old_dentry->d_parent->d_name.name,
+			IS_SENSITIVE_DENTRY(old_dentry->d_parent) ? "sensitive" : "protected",
+					old_dentry->d_inode);
+	printk("new_dentry[%p] : %s [parent %s : %s] inode:%p\n",
+			new_dentry, new_dentry->d_name.name,
+			new_dentry->d_parent->d_name.name,
+			IS_SENSITIVE_DENTRY(new_dentry->d_parent) ? "sensitive" : "protected",
+					new_dentry->d_inode);
+#endif
+
+    if(IS_CHAMBER_DENTRY(old_dentry)) {
+        printk("Rename trial on chamber : failed\n");
+        return -EIO;
+    }
+
+#if 0 // kernel panic. new_crypt_stat->engine_id
+    if(IS_SENSITIVE_DENTRY(old_dentry->d_parent) &&
+            IS_SENSITIVE_DENTRY(new_dentry->d_parent)) {
+        if(crypt_stat->engine_id != new_crypt_stat->engine_id) {
+            printk("Rename chamber file to another chamber : failed\n");
+            return -EIO;
+        }
+    }
+#endif
+
+	if(IS_SENSITIVE_DENTRY(old_dentry->d_parent)) {
+	    if(ecryptfs_is_sdp_locked(parent_crypt_stat->engine_id)) {
+	        printk("Rename/move trial in locked state\n");
+	        return -EIO;
+	    }
+	}
+
+	if(IS_SENSITIVE_DENTRY(old_dentry->d_parent) &&
+			IS_SENSITIVE_DENTRY(new_dentry->d_parent)) {
+		if(parent_crypt_stat->engine_id != new_parent_crypt_stat->engine_id) {
+	        printk("Can't move between chambers\n");
+			return -EIO;
+		}
+	}
+
+	if(IS_SENSITIVE_DENTRY(old_dentry->d_parent) &&
+			!IS_SENSITIVE_DENTRY(new_dentry->d_parent))
+		rename_event |= ECRYPTFS_EVT_RENAME_OUT_OF_CHAMBER;
+
+	if(!IS_SENSITIVE_DENTRY(old_dentry->d_parent) &&
+			IS_SENSITIVE_DENTRY(new_dentry->d_parent))
+		rename_event |= ECRYPTFS_EVT_RENAME_TO_CHAMBER;
+#endif
 
 	lower_old_dentry = ecryptfs_dentry_to_lower(old_dentry);
 	lower_new_dentry = ecryptfs_dentry_to_lower(new_dentry);
@@ -647,12 +1010,76 @@ ecryptfs_rename(struct inode *old_dir, struct dentry *old_dentry,
 	fsstack_copy_attr_all(new_dir, lower_new_dir_dentry->d_inode);
 	if (new_dir != old_dir)
 		fsstack_copy_attr_all(old_dir, lower_old_dir_dentry->d_inode);
+
+#ifdef CONFIG_SDP
+	if(!rc) {
+		crypt_stat = &(ecryptfs_inode_to_private(old_dentry->d_inode)->crypt_stat);
+
+        if(rename_event > 0) {
+            switch(rename_event) {
+            case ECRYPTFS_EVT_RENAME_TO_CHAMBER:
+                cmd = sdp_fs_command_alloc(FSOP_SDP_SET_SENSITIVE, current->pid,
+                		mount_crypt_stat->userid, mount_crypt_stat->partition_id,
+                        old_dentry->d_inode->i_ino,
+                        GFP_NOFS);
+                break;
+            case ECRYPTFS_EVT_RENAME_OUT_OF_CHAMBER:
+                cmd = sdp_fs_command_alloc(FSOP_SDP_SET_PROTECTED, current->pid,
+                		mount_crypt_stat->userid, mount_crypt_stat->partition_id,
+                        old_dentry->d_inode->i_ino,
+                        GFP_NOFS);
+                break;
+            default:
+                cmd = NULL;
+                break;
+            }
+        }
+#if ECRYPTFS_SDP_RENAME_DEBUG
+		printk("[end of rename] old_dentry[%p] : %s [parent %s : %s] inode:%p\n",
+				old_dentry, old_dentry->d_name.name,
+				old_dentry->d_parent->d_name.name,
+				IS_SENSITIVE_DENTRY(old_dentry->d_parent) ? "sensitive" : "protected",
+						old_dentry->d_inode);
+		printk("[end of rename] new_dentry[%p] : %s [parent %s : %s] inode:%p\n",
+				new_dentry, new_dentry->d_name.name,
+				new_dentry->d_parent->d_name.name,
+				IS_SENSITIVE_DENTRY(new_dentry->d_parent) ? "sensitive" : "protected",
+						new_dentry->d_inode);
+#endif
+
+    }
+#endif
+
 out_lock:
 	unlock_rename(lower_old_dir_dentry, lower_new_dir_dentry);
 	dput(lower_new_dir_dentry);
 	dput(lower_old_dir_dentry);
 	dput(lower_new_dentry);
 	dput(lower_old_dentry);
+
+#ifdef CONFIG_SDP
+	if(!rc && cmd != NULL) {
+	    sdp_fs_request(cmd, ecryptfs_fs_request_callback);
+	    sdp_fs_command_free(cmd);
+	}
+#endif
+
+#ifdef CONFIG_DLP
+	//create new init command and send--Handle transient case MS-Apps
+	if(crypt_stat->flags & ECRYPTFS_DLP_ENABLED) {
+		if(!rc && (in_egroup_p(AID_KNOX_DLP) || in_egroup_p(AID_KNOX_DLP_RESTRICTED))){
+            cmd1 = sdp_fs_command_alloc(FSOP_DLP_FILE_RENAME,
+						current->tgid, mount_crypt_stat->userid, mount_crypt_stat->partition_id,
+						old_inode, GFP_KERNEL);
+            //send cmd
+			if(cmd1) {
+                sdp_fs_request(cmd1, NULL);
+                sdp_fs_command_free(cmd1);
+			}
+		}
+	}
+    //end- Handle transient case MS-Apps
+#endif
 	return rc;
 }
 
@@ -1028,6 +1455,10 @@ ecryptfs_setxattr(struct dentry *dentry, const char *name, const void *value,
 {
 	int rc = 0;
 	struct dentry *lower_dentry;
+#ifdef CONFIG_DLP
+	struct ecryptfs_crypt_stat *crypt_stat = NULL;
+	int flag = 1;
+#endif
 
 	lower_dentry = ecryptfs_dentry_to_lower(dentry);
 	if (!lower_dentry->d_inode->i_op->setxattr) {
@@ -1035,6 +1466,29 @@ ecryptfs_setxattr(struct dentry *dentry, const char *name, const void *value,
 		goto out;
 	}
 
+#ifdef CONFIG_DLP
+	if (!strcmp(name, KNOX_DLP_XATTR_NAME)) {
+#if DLP_DEBUG
+		printk(KERN_ERR "DLP %s: setting knox_dlp by [%d]\n", __func__, from_kuid(&init_user_ns, current_uid()));
+#endif
+		if (!is_root() && !is_system_server()) {
+			printk(KERN_ERR "DLP %s: setting knox_dlp not allowed by [%d]\n", __func__, from_kuid(&init_user_ns, current_uid()));
+			return -EPERM;
+		}
+		if (dentry->d_inode) {
+			crypt_stat = &ecryptfs_inode_to_private(dentry->d_inode)->crypt_stat;
+			if(crypt_stat) {
+				crypt_stat->flags |= ECRYPTFS_DLP_ENABLED;
+				flag = 0;
+			}
+		}
+		if(flag){
+			printk(KERN_ERR "DLP %s: setting knox_dlp failed\n", __func__);
+			return -EOPNOTSUPP;
+		}
+	}
+#endif
+
 	rc = vfs_setxattr(lower_dentry, name, value, size, flags);
 	if (!rc && dentry->d_inode)
 		fsstack_copy_attr_all(dentry->d_inode, lower_dentry->d_inode);
@@ -1064,8 +1518,53 @@ static ssize_t
 ecryptfs_getxattr(struct dentry *dentry, const char *name, void *value,
 		  size_t size)
 {
+#ifdef CONFIG_DLP
+	int rc = 0;
+	struct ecryptfs_crypt_stat *crypt_stat = NULL;
+
+	rc = ecryptfs_getxattr_lower(ecryptfs_dentry_to_lower(dentry), name,
+			value, size);
+
+	if (rc == 8 && !strcmp(name, KNOX_DLP_XATTR_NAME)) {
+		uint32_t msw, lsw;
+		struct knox_dlp_data *dlp_data = value;
+		if (size < sizeof(struct knox_dlp_data)) {
+			return -ERANGE;
+		}
+		msw = (dlp_data->expiry_time.tv_sec >> 32) & 0xFFFFFFFF;
+		lsw = dlp_data->expiry_time.tv_sec & 0xFFFFFFFF;
+		dlp_data->expiry_time.tv_sec = (uint64_t)lsw;
+		dlp_data->expiry_time.tv_nsec = (uint64_t)msw;
+		rc = sizeof(struct knox_dlp_data);
+#if DLP_DEBUG
+		printk(KERN_ERR "DLP %s: conversion done, tv_sec=[%ld]\n",
+				__func__, (long)dlp_data->expiry_time.tv_sec);
+#endif
+	}
+
+	if ((rc == -ENODATA) && (!strcmp(name, KNOX_DLP_XATTR_NAME))) {
+		if (dentry->d_inode) {
+			crypt_stat = &ecryptfs_inode_to_private(dentry->d_inode)->crypt_stat;
+		}
+		if (crypt_stat && (crypt_stat->flags & ECRYPTFS_DLP_ENABLED)) {
+			if (size < sizeof(struct knox_dlp_data)) {
+				return -ERANGE;
+			}
+			if (crypt_stat->expiry.expiry_time.tv_sec <= 0) {
+#if DLP_DEBUG
+				printk(KERN_ERR "DLP %s: expiry time=[%ld], fileName [%s]\n", __func__, (long)crypt_stat->expiry.expiry_time.tv_sec, dentry->d_name.name);
+#endif
+			}
+			memcpy(value, &crypt_stat->expiry, sizeof(struct knox_dlp_data));
+			rc = sizeof(struct knox_dlp_data);
+		}
+	}
+	return rc;
+
+#else
 	return ecryptfs_getxattr_lower(ecryptfs_dentry_to_lower(dentry), name,
 				       value, size);
+#endif
 }
 
 static ssize_t
@@ -1096,6 +1595,19 @@ static int ecryptfs_removexattr(struct dentry *dentry, const char *name)
 		rc = -EOPNOTSUPP;
 		goto out;
 	}
+
+#ifdef CONFIG_DLP
+	if (!strcmp(name, KNOX_DLP_XATTR_NAME)) {
+#if DLP_DEBUG
+		printk(KERN_ERR "DLP %s: removing knox_dlp by [%d]\n", __func__, from_kuid(&init_user_ns, current_uid()));
+#endif
+		if (!is_root() && !is_system_server()) {
+			printk(KERN_ERR "DLP %s: removing knox_dlp not allowed by [%d]\n", __func__, from_kuid(&init_user_ns, current_uid()));
+			return -EPERM;
+		}
+	}
+#endif
+
 	mutex_lock(&lower_dentry->d_inode->i_mutex);
 	rc = lower_dentry->d_inode->i_op->removexattr(lower_dentry, name);
 	mutex_unlock(&lower_dentry->d_inode->i_mutex);
