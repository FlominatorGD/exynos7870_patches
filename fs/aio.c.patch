diff --git a/fs/aio.c b/fs/aio.c
index 5cc46e764046..edf4d0b45534 100644
--- a/fs/aio.c
+++ b/fs/aio.c
@@ -175,6 +175,10 @@ static struct backing_dev_info aio_fs_backing_dev_info = {
 	.capabilities   = BDI_CAP_NO_ACCT_AND_WRITEBACK | BDI_CAP_MAP_COPY,
 };
 
+#ifdef CONFIG_RKP_NS_PROT
+extern void rkp_set_mnt_flags(struct vfsmount *mnt, int flags);
+#endif
+
 static struct file *aio_private_file(struct kioctx *ctx, loff_t nr_pages)
 {
 	struct qstr this = QSTR_INIT("[aio]", 5);
@@ -231,7 +235,11 @@ static int __init aio_setup(void)
 	if (IS_ERR(aio_mnt))
 		panic("Failed to create aio fs mount.");
 	aio_mnt->mnt_flags |= MNT_NOEXEC;
-
+#ifdef CONFIG_RKP_NS_PROT
+	rkp_set_mnt_flags(aio_mnt, MNT_NOEXEC);
+#else
+	aio_mnt->mnt_flags |= MNT_NOEXEC;
+#endif
 	if (bdi_init(&aio_fs_backing_dev_info))
 		panic("Failed to init aio fs backing dev info.");
 
@@ -1370,11 +1378,16 @@ static ssize_t aio_setup_single_vector(struct kiocb *kiocb,
 				       unsigned long *nr_segs,
 				       struct iovec *iovec)
 {
-	if (unlikely(!access_ok(!rw, buf, kiocb->ki_nbytes)))
+	size_t len = kiocb->ki_nbytes;
+
+	if (len > MAX_RW_COUNT)
+		len = MAX_RW_COUNT;
+
+	if (unlikely(!access_ok(!rw, buf, len)))
 		return -EFAULT;
 
 	iovec->iov_base = buf;
-	iovec->iov_len = kiocb->ki_nbytes;
+	iovec->iov_len = len;
 	*nr_segs = 1;
 	return 0;
 }
