diff --git a/fs/attr.c b/fs/attr.c
index 11be2265a2d5..02d7032cc9d7 100644
--- a/fs/attr.c
+++ b/fs/attr.c
@@ -15,6 +15,7 @@
 #include <linux/security.h>
 #include <linux/evm.h>
 #include <linux/ima.h>
+#include <linux/task_integrity.h>
 
 /**
  * inode_change_ok - check if attribute changes to an inode are allowed
@@ -187,7 +188,7 @@ EXPORT_SYMBOL(setattr_copy);
  * the file open for write, as there can be no conflicting delegation in
  * that case.
  */
-int notify_change2(struct vfsmount *mnt, struct dentry * dentry, struct iattr * attr, struct inode **delegated_inode)
+int notify_change2(struct vfsmount *mnt, struct dentry *dentry, struct iattr *attr, struct inode **delegated_inode)
 {
 	struct inode *inode = dentry->d_inode;
 	umode_t mode = inode->i_mode;
@@ -286,6 +287,7 @@ int notify_change2(struct vfsmount *mnt, struct dentry * dentry, struct iattr *
 
 	if (!error) {
 		fsnotify_change(dentry, ia_valid);
+		five_inode_post_setattr(current, dentry);
 		ima_inode_post_setattr(dentry);
 		evm_inode_post_setattr(dentry, ia_valid);
 	}
@@ -294,7 +296,7 @@ int notify_change2(struct vfsmount *mnt, struct dentry * dentry, struct iattr *
 }
 EXPORT_SYMBOL(notify_change2);
 
-int notify_change(struct dentry * dentry, struct iattr * attr, struct inode **delegated_inode)
+int notify_change(struct dentry *dentry, struct iattr *attr, struct inode **delegated_inode)
 {
 	return notify_change2(NULL, dentry, attr, delegated_inode);
 }
