diff --git a/sound/usb/mixer.c b/sound/usb/mixer.c
index e16eceb7e598..dac725d30cad 100644
--- a/sound/usb/mixer.c
+++ b/sound/usb/mixer.c
@@ -81,7 +81,6 @@ struct mixer_build {
 	unsigned char *buffer;
 	unsigned int buflen;
 	DECLARE_BITMAP(unitbitmap, MAX_ID_ELEMS);
-	DECLARE_BITMAP(termbitmap, MAX_ID_ELEMS);
 	struct usb_audio_term oterm;
 	const struct usbmix_name_map *map;
 	const struct usbmix_selector_map *selector_map;
@@ -696,24 +695,15 @@ static int get_term_name(struct mixer_build *state, struct usb_audio_term *iterm
  * parse the source unit recursively until it reaches to a terminal
  * or a branched unit.
  */
-static int __check_input_term(struct mixer_build *state, int id,
+static int check_input_term(struct mixer_build *state, int id,
 			    struct usb_audio_term *term)
 {
 	int err;
 	void *p1;
-	unsigned char *hdr;
 
 	memset(term, 0, sizeof(*term));
-	for (;;) {
-		/* a loop in the terminal chain? */
-		if (test_and_set_bit(id, state->termbitmap))
-			return -EINVAL;
-
-		p1 = find_audio_control_unit(state, id);
-		if (!p1)
-			break;
-
-		hdr = p1;
+	while ((p1 = find_audio_control_unit(state, id)) != NULL) {
+		unsigned char *hdr = p1;
 		term->id = id;
 		switch (hdr[2]) {
 		case UAC_INPUT_TERMINAL:
@@ -731,7 +721,7 @@ static int __check_input_term(struct mixer_build *state, int id,
 				term->name = d->iTerminal;
 
 				/* call recursively to get the clock selectors */
-				err = __check_input_term(state, d->bCSourceID, term);
+				err = check_input_term(state, d->bCSourceID, term);
 				if (err < 0)
 					return err;
 			}
@@ -754,7 +744,7 @@ static int __check_input_term(struct mixer_build *state, int id,
 		case UAC2_CLOCK_SELECTOR: {
 			struct uac_selector_unit_descriptor *d = p1;
 			/* call recursively to retrieve the channel info */
-			err = __check_input_term(state, d->baSourceID[0], term);
+			err = check_input_term(state, d->baSourceID[0], term);
 			if (err < 0)
 				return err;
 			term->type = d->bDescriptorSubtype << 16; /* virtual type */
@@ -801,15 +791,6 @@ static int __check_input_term(struct mixer_build *state, int id,
 	return -ENODEV;
 }
 
-
-static int check_input_term(struct mixer_build *state, int id,
-			    struct usb_audio_term *term)
-{
-	memset(term, 0, sizeof(*term));
-	memset(state->termbitmap, 0, sizeof(state->termbitmap));
-	return __check_input_term(state, id, term);
-}
-
 /*
  * Feature Unit
  */
@@ -1632,7 +1613,6 @@ static int parse_audio_mixer_unit(struct mixer_build *state, int unitid,
 	int pin, ich, err;
 
 	if (desc->bLength < 11 || !(input_pins = desc->bNrInPins) ||
-	    desc->bLength < sizeof(*desc) + desc->bNrInPins ||
 	    !(num_outs = uac_mixer_unit_bNrChannels(desc))) {
 		usb_audio_err(state->chip,
 			      "invalid MIXER UNIT descriptor %d\n",
