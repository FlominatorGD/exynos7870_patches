diff --git a/sound/soc/soc-compress.c b/sound/soc/soc-compress.c
index 745ad2146404..e53049438cbb 100644
--- a/sound/soc/soc-compress.c
+++ b/sound/soc/soc-compress.c
@@ -210,6 +210,11 @@ static int soc_compr_free(struct snd_compr_stream *cstream)
 		platform->driver->compr_ops->free(cstream);
 
 	if (cstream->direction == SND_COMPRESS_PLAYBACK) {
+#ifdef CONFIG_SND_SAMSUNG_SEIREN_OFFLOAD
+		if (codec_dai->playback_active)
+			goto out;
+#endif
+
 		if (snd_soc_runtime_ignore_pmdown_time(rtd)) {
 			snd_soc_dapm_stream_event(rtd,
 					SNDRV_PCM_STREAM_PLAYBACK,
@@ -221,12 +226,20 @@ static int soc_compr_free(struct snd_compr_stream *cstream)
 					   msecs_to_jiffies(rtd->pmdown_time));
 		}
 	} else {
+#ifdef CONFIG_SND_SAMSUNG_SEIREN_OFFLOAD
+		if (codec_dai->capture_active)
+			goto out;
+#endif
+
 		/* capture streams can be powered down now */
 		snd_soc_dapm_stream_event(rtd,
 			SNDRV_PCM_STREAM_CAPTURE,
 			SND_SOC_DAPM_STREAM_STOP);
 	}
 
+#ifdef CONFIG_SND_SAMSUNG_SEIREN_OFFLOAD
+out:
+#endif
 	mutex_unlock(&rtd->pcm_mutex);
 	return 0;
 }
@@ -289,6 +302,19 @@ static int soc_compr_trigger(struct snd_compr_stream *cstream, int cmd)
 	struct snd_soc_dai *codec_dai = rtd->codec_dai;
 	int ret = 0;
 
+#ifdef CONFIG_SND_SAMSUNG_SEIREN_OFFLOAD
+	/* for partial drain and drain cmd, don't acquire lock while invoking FW.
+	 * These calls will be blocked till these operation can complete which
+	 * will be a while. And during that time, app can invoke STOP, PAUSE etc
+	 */
+	if (cmd == SND_COMPR_TRIGGER_PARTIAL_DRAIN ||
+				cmd == SND_COMPR_TRIGGER_DRAIN) {
+		if (platform->driver->compr_ops &&
+					platform->driver->compr_ops->trigger)
+			return platform->driver->compr_ops->trigger(cstream, cmd);
+	}
+#endif
+
 	mutex_lock_nested(&rtd->pcm_mutex, rtd->pcm_subclass);
 
 	if (platform->driver->compr_ops && platform->driver->compr_ops->trigger) {
