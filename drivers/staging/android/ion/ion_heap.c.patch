diff --git a/drivers/staging/android/ion/ion_heap.c b/drivers/staging/android/ion/ion_heap.c
index aac35a8eebc8..2f4038f2648f 100644
--- a/drivers/staging/android/ion/ion_heap.c
+++ b/drivers/staging/android/ion/ion_heap.c
@@ -22,6 +22,7 @@
 #include <linux/sched.h>
 #include <linux/scatterlist.h>
 #include <linux/vmalloc.h>
+#include <linux/highmem.h>
 #include "ion.h"
 #include "ion_priv.h"
 
@@ -132,8 +133,23 @@ static int ion_heap_sglist_zero(struct scatterlist *sgl, unsigned int nents,
 			p = 0;
 		}
 	}
-	if (p)
-		ret = ion_heap_clear_pages(pages, p, pgprot);
+
+	while (p-- > 0) {
+		void *va = kmap(pages[p]);
+
+		/* skip clear if kmap failed because this is not a core job */
+		if (!va)
+			break;
+		clear_page(va);
+#ifdef CONFIG_ARM64
+		if (pgprot == pgprot_writecombine(PAGE_KERNEL))
+			__flush_dcache_area(va, PAGE_SIZE);
+#else
+		if (pgprot == pgprot_writecombine(PAGE_KERNEL))
+			dmac_flush_range(va, va + PAGE_SIZE);
+#endif
+		kunmap(pages[p]);
+	}
 
 	return ret;
 }
@@ -142,13 +158,20 @@ int ion_heap_buffer_zero(struct ion_buffer *buffer)
 {
 	struct sg_table *table = buffer->sg_table;
 	pgprot_t pgprot;
+	int ret;
+
+	ION_EVENT_BEGIN();
 
 	if (buffer->flags & ION_FLAG_CACHED)
 		pgprot = PAGE_KERNEL;
 	else
 		pgprot = pgprot_writecombine(PAGE_KERNEL);
 
-	return ion_heap_sglist_zero(table->sgl, table->nents, pgprot);
+	ret = ion_heap_sglist_zero(table->sgl, table->nents, pgprot);
+
+	ION_EVENT_CLEAR(buffer, ION_EVENT_DONE());
+
+	return ret;
 }
 
 int ion_heap_pages_zero(struct page *page, size_t size, pgprot_t pgprot)
@@ -305,6 +328,8 @@ static unsigned long ion_heap_shrink_scan(struct shrinker *shrinker,
 
 	if (heap->ops->shrink)
 		freed += heap->ops->shrink(heap, sc->gfp_mask, to_scan);
+		
+	trace_ion_shrink(sc->nr_to_scan, freed);
 	return freed;
 }
 
