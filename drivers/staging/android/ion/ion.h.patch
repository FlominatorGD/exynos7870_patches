diff --git a/drivers/staging/android/ion/ion.h b/drivers/staging/android/ion/ion.h
index 443db8459a9e..19f35a5d19d2 100644
--- a/drivers/staging/android/ion/ion.h
+++ b/drivers/staging/android/ion/ion.h
@@ -19,7 +19,7 @@
 
 #include <linux/types.h>
 
-#include "../uapi/ion.h"
+#include <uapi/linux/ion.h>
 
 struct ion_handle;
 struct ion_device;
@@ -200,4 +200,27 @@ int ion_share_dma_buf_fd(struct ion_client *client, struct ion_handle *handle);
  */
 struct ion_handle *ion_import_dma_buf(struct ion_client *client, int fd);
 
+/**
+ * ion_cached_needsync_dmabuf() - check if a dmabuf is cacheable
+ * @dmabuf: a pointer to dma_buf
+ *
+ * Given a dma-buf that is exported by ION, check if the buffer is allocated
+ * with ION_FLAG_CACHED and ION_FLAG_CACHED_NEED_SYNC. If the flags are set
+ * the function returns 1. If it is unset, 0. If the given dmabuf is not
+ * exported by ION, -error is returned.
+ */
+int ion_cached_needsync_dmabuf(struct dma_buf *dmabuf);
+
+#include <linux/dma-direction.h>
+#include <linux/dma-buf.h>
+
+dma_addr_t ion_iovmm_map(struct dma_buf_attachment *attachment,
+			 off_t offset, size_t size,
+			 enum dma_data_direction direction,
+			 int iommu_prot);
+void ion_iovmm_unmap(struct dma_buf_attachment *attachment, dma_addr_t iova);
+int ion_secure_protect(struct ion_buffer *buffer);
+int ion_secure_unprotect(struct ion_buffer *buffer);
+bool ion_is_heap_available(struct ion_heap *heap, unsigned long flags, void *data);
+
 #endif /* _LINUX_ION_H */
