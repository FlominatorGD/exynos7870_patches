diff --git a/drivers/usb/host/xhci-mem.c b/drivers/usb/host/xhci-mem.c
index 8baab654015b..e4b6c3c994ab 100644
--- a/drivers/usb/host/xhci-mem.c
+++ b/drivers/usb/host/xhci-mem.c
@@ -1843,7 +1843,11 @@ void xhci_mem_cleanup(struct xhci_hcd *xhci)
 	int size;
 	int i, j, num_ports;
 
+#if defined(CONFIG_USB_HOST_SAMSUNG_FEATURE)
 	cancel_delayed_work_sync(&xhci->cmd_timer);
+#else
+	del_timer_sync(&xhci->cmd_timer);
+#endif
 
 	/* Free the Event Ring Segment Table and the actual Event Ring */
 	size = sizeof(struct xhci_erst_entry)*(xhci->erst.num_entries);
@@ -2322,6 +2326,13 @@ static int xhci_setup_port_arrays(struct xhci_hcd *xhci, gfp_t flags)
 		if (!xhci->usb2_ports)
 			return -ENOMEM;
 
+#ifdef CONFIG_HOST_COMPLIANT_TEST
+		xhci->usb2_portpmsc = kmalloc(sizeof(*xhci->usb2_portpmsc)*
+				xhci->num_usb2_ports, flags);
+		if (!xhci->usb2_portpmsc)
+			return -ENOMEM;
+#endif
+
 		port_index = 0;
 		for (i = 0; i < num_ports; i++) {
 			if (xhci->port_array[i] == 0x03 ||
@@ -2336,6 +2347,14 @@ static int xhci_setup_port_arrays(struct xhci_hcd *xhci, gfp_t flags)
 					"USB 2.0 port at index %u, "
 					"addr = %p", i,
 					xhci->usb2_ports[port_index]);
+#ifdef CONFIG_HOST_COMPLIANT_TEST
+			xhci->usb2_portpmsc[port_index] =
+				&xhci->op_regs->port_power_base +
+				NUM_PORT_REGS*i;
+			xhci_dbg(xhci, "USB 2.0 port pmsc at index %u, "
+					"addr = %p\n", i,
+					xhci->usb2_portpmsc[port_index]);
+#endif
 			port_index++;
 			if (port_index == xhci->num_usb2_ports)
 				break;
@@ -2347,6 +2366,13 @@ static int xhci_setup_port_arrays(struct xhci_hcd *xhci, gfp_t flags)
 		if (!xhci->usb3_ports)
 			return -ENOMEM;
 
+#ifdef CONFIG_HOST_COMPLIANT_TEST
+		xhci->usb3_portpmsc = kmalloc(sizeof(*xhci->usb3_portpmsc)*
+				xhci->num_usb3_ports, flags);
+		if (!xhci->usb3_portpmsc)
+			return -ENOMEM;
+#endif
+
 		port_index = 0;
 		for (i = 0; i < num_ports; i++)
 			if (xhci->port_array[i] == 0x03) {
@@ -2357,6 +2383,15 @@ static int xhci_setup_port_arrays(struct xhci_hcd *xhci, gfp_t flags)
 						"USB 3.0 port at index %u, "
 						"addr = %p", i,
 						xhci->usb3_ports[port_index]);
+#ifdef CONFIG_HOST_COMPLIANT_TEST
+				xhci->usb3_portpmsc[port_index] =
+					&xhci->op_regs->port_power_base +
+					NUM_PORT_REGS*i;
+				xhci_dbg(xhci, "USB 3.0 port pmsc at index %u, "
+						"addr = %p\n", i,
+						xhci->usb3_portpmsc[port_index]);
+#endif
+
 				port_index++;
 				if (port_index == xhci->num_usb3_ports)
 					break;
@@ -2376,11 +2411,14 @@ int xhci_mem_init(struct xhci_hcd *xhci, gfp_t flags)
 	int i;
 
 	INIT_LIST_HEAD(&xhci->cmd_list);
-
-	/* init command timeout work */
+#if defined(CONFIG_USB_HOST_SAMSUNG_FEATURE)
 	INIT_DELAYED_WORK(&xhci->cmd_timer, xhci_handle_command_timeout);
 	init_completion(&xhci->cmd_ring_stop_completion);
-
+#else
+	/* init command timeout timer */
+	setup_timer(&xhci->cmd_timer, xhci_handle_command_timeout,
+		    (unsigned long)xhci);
+#endif
 	page_size = readl(&xhci->op_regs->page_size);
 	xhci_dbg_trace(xhci, trace_xhci_dbg_init,
 			"Supported page size register = 0x%x", page_size);
@@ -2564,7 +2602,12 @@ int xhci_mem_init(struct xhci_hcd *xhci, gfp_t flags)
 	xhci_dbg_trace(xhci, trace_xhci_dbg_init,
 			"Wrote ERST address to ir_set 0.");
 	xhci_print_ir_set(xhci, 0);
-
+#if !defined(CONFIG_USB_HOST_SAMSUNG_FEATURE)
+	/* init command timeout timer */
+	init_timer(&xhci->cmd_timer);
+	xhci->cmd_timer.data = (unsigned long) xhci;
+	xhci->cmd_timer.function = xhci_handle_command_timeout;
+#endif
 	/*
 	 * XXX: Might need to set the Interrupter Moderation Register to
 	 * something other than the default (~1ms minimum between interrupts).
