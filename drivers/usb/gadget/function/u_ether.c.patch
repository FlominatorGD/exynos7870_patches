diff --git a/drivers/usb/gadget/function/u_ether.c b/drivers/usb/gadget/function/u_ether.c
index e4ada9d4bf31..ae102e9a0a67 100644
--- a/drivers/usb/gadget/function/u_ether.c
+++ b/drivers/usb/gadget/function/u_ether.c
@@ -48,8 +48,6 @@
 
 #define UETH__VERSION	"29-May-2008"
 
-static struct workqueue_struct	*uether_wq;
-
 struct eth_dev {
 	/* lock is held while accessing port_usb
 	 */
@@ -62,33 +60,37 @@ struct eth_dev {
 	spinlock_t		req_lock;	/* guard {rx,tx}_reqs */
 	struct list_head	tx_reqs, rx_reqs;
 	unsigned		tx_qlen;
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
 /* Minimum number of TX USB request queued to UDC */
 #define TX_REQ_THRESHOLD	5
 	int			no_tx_req_used;
 	int			tx_skb_hold_count;
-	u32			tx_req_bufsize;
+	size_t			tx_req_bufsize;	/* prevent CID 103507 */
+#endif
 
 	struct sk_buff_head	rx_frames;
 
-	unsigned		qmult;
-
 	unsigned		header_len;
-	unsigned		ul_max_pkts_per_xfer;
-	unsigned		dl_max_pkts_per_xfer;
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
+	unsigned int		ul_max_pkts_per_xfer;
+	unsigned int		dl_max_pkts_per_xfer;
+#endif
 	struct sk_buff		*(*wrap)(struct gether *, struct sk_buff *skb);
 	int			(*unwrap)(struct gether *,
 						struct sk_buff *skb,
 						struct sk_buff_head *list);
 
 	struct work_struct	work;
-	struct work_struct	rx_work;
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
+	struct tasklet_struct	rx_tsk;
+#endif
 
 	unsigned long		todo;
 #define	WORK_RX_MEMORY		0
 
 	bool			zlp;
 	u8			host_mac[ETH_ALEN];
-	u8			dev_mac[ETH_ALEN];
+	int 			no_of_zlp;
 };
 
 /*-------------------------------------------------------------------------*/
@@ -97,8 +99,16 @@ struct eth_dev {
 
 #define DEFAULT_QLEN	2	/* double buffering by default */
 
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
+static unsigned qmult = 10;
+#else
+static unsigned qmult = 5;
+#endif
+module_param(qmult, uint, S_IRUGO|S_IWUSR);
+MODULE_PARM_DESC(qmult, "queue length multiplier at high/super speed");
+
 /* for dual-speed hardware, use deeper queues at high/super speed */
-static inline int qlen(struct usb_gadget *gadget, unsigned qmult)
+static inline int qlen(struct usb_gadget *gadget)
 {
 	if (gadget_is_dualspeed(gadget) && (gadget->speed == USB_SPEED_HIGH ||
 					    gadget->speed == USB_SPEED_SUPER))
@@ -113,6 +123,8 @@ static inline int qlen(struct usb_gadget *gadget, unsigned qmult)
  * of debug calls ...
  */
 
+#if 0
+
 #undef DBG
 #undef VDBG
 #undef ERROR
@@ -142,6 +154,8 @@ static inline int qlen(struct usb_gadget *gadget, unsigned qmult)
 #define INFO(dev, fmt, args...) \
 	xprintk(dev , KERN_INFO , fmt , ## args)
 
+#endif
+
 /*-------------------------------------------------------------------------*/
 
 /* NETWORK DRIVER HOOKUP (to the layer above this driver) */
@@ -198,6 +212,12 @@ static void defer_kevent(struct eth_dev *dev, int flag)
 
 static void rx_complete(struct usb_ep *ep, struct usb_request *req);
 
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
+static inline void schedule_uether_rx(struct eth_dev *dev)
+{
+	tasklet_schedule(&dev->rx_tsk);
+}
+#endif
 static int
 rx_submit(struct eth_dev *dev, struct usb_request *req, gfp_t gfp_flags)
 {
@@ -212,12 +232,11 @@ rx_submit(struct eth_dev *dev, struct usb_request *req, gfp_t gfp_flags)
 		out = dev->port_usb->out_ep;
 	else
 		out = NULL;
+	spin_unlock_irqrestore(&dev->lock, flags);
 
 	if (!out)
-	{
-		spin_unlock_irqrestore(&dev->lock, flags);
 		return -ENOTCONN;
-	}
+
 
 	/* Padding up to RX_EXTRA handles minor disagreements with host.
 	 * Normally we use the USB "terminate on short read" convention;
@@ -236,14 +255,15 @@ rx_submit(struct eth_dev *dev, struct usb_request *req, gfp_t gfp_flags)
 	size += out->maxpacket - 1;
 	size -= size % out->maxpacket;
 
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
 	if (dev->ul_max_pkts_per_xfer)
 		size *= dev->ul_max_pkts_per_xfer;
+#endif
 
 	if (dev->port_usb->is_fixed)
 		size = max_t(size_t, size, dev->port_usb->fixed_out_len);
-	spin_unlock_irqrestore(&dev->lock, flags);
 
-	DBG(dev, "%s: size: %zd\n", __func__, size);
+	pr_debug("%s: size: %lu", __func__, size);
 	skb = alloc_skb(size + NET_IP_ALIGN, gfp_flags);
 	if (skb == NULL) {
 		DBG(dev, "no rx skb\n");
@@ -269,16 +289,25 @@ enomem:
 		DBG(dev, "rx submit --> %d\n", retval);
 		if (skb)
 			dev_kfree_skb_any(skb);
+#ifndef CONFIG_USB_RNDIS_MULTIPACKET
+		spin_lock_irqsave(&dev->req_lock, flags);
+		list_add(&req->list, &dev->rx_reqs);
+		spin_unlock_irqrestore(&dev->req_lock, flags);
+#endif
 	}
 	return retval;
 }
 
 static void rx_complete(struct usb_ep *ep, struct usb_request *req)
 {
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
 	struct sk_buff	*skb = req->context;
+	bool		queue = 0;
+#else
+	struct sk_buff *skb = req->context, *skb2;
+#endif
 	struct eth_dev	*dev = ep->driver_data;
 	int		status = req->status;
-	bool		queue = 0;
 
 	switch (status) {
 
@@ -288,16 +317,17 @@ static void rx_complete(struct usb_ep *ep, struct usb_request *req)
 
 		if (dev->unwrap) {
 			unsigned long	flags;
-
 			spin_lock_irqsave(&dev->lock, flags);
 			if (dev->port_usb) {
 				status = dev->unwrap(dev->port_usb,
 							skb,
 							&dev->rx_frames);
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
 				if (status == -EINVAL)
 					dev->net->stats.rx_errors++;
 				else if (status == -EOVERFLOW)
 					dev->net->stats.rx_over_errors++;
+#endif
 			} else {
 				dev_kfree_skb_any(skb);
 				status = -ENOTCONN;
@@ -307,8 +337,53 @@ static void rx_complete(struct usb_ep *ep, struct usb_request *req)
 			skb_queue_tail(&dev->rx_frames, skb);
 		}
 
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
 		if (!status)
 			queue = 1;
+#else
+		skb = NULL;
+
+		skb2 = skb_dequeue(&dev->rx_frames);
+		while (skb2) {
+			if (status < 0
+					|| ETH_HLEN > skb2->len
+					|| skb2->len > VLAN_ETH_FRAME_LEN) {
+#ifdef CONFIG_USB_NCM_SUPPORT_MTU_CHANGE
+				/*
+					Need to revisit net->mtu  does not include header size incase of changed MTU
+				*/
+				if(!strcmp(dev->port_usb->func.name,"ncm")) {
+					if (status < 0
+						|| ETH_HLEN > skb2->len
+						|| skb2->len > (dev->net->mtu + ETH_HLEN)) {
+						printk(KERN_ERR "usb: %s  dropped incase of NCM rx length %d\n",__func__,skb2->len);
+					} else {
+						goto process_frame;
+					}
+				}
+				printk(KERN_ERR "usb: %s Drop rx length %d\n",__func__,skb2->len);
+#endif
+				dev->net->stats.rx_errors++;
+				dev->net->stats.rx_length_errors++;
+				DBG(dev, "rx length %d\n", skb2->len);
+				dev_kfree_skb_any(skb2);
+				goto next_frame;
+			}
+#ifdef CONFIG_USB_NCM_SUPPORT_MTU_CHANGE
+process_frame:
+#endif
+			skb2->protocol = eth_type_trans(skb2, dev->net);
+			dev->net->stats.rx_packets++;
+			dev->net->stats.rx_bytes += skb2->len;
+
+			/* no buffer copies needed, unless hardware can't
+			 * use skb buffers.
+			 */
+			status = netif_rx(skb2);
+next_frame:
+			skb2 = skb_dequeue(&dev->rx_frames);
+		}
+#endif
 		break;
 
 	/* software-driven interface shutdown */
@@ -331,20 +406,34 @@ quiesce:
 		/* FALLTHROUGH */
 
 	default:
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
 		queue = 1;
 		dev_kfree_skb_any(skb);
+#endif
 		dev->net->stats.rx_errors++;
 		DBG(dev, "rx status %d\n", status);
 		break;
 	}
 
+#ifndef CONFIG_USB_RNDIS_MULTIPACKET
+	if (skb)
+		dev_kfree_skb_any(skb);
+	if (!netif_running(dev->net)) {
+#endif
 clean:
 	spin_lock(&dev->req_lock);
 	list_add(&req->list, &dev->rx_reqs);
 	spin_unlock(&dev->req_lock);
 
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
 	if (queue)
-		queue_work(uether_wq, &dev->rx_work);
+		schedule_uether_rx(dev);
+#else
+		req = NULL;
+	}
+	if (req)
+		rx_submit(dev, req, GFP_ATOMIC);
+#endif
 }
 
 static int prealloc(struct list_head *list, struct usb_ep *ep, unsigned n)
@@ -394,7 +483,12 @@ static int alloc_requests(struct eth_dev *dev, struct gether *link, unsigned n)
 	status = prealloc(&dev->tx_reqs, link->in_ep, n);
 	if (status < 0)
 		goto fail;
-	status = prealloc(&dev->rx_reqs, link->out_ep, n);
+
+	if (link->is_fixed)
+		status = prealloc(&dev->rx_reqs, link->out_ep, n/2);
+	else
+		status = prealloc(&dev->rx_reqs, link->out_ep, n);
+
 	if (status < 0)
 		goto fail;
 	goto done;
@@ -409,24 +503,29 @@ static void rx_fill(struct eth_dev *dev, gfp_t gfp_flags)
 {
 	struct usb_request	*req;
 	unsigned long		flags;
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
 	int			req_cnt = 0;
+#endif
 
 	/* fill unused rxq slots with some skb */
 	spin_lock_irqsave(&dev->req_lock, flags);
 	while (!list_empty(&dev->rx_reqs)) {
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
 		/* break the nexus of continuous completion and re-submission*/
-		if (++req_cnt > qlen(dev->gadget, dev->qmult))
+		if (++req_cnt > qlen(dev->gadget))
 			break;
-
+#endif
 		req = container_of(dev->rx_reqs.next,
 				struct usb_request, list);
 		list_del_init(&req->list);
 		spin_unlock_irqrestore(&dev->req_lock, flags);
 
 		if (rx_submit(dev, req, gfp_flags) < 0) {
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
 			spin_lock_irqsave(&dev->req_lock, flags);
 			list_add(&req->list, &dev->rx_reqs);
 			spin_unlock_irqrestore(&dev->req_lock, flags);
+#endif
 			defer_kevent(dev, WORK_RX_MEMORY);
 			return;
 		}
@@ -436,9 +535,9 @@ static void rx_fill(struct eth_dev *dev, gfp_t gfp_flags)
 	spin_unlock_irqrestore(&dev->req_lock, flags);
 }
 
-static void process_rx_w(struct work_struct *work)
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
+static void process_uether_rx(struct eth_dev *dev)
 {
-	struct eth_dev	*dev = container_of(work, struct eth_dev, rx_work);
 	struct sk_buff	*skb;
 	int		status = 0;
 
@@ -449,22 +548,54 @@ static void process_rx_w(struct work_struct *work)
 		if (status < 0
 				|| ETH_HLEN > skb->len
 				|| skb->len > ETH_FRAME_LEN) {
+#ifdef CONFIG_USB_NCM_SUPPORT_MTU_CHANGE
+		/*
+		  Need to revisit net->mtu	does not include header size incase of changed MTU
+		*/
+			if(!strcmp(dev->port_usb->func.name,"ncm")) {
+				if (status < 0
+					|| ETH_HLEN > skb->len
+					|| skb->len > (dev->net->mtu + ETH_HLEN)) {
+					printk(KERN_ERR "usb: %s  drop incase of NCM rx length %d\n",__func__,skb->len);
+				} else {
+					goto process_frame;
+				}
+			}
+#endif
 			dev->net->stats.rx_errors++;
 			dev->net->stats.rx_length_errors++;
+#ifndef CONFIG_USB_NCM_SUPPORT_MTU_CHANGE
+			DBG(dev, "rx length %d\n", skb->len);
+#else
+			pr_debug("usb: %s Drop rx length %d\n",__func__,skb->len);
+#endif
+
 			DBG(dev, "rx length %d\n", skb->len);
 			dev_kfree_skb_any(skb);
 			continue;
 		}
+#ifdef CONFIG_USB_NCM_SUPPORT_MTU_CHANGE
+process_frame:
+#endif
 		skb->protocol = eth_type_trans(skb, dev->net);
 		dev->net->stats.rx_packets++;
 		dev->net->stats.rx_bytes += skb->len;
 
-		status = netif_rx_ni(skb);
+		if (in_interrupt())
+			status = netif_rx(skb);
+		else
+			status = netif_rx_ni(skb);
 	}
 
 	if (netif_running(dev->net))
-		rx_fill(dev, GFP_KERNEL);
+		rx_fill(dev, GFP_ATOMIC);
 }
+static inline void process_rx_task(unsigned long data)
+{
+	struct eth_dev *dev = (struct eth_dev *)data;
+	process_uether_rx(dev);
+}
+#endif
 
 static void eth_work(struct work_struct *work)
 {
@@ -483,34 +614,66 @@ static void tx_complete(struct usb_ep *ep, struct usb_request *req)
 {
 	struct sk_buff	*skb = req->context;
 	struct eth_dev	*dev = ep->driver_data;
-	struct net_device *net = dev->net;
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
+	struct net_device *net;
 	struct usb_request *new_req;
 	struct usb_ep *in;
 	int length;
 	int retval;
 
+	if (!ep->driver_data) {
+		pr_err("%s: driver_data is null\n", __func__);
+		usb_ep_free_request(ep, req);
+		return;
+	}
+
+	dev = ep->driver_data;
+	net = dev->net;
+
+	if (!dev->port_usb) {
+		pr_err("%s: port_usb is null\n", __func__);
+		usb_ep_free_request(ep, req);
+		return;
+	}
+#endif
+
 	switch (req->status) {
 	default:
 		dev->net->stats.tx_errors++;
 		VDBG(dev, "tx err %d\n", req->status);
+#ifdef CONFIG_USB_NCM_SUPPORT_MTU_CHANGE
+		printk(KERN_ERR"usb:%s tx err %d\n",__func__, req->status);
+#endif
 		/* FALLTHROUGH */
 	case -ECONNRESET:		/* unlink */
 	case -ESHUTDOWN:		/* disconnect etc */
 		break;
 	case 0:
-		if (!req->zero)
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
+		if (req->zero && !dev->zlp)
 			dev->net->stats.tx_bytes += req->length-1;
 		else
 			dev->net->stats.tx_bytes += req->length;
+#else
+		dev->net->stats.tx_bytes += skb->len;
+#endif
 	}
 	dev->net->stats.tx_packets++;
 
 	spin_lock(&dev->req_lock);
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
 	list_add_tail(&req->list, &dev->tx_reqs);
 
 	if (dev->port_usb->multi_pkt_xfer) {
 		dev->no_tx_req_used--;
 		req->length = 0;
+#ifdef CONFIG_USB_NCM_ACCUMULATE_MULTPKT
+		if(dev->port_usb->is_fixed){
+			memset(req->buf + dev->port_usb->ndp0_offset,0x00,dev->port_usb->header_len-dev->port_usb->ndp0_offset);
+			put_unaligned_le16(dev->port_usb->ndp0_defaultBlockLen,req->buf+dev->port_usb->ndp0_blocklengthoffset);
+			req->length = dev->port_usb->header_len;
+		}
+#endif
 		in = dev->port_usb->in_ep;
 
 		if (!list_empty(&dev->tx_reqs)) {
@@ -519,16 +682,29 @@ static void tx_complete(struct usb_ep *ep, struct usb_request *req)
 			list_del(&new_req->list);
 			spin_unlock(&dev->req_lock);
 			if (new_req->length > 0) {
+#ifdef CONFIG_USB_NCM_ACCUMULATE_MULTPKT
+				if(dev->port_usb->is_fixed) {
+					if(new_req->length <= dev->port_usb->header_len){
+						goto backinlist;
+					}
+				}
+#endif
 				length = new_req->length;
 
-				/* NCM requires no zlp if transfer is
-				 * dwNtbInMaxSize */
-				if (dev->port_usb->is_fixed &&
-					length == dev->port_usb->fixed_in_len &&
-					(length % in->maxpacket) == 0)
-					new_req->zero = 0;
-				else
+				new_req->zero =0;
+				if((length % in->maxpacket) == 0) {
 					new_req->zero = 1;
+					dev->no_of_zlp++;
+				}
+				/* NCM requires no zlp if transfer is dwNtbInMaxSize */
+				if (dev->port_usb) {
+					if (dev->port_usb->is_fixed) { 
+						if(length == dev->port_usb->fixed_in_len) {
+							new_req->zero = 0;
+							dev->no_of_zlp--;
+						}
+					}
+				}
 
 				/* use zlp framing on tx for strict CDC-Ether
 				 * conformance, though any robust network rx
@@ -536,16 +712,29 @@ static void tx_complete(struct usb_ep *ep, struct usb_request *req)
 				 * doesn't like to write zlps.
 				 */
 				if (new_req->zero && !dev->zlp &&
-						(length % in->maxpacket) == 0) {
-					new_req->zero = 0;
+					(length % in->maxpacket) == 0) {
 					length++;
 				}
 
 				new_req->length = length;
+				new_req->complete = tx_complete;
+				
 				retval = usb_ep_queue(in, new_req, GFP_ATOMIC);
 				switch (retval) {
 				default:
+					printk(KERN_ERR"usb: dropped tx_complete_newreq(%pK)\n",new_req);
 					DBG(dev, "tx queue err %d\n", retval);
+					new_req->length = 0;
+#ifdef CONFIG_USB_NCM_ACCUMULATE_MULTPKT
+					if(dev->port_usb->is_fixed){
+						memset(new_req->buf + dev->port_usb->ndp0_offset,0x00,dev->port_usb->header_len-dev->port_usb->ndp0_offset);
+						put_unaligned_le16(dev->port_usb->ndp0_defaultBlockLen,new_req->buf+dev->port_usb->ndp0_blocklengthoffset);
+						new_req->length = dev->port_usb->header_len;
+					}
+#endif
+					spin_lock(&dev->req_lock);
+					list_add_tail(&new_req->list, &dev->tx_reqs);
+					spin_unlock(&dev->req_lock);
 					break;
 				case 0:
 					spin_lock(&dev->req_lock);
@@ -554,8 +743,11 @@ static void tx_complete(struct usb_ep *ep, struct usb_request *req)
 					net->trans_start = jiffies;
 				}
 			} else {
+#ifdef CONFIG_USB_NCM_ACCUMULATE_MULTPKT
+backinlist:
+#endif
 				spin_lock(&dev->req_lock);
-				list_add(&new_req->list, &dev->tx_reqs);
+				list_add_tail(&new_req->list, &dev->tx_reqs);
 				spin_unlock(&dev->req_lock);
 			}
 		} else {
@@ -565,7 +757,11 @@ static void tx_complete(struct usb_ep *ep, struct usb_request *req)
 		spin_unlock(&dev->req_lock);
 		dev_kfree_skb_any(skb);
 	}
-
+#else
+	list_add(&req->list, &dev->tx_reqs);
+	spin_unlock(&dev->req_lock);
+	dev_kfree_skb_any(skb);
+#endif
 	if (netif_carrier_ok(dev->net))
 		netif_wake_queue(dev->net);
 }
@@ -575,7 +771,8 @@ static inline int is_promisc(u16 cdc_filter)
 	return cdc_filter & USB_CDC_PACKET_TYPE_PROMISCUOUS;
 }
 
-static void alloc_tx_buffer(struct eth_dev *dev)
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
+static int alloc_tx_buffer(struct eth_dev *dev)
 {
 	struct list_head	*act;
 	struct usb_request	*req;
@@ -586,47 +783,92 @@ static void alloc_tx_buffer(struct eth_dev *dev)
 				/* size of rndis_packet_msg_type */
 				+ 44
 				+ 22));
-
+#ifdef CONFIG_USB_NCM_ACCUMULATE_MULTPKT
+	if(dev->port_usb->is_fixed) {
+		dev->tx_req_bufsize = dev->port_usb->fixed_in_len;
+		DEBUG_NCM("usb: tx_req_bufsize(%ld) \n",dev->tx_req_bufsize);
+	}
+#endif
 	list_for_each(act, &dev->tx_reqs) {
 		req = container_of(act, struct usb_request, list);
 		if (!req->buf)
 			req->buf = kmalloc(dev->tx_req_bufsize,
 						GFP_ATOMIC);
+			if (!req->buf)
+				goto free_buf;
+#ifdef CONFIG_USB_NCM_ACCUMULATE_MULTPKT
+			if(dev->port_usb->is_fixed) {
+				memcpy(req->buf,dev->port_usb->header,dev->port_usb->header_len);
+				req->length = dev->port_usb->header_len;
+				DEBUG_NCM(KERN_ERR"usb: request(%p) req->len(%d) \n",req,req->length);
+			}
+#endif
+	}
+	return 0;
+
+free_buf:
+	/* tx_req_bufsize = 0 retries mem alloc on next eth_start_xmit */
+	dev->tx_req_bufsize = 0;
+	list_for_each(act, &dev->tx_reqs) {
+		req = container_of(act, struct usb_request, list);
+		kfree(req->buf);
+		req->buf = NULL;
 	}
+	return -ENOMEM;
+
 }
+#endif
 
 static netdev_tx_t eth_start_xmit(struct sk_buff *skb,
 					struct net_device *net)
 {
 	struct eth_dev		*dev = netdev_priv(net);
-	int			length = 0;
+	int			length;
 	int			retval;
 	struct usb_request	*req = NULL;
 	unsigned long		flags;
 	struct usb_ep		*in;
 	u16			cdc_filter;
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
+	bool			multi_pkt_xfer = false;
+#endif
+
+	if (!skb) {
+		pr_err("%s: Dropped skb is NULL !!!\n", __func__);
+		return NETDEV_TX_OK;
+	}
+
+	length = skb->len;
 
 	spin_lock_irqsave(&dev->lock, flags);
 	if (dev->port_usb) {
 		in = dev->port_usb->in_ep;
 		cdc_filter = dev->port_usb->cdc_filter;
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
+		multi_pkt_xfer = dev->port_usb->multi_pkt_xfer;
+#endif
 	} else {
 		in = NULL;
 		cdc_filter = 0;
 	}
 	spin_unlock_irqrestore(&dev->lock, flags);
 
-	if (skb && !in) {
+	if (!in) {
 		dev_kfree_skb_any(skb);
 		return NETDEV_TX_OK;
 	}
 
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
 	/* Allocate memory for tx_reqs to support multi packet transfer */
-	if (dev->port_usb->multi_pkt_xfer && !dev->tx_req_bufsize)
-		alloc_tx_buffer(dev);
+	if (multi_pkt_xfer && !dev->tx_req_bufsize) {
+		retval = alloc_tx_buffer(dev);
+		if (retval < 0)
+			return -ENOMEM;
+	}
+#endif
 
 	/* apply outgoing CDC or RNDIS filters */
-	if (skb && !is_promisc(cdc_filter)) {
+	if (!is_promisc(cdc_filter)) {
 		u8		*dest = skb->data;
 
 		if (is_multicast_ether_addr(dest)) {
@@ -662,42 +904,84 @@ static netdev_tx_t eth_start_xmit(struct sk_buff *skb,
 	list_del(&req->list);
 
 	/* temporarily stop TX queue when the freelist empties */
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
+	if (list_empty(&dev->tx_reqs) && (dev->tx_skb_hold_count >= (dev->dl_max_pkts_per_xfer -1)))
+		netif_stop_queue(net);
+#else
 	if (list_empty(&dev->tx_reqs))
 		netif_stop_queue(net);
+#endif
 	spin_unlock_irqrestore(&dev->req_lock, flags);
 
 	/* no buffer copies needed, unless the network stack did it
 	 * or the hardware can't use skb buffers.
 	 * or there's not enough space for extra headers we need
 	 */
+	spin_lock_irqsave(&dev->lock, flags);
 	if (dev->wrap) {
-		unsigned long	flags;
-
-		spin_lock_irqsave(&dev->lock, flags);
 		if (dev->port_usb)
 			skb = dev->wrap(dev->port_usb, skb);
-		spin_unlock_irqrestore(&dev->lock, flags);
 		if (!skb) {
-			/* Multi frame CDC protocols may store the frame for
-			 * later which is not a dropped frame.
-			 */
-			if (dev->port_usb->supports_multi_frame)
-				goto multiframe;
+			spin_unlock_irqrestore(&dev->lock, flags);
 			goto drop;
 		}
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
 	}
 
-	spin_lock_irqsave(&dev->req_lock, flags);
-	dev->tx_skb_hold_count++;
-	spin_unlock_irqrestore(&dev->req_lock, flags);
+	if (multi_pkt_xfer) {
+
+		pr_debug("req->length:%d header_len:%u\n"
+				"skb->len:%d skb->data_len:%d\n",
+				req->length, dev->header_len,
+				skb->len, skb->data_len);
+#ifdef CONFIG_USB_NCM_ACCUMULATE_MULTPKT
+		if(dev->port_usb->is_fixed) {
+			/* Loop to find the free NDP in the request*/
+			u16 i=0;
+			u16 wBlockLength;
+			u16  * dgramoffset =  (u16 *)((u8 *)req->buf + dev->port_usb->ndp0_offset);
+			wBlockLength = get_unaligned_le16((u16 *)((u8 *)req->buf + dev->port_usb->ndp0_blocklengthoffset));
+			while(i <= dev->dl_max_pkts_per_xfer)
+			{
+				if(*dgramoffset == 0x00) {
+					put_unaligned_le16(req->length,dgramoffset++);
+					put_unaligned_le16(skb->len,dgramoffset);
+					wBlockLength +=4;
+					put_unaligned_le16(wBlockLength, (u16 *)((u8 *)req->buf + dev->port_usb->ndp0_blocklengthoffset));
+
+					/*
+					printk(KERN_ERR"usb:dgramoffset(%d),dgramsize(%d),dgramno(%d),blocklength(%d) Final length(%d) \n",
+						req->length,skb->len,i,wBlockLength,req->length + skb->len);
+					*/
+					break;
+				}
+				i++;
+				dgramoffset+=2;
+			}
+			if(i == dev->dl_max_pkts_per_xfer)
+				printk(KERN_ERR"usb: Unhandled case of full NDP in request \n");
 
-	if (dev->port_usb->multi_pkt_xfer) {
+		}
+		else {
+#endif
+		/* Add RNDIS Header */
+		memcpy(req->buf + req->length, dev->port_usb->header,
+						dev->header_len);
+		/* Increment req length by header size */
+		req->length += dev->header_len;
+#ifdef CONFIG_USB_NCM_ACCUMULATE_MULTPKT
+	    }
+#endif
+		spin_unlock_irqrestore(&dev->lock, flags);
+		/* Copy received IP data from SKB */
 		memcpy(req->buf + req->length, skb->data, skb->len);
-		req->length = req->length + skb->len;
+		/* Increment req length by skb data length */
+		req->length += skb->len;
 		length = req->length;
 		dev_kfree_skb_any(skb);
 
 		spin_lock_irqsave(&dev->req_lock, flags);
+		dev->tx_skb_hold_count++;
 		if (dev->tx_skb_hold_count < dev->dl_max_pkts_per_xfer) {
 			if (dev->no_tx_req_used > TX_REQ_THRESHOLD) {
 				list_add(&req->list, &dev->tx_reqs);
@@ -707,41 +991,53 @@ static netdev_tx_t eth_start_xmit(struct sk_buff *skb,
 		}
 
 		dev->no_tx_req_used++;
-		spin_unlock_irqrestore(&dev->req_lock, flags);
-
-		spin_lock_irqsave(&dev->lock, flags);
 		dev->tx_skb_hold_count = 0;
-		spin_unlock_irqrestore(&dev->lock, flags);
+		spin_unlock_irqrestore(&dev->req_lock, flags);
 	} else {
+		spin_unlock_irqrestore(&dev->lock, flags);
 		length = skb->len;
 		req->buf = skb->data;
 		req->context = skb;
 	}
 
+#else
+		length = skb->len;
+	}
+	spin_unlock_irqrestore(&dev->lock, flags);
+	req->buf = skb->data;
+	req->context = skb;
+#endif
 	req->complete = tx_complete;
-
-	/* NCM requires no zlp if transfer is dwNtbInMaxSize */
-	if (dev->port_usb->is_fixed &&
-	    length == dev->port_usb->fixed_in_len &&
-	    (length % in->maxpacket) == 0)
-		req->zero = 0;
-	else
+	
+	req->zero =0;
+	if((length % in->maxpacket) == 0) {
 		req->zero = 1;
+		dev->no_of_zlp++;		
+	}	
+	/* NCM requires no zlp if transfer is dwNtbInMaxSize */
+	if (dev->port_usb) {
+		if (dev->port_usb->is_fixed) { 
+		    if(length == dev->port_usb->fixed_in_len) { 
+				req->zero = 0;
+				dev->no_of_zlp--;
+			}
+		}
+	}
 
 	/* use zlp framing on tx for strict CDC-Ether conformance,
 	 * though any robust network rx path ignores extra padding.
 	 * and some hardware doesn't like to write zlps.
 	 */
-	if (req->zero && !dev->zlp && (length % in->maxpacket) == 0) {
-		req->zero = 0;
+
+	if (req->zero && !dev->zlp && (length % in->maxpacket) == 0)
 		length++;
-	}
 
 	req->length = length;
 
 	retval = usb_ep_queue(in, req, GFP_ATOMIC);
 	switch (retval) {
 	default:
+		printk(KERN_ERR"usb: dropped eo queue error (%d)\n",retval);
 		DBG(dev, "tx queue err %d\n", retval);
 		break;
 	case 0:
@@ -749,18 +1045,41 @@ static netdev_tx_t eth_start_xmit(struct sk_buff *skb,
 	}
 
 	if (retval) {
-		if (!dev->port_usb->multi_pkt_xfer)
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
+		if (!multi_pkt_xfer)
 			dev_kfree_skb_any(skb);
+#ifdef CONFIG_USB_NCM_ACCUMULATE_MULTPKT
+		else {
+			req->length = 0;
+			if(dev->port_usb->is_fixed) {
+				memset(req->buf + dev->port_usb->ndp0_offset,0x00,dev->port_usb->header_len-dev->port_usb->ndp0_offset);
+				put_unaligned_le16(dev->port_usb->ndp0_defaultBlockLen,req->buf+dev->port_usb->ndp0_blocklengthoffset);
+				req->length = dev->port_usb->header_len;
+			}
+		}
+#else
+		else
+			req->length = 0;
+#endif
+#else
+		dev_kfree_skb_any(skb);
+#endif
 drop:
 		dev->net->stats.tx_dropped++;
-multiframe:
+		printk(KERN_ERR"usb: packet dropped(%ld)\n",dev->net->stats.tx_dropped);
 		spin_lock_irqsave(&dev->req_lock, flags);
-		if (list_empty(&dev->tx_reqs))
+		if (dev->port_usb && list_empty(&dev->tx_reqs))
 			netif_start_queue(net);
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
+		list_add_tail(&req->list, &dev->tx_reqs);
+#else
 		list_add(&req->list, &dev->tx_reqs);
+#endif
 		spin_unlock_irqrestore(&dev->req_lock, flags);
 	}
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
 success:
+#endif
 	return NETDEV_TX_OK;
 }
 
@@ -847,7 +1166,15 @@ static int eth_stop(struct net_device *net)
 
 /*-------------------------------------------------------------------------*/
 
-static u8 host_ethaddr[ETH_ALEN];
+/* initial value, changed by "ifconfig usb0 hw ether xx:xx:xx:xx:xx:xx" */
+static char *dev_addr;
+module_param(dev_addr, charp, S_IRUGO);
+MODULE_PARM_DESC(dev_addr, "Device Ethernet Address");
+
+/* this address is invisible to ifconfig */
+static char *host_addr;
+module_param(host_addr, charp, S_IRUGO);
+MODULE_PARM_DESC(host_addr, "Host Ethernet Address");
 
 static int get_ether_addr(const char *str, u8 *dev_addr)
 {
@@ -870,28 +1197,6 @@ static int get_ether_addr(const char *str, u8 *dev_addr)
 	return 1;
 }
 
-static int get_ether_addr_str(u8 dev_addr[ETH_ALEN], char *str, int len)
-{
-	if (len < 18)
-		return -EINVAL;
-
-	snprintf(str, len, "%02x:%02x:%02x:%02x:%02x:%02x",
-		 dev_addr[0], dev_addr[1], dev_addr[2],
-		 dev_addr[3], dev_addr[4], dev_addr[5]);
-	return 18;
-}
-
-static int get_host_ether_addr(u8 *str, u8 *dev_addr)
-{
-	memcpy(dev_addr, str, ETH_ALEN);
-	if (is_valid_ether_addr(dev_addr))
-		return 0;
-
-	random_ether_addr(dev_addr);
-	memcpy(str, dev_addr, ETH_ALEN);
-	return 1;
-}
-
 static const struct net_device_ops eth_netdev_ops = {
 	.ndo_open		= eth_open,
 	.ndo_stop		= eth_stop,
@@ -917,11 +1222,10 @@ static struct device_type gadget_type = {
  * gadget driver using this framework.  The link layer addresses are
  * set up using module parameters.
  *
- * Returns an eth_dev pointer on success, or an ERR_PTR on failure.
+ * Returns negative errno, or zero on success
  */
-struct eth_dev *gether_setup_name(struct usb_gadget *g,
-		const char *dev_addr, const char *host_addr,
-		u8 ethaddr[ETH_ALEN], unsigned qmult, const char *netname)
+struct eth_dev *gether_setup_name(struct usb_gadget *g, u8 ethaddr[ETH_ALEN],
+		const char *netname)
 {
 	struct eth_dev		*dev;
 	struct net_device	*net;
@@ -935,7 +1239,9 @@ struct eth_dev *gether_setup_name(struct usb_gadget *g,
 	spin_lock_init(&dev->lock);
 	spin_lock_init(&dev->req_lock);
 	INIT_WORK(&dev->work, eth_work);
-	INIT_WORK(&dev->rx_work, process_rx_w);
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
+	tasklet_init(&dev->rx_tsk, process_rx_task, (unsigned long)dev);
+#endif
 	INIT_LIST_HEAD(&dev->tx_reqs);
 	INIT_LIST_HEAD(&dev->rx_reqs);
 
@@ -943,21 +1249,23 @@ struct eth_dev *gether_setup_name(struct usb_gadget *g,
 
 	/* network device setup */
 	dev->net = net;
-	dev->qmult = qmult;
 	snprintf(net->name, sizeof(net->name), "%s%%d", netname);
 
 	if (get_ether_addr(dev_addr, net->dev_addr))
 		dev_warn(&g->dev,
 			"using random %s ethernet address\n", "self");
-
-	if (get_host_ether_addr(host_ethaddr, dev->host_mac))
-		dev_warn(&g->dev, "using random %s ethernet address\n", "host");
-	else
-		dev_warn(&g->dev, "using previous %s ethernet address\n", "host");
+#ifdef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
+	memcpy(dev->host_mac, ethaddr, ETH_ALEN);
+	printk(KERN_DEBUG "usb: set unique host mac\n");
+	
+#else
+	if (get_ether_addr(host_addr, dev->host_mac))
+		dev_warn(&g->dev,
+			"using random %s ethernet address\n", "host");
 
 	if (ethaddr)
 		memcpy(ethaddr, dev->host_mac, ETH_ALEN);
-
+#endif
 	net->netdev_ops = &eth_netdev_ops;
 
 	net->ethtool_ops = &ops;
@@ -972,78 +1280,8 @@ struct eth_dev *gether_setup_name(struct usb_gadget *g,
 		free_netdev(net);
 		dev = ERR_PTR(status);
 	} else {
-		INFO(dev, "MAC %pM\n", net->dev_addr);
-		INFO(dev, "HOST MAC %pM\n", dev->host_mac);
-
-		/*
-		 * two kinds of host-initiated state changes:
-		 *  - iff DATA transfer is active, carrier is "on"
-		 *  - tx queueing enabled if open *and* carrier is "on"
-		 */
-		netif_carrier_off(net);
-	}
-
-	return dev;
-}
-EXPORT_SYMBOL_GPL(gether_setup_name);
-
-struct net_device *gether_setup_name_default(const char *netname)
-{
-	struct net_device	*net;
-	struct eth_dev		*dev;
-
-	net = alloc_etherdev(sizeof(*dev));
-	if (!net)
-		return ERR_PTR(-ENOMEM);
-
-	dev = netdev_priv(net);
-	spin_lock_init(&dev->lock);
-	spin_lock_init(&dev->req_lock);
-	INIT_WORK(&dev->work, eth_work);
-	INIT_WORK(&dev->rx_work, process_rx_w);
-	INIT_LIST_HEAD(&dev->tx_reqs);
-	INIT_LIST_HEAD(&dev->rx_reqs);
-
-	skb_queue_head_init(&dev->rx_frames);
-
-	/* network device setup */
-	dev->net = net;
-	dev->qmult = QMULT_DEFAULT;
-	snprintf(net->name, sizeof(net->name), "%s%%d", netname);
-
-	eth_random_addr(dev->dev_mac);
-	pr_warn("using random %s ethernet address\n", "self");
-	if (get_host_ether_addr(host_ethaddr, dev->host_mac))
-		pr_warn("using random %s ethernet address\n", "host");
-        else
-		pr_warn("using previous %s ethernet address\n", "host");
-
-	net->netdev_ops = &eth_netdev_ops;
-
-	net->ethtool_ops = &ops;
-	SET_NETDEV_DEVTYPE(net, &gadget_type);
-
-	return net;
-}
-EXPORT_SYMBOL_GPL(gether_setup_name_default);
-
-int gether_register_netdev(struct net_device *net)
-{
-	struct eth_dev *dev;
-	struct usb_gadget *g;
-	struct sockaddr sa;
-	int status;
-
-	if (!net->dev.parent)
-		return -EINVAL;
-	dev = netdev_priv(net);
-	g = dev->gadget;
-	status = register_netdev(net);
-	if (status < 0) {
-		dev_dbg(&g->dev, "register_netdev failed, %d\n", status);
-		return status;
-	} else {
-		INFO(dev, "HOST MAC %pM\n", dev->host_mac);
+		DBG(dev, "MAC %pM\n", net->dev_addr);
+		DBG(dev, "HOST MAC %pM\n", dev->host_mac);
 
 		/* two kinds of host-initiated state changes:
 		 *  - iff DATA transfer is active, carrier is "on"
@@ -1051,123 +1289,9 @@ int gether_register_netdev(struct net_device *net)
 		 */
 		netif_carrier_off(net);
 	}
-	sa.sa_family = net->type;
-	memcpy(sa.sa_data, dev->dev_mac, ETH_ALEN);
-	rtnl_lock();
-	status = dev_set_mac_address(net, &sa);
-	rtnl_unlock();
-	if (status)
-		pr_warn("cannot set self ethernet address: %d\n", status);
-	else
-		INFO(dev, "MAC %pM\n", dev->dev_mac);
 
-	return status;
-}
-EXPORT_SYMBOL_GPL(gether_register_netdev);
-
-void gether_set_gadget(struct net_device *net, struct usb_gadget *g)
-{
-	struct eth_dev *dev;
-
-	dev = netdev_priv(net);
-	dev->gadget = g;
-	SET_NETDEV_DEV(net, &g->dev);
-}
-EXPORT_SYMBOL_GPL(gether_set_gadget);
-
-int gether_set_dev_addr(struct net_device *net, const char *dev_addr)
-{
-	struct eth_dev *dev;
-	u8 new_addr[ETH_ALEN];
-
-	dev = netdev_priv(net);
-	if (get_ether_addr(dev_addr, new_addr))
-		return -EINVAL;
-	memcpy(dev->dev_mac, new_addr, ETH_ALEN);
-	return 0;
-}
-EXPORT_SYMBOL_GPL(gether_set_dev_addr);
-
-int gether_get_dev_addr(struct net_device *net, char *dev_addr, int len)
-{
-	struct eth_dev *dev;
-
-	dev = netdev_priv(net);
-	return get_ether_addr_str(dev->dev_mac, dev_addr, len);
-}
-EXPORT_SYMBOL_GPL(gether_get_dev_addr);
-
-int gether_set_host_addr(struct net_device *net, const char *host_addr)
-{
-	struct eth_dev *dev;
-	u8 new_addr[ETH_ALEN];
-
-	dev = netdev_priv(net);
-	if (get_ether_addr(host_addr, new_addr))
-		return -EINVAL;
-	memcpy(dev->host_mac, new_addr, ETH_ALEN);
-	return 0;
-}
-EXPORT_SYMBOL_GPL(gether_set_host_addr);
-
-int gether_get_host_addr(struct net_device *net, char *host_addr, int len)
-{
-	struct eth_dev *dev;
-
-	dev = netdev_priv(net);
-	return get_ether_addr_str(dev->host_mac, host_addr, len);
-}
-EXPORT_SYMBOL_GPL(gether_get_host_addr);
-
-int gether_get_host_addr_cdc(struct net_device *net, char *host_addr, int len)
-{
-	struct eth_dev *dev;
-
-	if (len < 13)
-		return -EINVAL;
-
-	dev = netdev_priv(net);
-	snprintf(host_addr, len, "%pm", dev->host_mac);
-
-	return strlen(host_addr);
-}
-EXPORT_SYMBOL_GPL(gether_get_host_addr_cdc);
-
-void gether_get_host_addr_u8(struct net_device *net, u8 host_mac[ETH_ALEN])
-{
-	struct eth_dev *dev;
-
-	dev = netdev_priv(net);
-	memcpy(host_mac, dev->host_mac, ETH_ALEN);
-}
-EXPORT_SYMBOL_GPL(gether_get_host_addr_u8);
-
-void gether_set_qmult(struct net_device *net, unsigned qmult)
-{
-	struct eth_dev *dev;
-
-	dev = netdev_priv(net);
-	dev->qmult = qmult;
-}
-EXPORT_SYMBOL_GPL(gether_set_qmult);
-
-unsigned gether_get_qmult(struct net_device *net)
-{
-	struct eth_dev *dev;
-
-	dev = netdev_priv(net);
-	return dev->qmult;
-}
-EXPORT_SYMBOL_GPL(gether_get_qmult);
-
-int gether_get_ifname(struct net_device *net, char *name, int len)
-{
-	rtnl_lock();
-	strlcpy(name, netdev_name(net), len);
-	rtnl_unlock();
-	return strlen(name);
+	return dev;
 }
-EXPORT_SYMBOL_GPL(gether_get_ifname);
 
 /**
  * gether_cleanup - remove Ethernet-over-USB device
@@ -1180,11 +1304,13 @@ void gether_cleanup(struct eth_dev *dev)
 	if (!dev)
 		return;
 
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
+	tasklet_kill(&dev->rx_tsk);
+#endif
 	unregister_netdev(dev->net);
 	flush_work(&dev->work);
 	free_netdev(dev->net);
 }
-EXPORT_SYMBOL_GPL(gether_cleanup);
 
 /**
  * gether_connect - notify network layer that USB link is active
@@ -1210,6 +1336,22 @@ struct net_device *gether_connect(struct gether *link)
 	if (!dev)
 		return ERR_PTR(-EINVAL);
 
+#ifdef CONFIG_USB_NCM_ACCUMULATE_MULTPKT
+    if(link->is_fixed) {
+               link->header = kzalloc(link->header_len,GFP_ATOMIC);
+               DEBUG_NCM("usb: %s  link->header(%p), link->header_len(%d)\n", __func__,link->header,link->header_len);
+           } else
+#endif
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
+	link->header = kzalloc(sizeof(struct rndis_packet_msg_type),
+							GFP_ATOMIC);
+	if (!link->header) {
+		pr_err("RNDIS header memory allocation failed.\n");
+		result = -ENOMEM;
+		goto fail;
+	}
+#endif
+
 	link->in_ep->driver_data = dev;
 	result = usb_ep_enable(link->in_ep);
 	if (result != 0) {
@@ -1227,16 +1369,16 @@ struct net_device *gether_connect(struct gether *link)
 	}
 
 	if (result == 0)
-		result = alloc_requests(dev, link, qlen(dev->gadget,
-					dev->qmult));
+		result = alloc_requests(dev, link, qlen(dev->gadget));
 
 	if (result == 0) {
 		dev->zlp = link->is_zlp_ok;
-		DBG(dev, "qlen %d\n", qlen(dev->gadget, dev->qmult));
+		DBG(dev, "qlen %d\n", qlen(dev->gadget));
 
 		dev->header_len = link->header_len;
 		dev->unwrap = link->unwrap;
 		dev->wrap = link->wrap;
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
 		dev->ul_max_pkts_per_xfer = link->ul_max_pkts_per_xfer;
 		dev->dl_max_pkts_per_xfer = link->dl_max_pkts_per_xfer;
 
@@ -1244,7 +1386,13 @@ struct net_device *gether_connect(struct gether *link)
 		dev->tx_skb_hold_count = 0;
 		dev->no_tx_req_used = 0;
 		dev->tx_req_bufsize = 0;
+		dev->no_of_zlp=0;
+		dev->port_usb = link;
+		link->ioport = dev;
+#else
+		spin_lock(&dev->lock);
 		dev->port_usb = link;
+#endif
 		if (netif_running(dev->net)) {
 			if (link->open)
 				link->open(link);
@@ -1266,11 +1414,15 @@ fail1:
 	}
 fail0:
 	/* caller is responsible for cleanup on error */
-	if (result < 0)
+	if (result < 0) {
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
+	kfree(link->header);
+fail:
+#endif
 		return ERR_PTR(result);
+	}
 	return dev->net;
 }
-EXPORT_SYMBOL_GPL(gether_connect);
 
 /**
  * gether_disconnect - notify network layer that USB link is inactive
@@ -1288,7 +1440,9 @@ void gether_disconnect(struct gether *link)
 {
 	struct eth_dev		*dev = link->ioport;
 	struct usb_request	*req;
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
 	struct sk_buff		*skb;
+#endif
 
 	WARN_ON(!dev);
 	if (!dev)
@@ -1298,7 +1452,7 @@ void gether_disconnect(struct gether *link)
 
 	netif_stop_queue(dev->net);
 	netif_carrier_off(dev->net);
-
+	printk(KERN_ERR"usb: %s No of ZLPS (%d)\n",__func__,dev->no_of_zlp);
 	/* disable endpoints, forcing (synchronous) completion
 	 * of all pending i/o.  then free the request objects
 	 * and forget about the endpoints.
@@ -1311,12 +1465,30 @@ void gether_disconnect(struct gether *link)
 		list_del(&req->list);
 
 		spin_unlock(&dev->req_lock);
-		if (link->multi_pkt_xfer)
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
+		if (link->multi_pkt_xfer) {
 			kfree(req->buf);
+			req->buf = NULL;
+		}
+#endif
 		usb_ep_free_request(link->in_ep, req);
 		spin_lock(&dev->req_lock);
 	}
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
+	/* Free rndis header buffer memory */
+	kfree(link->header);
+	link->header = NULL;
+#endif
+
 	spin_unlock(&dev->req_lock);
+#ifdef CONFIG_USB_RNDIS_MULTIPACKET
+	spin_lock(&dev->rx_frames.lock);
+	while ((skb = __skb_dequeue(&dev->rx_frames))) {
+		pr_info("%s: dequeuing skb and free\n", __func__);
+		dev_kfree_skb_any(skb);
+	}
+	spin_unlock(&dev->rx_frames.lock);
+#endif
 	link->in_ep->driver_data = NULL;
 	link->in_ep->desc = NULL;
 
@@ -1333,11 +1505,6 @@ void gether_disconnect(struct gether *link)
 	}
 	spin_unlock(&dev->req_lock);
 
-	spin_lock(&dev->rx_frames.lock);
-	while ((skb = __skb_dequeue(&dev->rx_frames)))
-		dev_kfree_skb_any(skb);
-	spin_unlock(&dev->rx_frames.lock);
-
 	link->out_ep->driver_data = NULL;
 	link->out_ep->desc = NULL;
 
@@ -1350,25 +1517,3 @@ void gether_disconnect(struct gether *link)
 	dev->port_usb = NULL;
 	spin_unlock(&dev->lock);
 }
-EXPORT_SYMBOL_GPL(gether_disconnect);
-
-static int __init gether_init(void)
-{
-	uether_wq  = create_singlethread_workqueue("uether");
-	if (!uether_wq) {
-		pr_err("%s: Unable to create workqueue: uether\n", __func__);
-		return -ENOMEM;
-	}
-	return 0;
-}
-module_init(gether_init);
-
-static void __exit gether_exit(void)
-{
-	destroy_workqueue(uether_wq);
-
-}
-module_exit(gether_exit);
-MODULE_AUTHOR("David Brownell");
-MODULE_DESCRIPTION("ethernet over USB driver");
-MODULE_LICENSE("GPL v2");
