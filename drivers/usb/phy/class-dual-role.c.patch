diff --git a/drivers/usb/phy/class-dual-role.c b/drivers/usb/phy/class-dual-role.c
index 51fcb545a9d5..ca68b6fe65a3 100644
--- a/drivers/usb/phy/class-dual-role.c
+++ b/drivers/usb/phy/class-dual-role.c
@@ -76,13 +76,13 @@ static void dual_role_changed_work(struct work_struct *work)
 	    container_of(work, struct dual_role_phy_instance,
 			 changed_work);
 
-	dev_dbg(&dual_role->dev, "%s\n", __func__);
+	dev_info(&dual_role->dev, "%s\n", __func__);
 	kobject_uevent(&dual_role->dev.kobj, KOBJ_CHANGE);
 }
 
 void dual_role_instance_changed(struct dual_role_phy_instance *dual_role)
 {
-	dev_dbg(&dual_role->dev, "%s\n", __func__);
+	dev_info(&dual_role->dev, "%s\n", __func__);
 	pm_wakeup_event(&dual_role->dev, DUAL_ROLE_NOTIFICATION_TIMEOUT);
 	schedule_work(&dual_role->changed_work);
 }
@@ -282,7 +282,7 @@ static ssize_t dual_role_show_property(struct device *dev,
 
 		if (ret < 0) {
 			if (ret == -ENODATA)
-				dev_dbg(dev,
+				dev_info(dev,
 					"driver has no data for `%s' property\n",
 					attr->attr.name);
 			else if (ret != -ENODEV)
@@ -348,6 +348,7 @@ static ssize_t dual_role_store_property(struct device *dev,
 	bool result = false;
 
 	dup_buf = kstrdupcase(buf, GFP_KERNEL, false);
+	printk("%s : off %d, buf %s\n", __func__, (int)off, buf);
 	switch (off) {
 	case DUAL_ROLE_PROP_MODE:
 		total = DUAL_ROLE_PROP_MODE_TOTAL;
@@ -451,14 +452,14 @@ int dual_role_uevent(struct device *dev, struct kobj_uevent_env *env)
 	char *prop_buf;
 	char *attrname;
 
-	dev_dbg(dev, "uevent\n");
+	dev_info(dev, "uevent\n");
 
 	if (!dual_role || !dual_role->desc) {
-		dev_dbg(dev, "No dual_role phy yet\n");
+		dev_info(dev, "No dual_role phy yet\n");
 		return ret;
 	}
 
-	dev_dbg(dev, "DUAL_ROLE_NAME=%s\n", dual_role->desc->name);
+	dev_info(dev, "DUAL_ROLE_NAME=%s\n", dual_role->desc->name);
 
 	ret = add_uevent_var(env, "DUAL_ROLE_NAME=%s", dual_role->desc->name);
 	if (ret)
@@ -490,7 +491,7 @@ int dual_role_uevent(struct device *dev, struct kobj_uevent_env *env)
 		if (!attrname)
 			ret = -ENOMEM;
 
-		dev_dbg(dev, "prop %s=%s\n", attrname, prop_buf);
+		dev_info(dev, "prop %s=%s\n", attrname, prop_buf);
 
 		ret = add_uevent_var(env, "DUAL_ROLE_%s=%s", attrname,
 				     prop_buf);
