diff --git a/drivers/usb/misc/usblcd.c b/drivers/usb/misc/usblcd.c
index c77974fab29d..1184390508e9 100644
--- a/drivers/usb/misc/usblcd.c
+++ b/drivers/usb/misc/usblcd.c
@@ -17,7 +17,6 @@
 #include <linux/slab.h>
 #include <linux/errno.h>
 #include <linux/mutex.h>
-#include <linux/rwsem.h>
 #include <linux/uaccess.h>
 #include <linux/usb.h>
 
@@ -57,8 +56,6 @@ struct usb_lcd {
 							   using up all RAM */
 	struct usb_anchor	submitted;		/* URBs to wait for
 							   before suspend */
-	struct rw_semaphore	io_rwsem;
-	unsigned long		disconnected:1;
 };
 #define to_lcd_dev(d) container_of(d, struct usb_lcd, kref)
 
@@ -144,13 +141,6 @@ static ssize_t lcd_read(struct file *file, char __user * buffer,
 
 	dev = file->private_data;
 
-	down_read(&dev->io_rwsem);
-
-	if (dev->disconnected) {
-		retval = -ENODEV;
-		goto out_up_io;
-	}
-
 	/* do a blocking bulk read to get data from the device */
 	retval = usb_bulk_msg(dev->udev,
 			      usb_rcvbulkpipe(dev->udev,
@@ -167,9 +157,6 @@ static ssize_t lcd_read(struct file *file, char __user * buffer,
 			retval = bytes_read;
 	}
 
-out_up_io:
-	up_read(&dev->io_rwsem);
-
 	return retval;
 }
 
@@ -249,18 +236,11 @@ static ssize_t lcd_write(struct file *file, const char __user * user_buffer,
 	if (r < 0)
 		return -EINTR;
 
-	down_read(&dev->io_rwsem);
-
-	if (dev->disconnected) {
-		retval = -ENODEV;
-		goto err_up_io;
-	}
-
 	/* create a urb, and a buffer for it, and copy the data to the urb */
 	urb = usb_alloc_urb(0, GFP_KERNEL);
 	if (!urb) {
 		retval = -ENOMEM;
-		goto err_up_io;
+		goto err_no_buf;
 	}
 
 	buf = usb_alloc_coherent(dev->udev, count, GFP_KERNEL,
@@ -297,7 +277,6 @@ static ssize_t lcd_write(struct file *file, const char __user * user_buffer,
 	   the USB core will eventually free it entirely */
 	usb_free_urb(urb);
 
-	up_read(&dev->io_rwsem);
 exit:
 	return count;
 error_unanchor:
@@ -305,8 +284,7 @@ error_unanchor:
 error:
 	usb_free_coherent(dev->udev, count, buf, urb->transfer_dma);
 	usb_free_urb(urb);
-err_up_io:
-	up_read(&dev->io_rwsem);
+err_no_buf:
 	up(&dev->limit_sem);
 	return retval;
 }
@@ -349,7 +327,6 @@ static int lcd_probe(struct usb_interface *interface,
 	}
 	kref_init(&dev->kref);
 	sema_init(&dev->limit_sem, USB_LCD_CONCURRENT_WRITES);
-	init_rwsem(&dev->io_rwsem);
 	init_usb_anchor(&dev->submitted);
 
 	dev->udev = usb_get_dev(interface_to_usbdev(interface));
@@ -460,12 +437,6 @@ static void lcd_disconnect(struct usb_interface *interface)
 	/* give back our minor */
 	usb_deregister_dev(interface, &lcd_class);
 
-	down_write(&dev->io_rwsem);
-	dev->disconnected = 1;
-	up_write(&dev->io_rwsem);
-
-	usb_kill_anchored_urbs(&dev->submitted);
-
 	/* decrement our usage count */
 	kref_put(&dev->kref, lcd_delete);
 
