diff --git a/drivers/usb/misc/adutux.c b/drivers/usb/misc/adutux.c
index 0c72b89fac74..0fd6c18783d0 100644
--- a/drivers/usb/misc/adutux.c
+++ b/drivers/usb/misc/adutux.c
@@ -80,7 +80,6 @@ struct adu_device {
 	char			serial_number[8];
 
 	int			open_count; /* number of times this port has been opened */
-	unsigned long		disconnected:1;
 
 	char		*read_buffer_primary;
 	int			read_buffer_length;
@@ -122,7 +121,7 @@ static void adu_abort_transfers(struct adu_device *dev)
 {
 	unsigned long flags;
 
-	if (dev->disconnected)
+	if (dev->udev == NULL)
 		return;
 
 	/* shutdown transfer */
@@ -152,7 +151,6 @@ static void adu_delete(struct adu_device *dev)
 	kfree(dev->read_buffer_secondary);
 	kfree(dev->interrupt_in_buffer);
 	kfree(dev->interrupt_out_buffer);
-	usb_put_dev(dev->udev);
 	kfree(dev);
 }
 
@@ -246,7 +244,7 @@ static int adu_open(struct inode *inode, struct file *file)
 	}
 
 	dev = usb_get_intfdata(interface);
-	if (!dev) {
+	if (!dev || !dev->udev) {
 		retval = -ENODEV;
 		goto exit_no_device;
 	}
@@ -329,7 +327,7 @@ static int adu_release(struct inode *inode, struct file *file)
 	}
 
 	adu_release_internal(dev);
-	if (dev->disconnected) {
+	if (dev->udev == NULL) {
 		/* the device was unplugged before the file was released */
 		if (!dev->open_count)	/* ... and we're the last user */
 			adu_delete(dev);
@@ -358,7 +356,7 @@ static ssize_t adu_read(struct file *file, __user char *buffer, size_t count,
 		return -ERESTARTSYS;
 
 	/* verify that the device wasn't unplugged */
-	if (dev->disconnected) {
+	if (dev->udev == NULL) {
 		retval = -ENODEV;
 		pr_err("No device or device unplugged %d\n", retval);
 		goto exit;
@@ -527,7 +525,7 @@ static ssize_t adu_write(struct file *file, const __user char *buffer,
 		goto exit_nolock;
 
 	/* verify that the device wasn't unplugged */
-	if (dev->disconnected) {
+	if (dev->udev == NULL) {
 		retval = -ENODEV;
 		pr_err("No device or device unplugged %d\n", retval);
 		goto exit;
@@ -682,7 +680,7 @@ static int adu_probe(struct usb_interface *interface,
 
 	mutex_init(&dev->mtx);
 	spin_lock_init(&dev->buflock);
-	dev->udev = usb_get_dev(udev);
+	dev->udev = udev;
 	init_waitqueue_head(&dev->read_wait);
 	init_waitqueue_head(&dev->write_wait);
 
@@ -802,21 +800,19 @@ error:
 static void adu_disconnect(struct usb_interface *interface)
 {
 	struct adu_device *dev;
+	int minor;
 
 	dev = usb_get_intfdata(interface);
 
+	mutex_lock(&dev->mtx);	/* not interruptible */
+	dev->udev = NULL;	/* poison */
+	minor = dev->minor;
 	usb_deregister_dev(interface, &adu_class);
-
-	usb_poison_urb(dev->interrupt_in_urb);
-	usb_poison_urb(dev->interrupt_out_urb);
+	mutex_unlock(&dev->mtx);
 
 	mutex_lock(&adutux_mutex);
 	usb_set_intfdata(interface, NULL);
 
-	mutex_lock(&dev->mtx);	/* not interruptible */
-	dev->disconnected = 1;
-	mutex_unlock(&dev->mtx);
-
 	/* if the device is not opened, then we clean up right now */
 	dev_dbg(&dev->udev->dev, "%s : open count %d\n",
 		__func__, dev->open_count);
@@ -824,6 +820,9 @@ static void adu_disconnect(struct usb_interface *interface)
 		adu_delete(dev);
 
 	mutex_unlock(&adutux_mutex);
+
+	dev_info(&interface->dev, "ADU device adutux%d now disconnected\n",
+		 (minor - ADU_MINOR_BASE));
 }
 
 /* usb specific object needed to register this driver with the usb subsystem */
