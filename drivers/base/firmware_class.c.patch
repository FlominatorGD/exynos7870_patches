diff --git a/drivers/base/firmware_class.c b/drivers/base/firmware_class.c
index 5ee8450e4396..08454ad163c8 100644
--- a/drivers/base/firmware_class.c
+++ b/drivers/base/firmware_class.c
@@ -275,6 +275,10 @@ static const char * const fw_path[] = {
 	"/lib/firmware/updates/" UTS_RELEASE,
 	"/lib/firmware/updates",
 	"/lib/firmware/" UTS_RELEASE,
+#ifdef CONFIG_QCOM_WIFI
+	"/etc/firmware",
+	"/etc/firmware/wlan",
+#endif /* CONFIG_QCOM_WIFI */
 	"/lib/firmware"
 };
 
@@ -1550,7 +1554,7 @@ static void __device_uncache_fw_images(void)
  * then the device driver can load its firmwares easily at
  * time when system is not ready to complete loading firmware.
  */
-static void device_cache_fw_images(void)
+static void device_cache_fw_images(unsigned int suspend_flag)
 {
 	struct firmware_cache *fwc = &fw_cache;
 	int old_timeout;
@@ -1561,26 +1565,28 @@ static void device_cache_fw_images(void)
 	/* cancel uncache work */
 	cancel_delayed_work_sync(&fwc->work);
 
-	/*
-	 * use small loading timeout for caching devices' firmware
-	 * because all these firmware images have been loaded
-	 * successfully at lease once, also system is ready for
-	 * completing firmware loading now. The maximum size of
-	 * firmware in current distributions is about 2M bytes,
-	 * so 10 secs should be enough.
-	 */
-	old_timeout = loading_timeout;
-	loading_timeout = 10;
+	if (suspend_flag) {
+		/*
+		 * use small loading timeout for caching devices' firmware
+		 * because all these firmware images have been loaded
+		 * successfully at lease once, also system is ready for
+		 * completing firmware loading now. The maximum size of
+		 * firmware in current distributions is about 2M bytes,
+		 * so 10 secs should be enough.
+		 */
+		old_timeout = loading_timeout;
+		loading_timeout = 10;
 
-	mutex_lock(&fw_lock);
-	fwc->state = FW_LOADER_START_CACHE;
-	dpm_for_each_dev(NULL, dev_cache_fw_image);
-	mutex_unlock(&fw_lock);
+		mutex_lock(&fw_lock);
+		fwc->state = FW_LOADER_START_CACHE;
+		dpm_for_each_dev(NULL, dev_cache_fw_image);
+		mutex_unlock(&fw_lock);
 
-	/* wait for completion of caching firmware for all devices */
-	async_synchronize_full_domain(&fw_cache_domain);
+		/* wait for completion of caching firmware for all devices */
+		async_synchronize_full_domain(&fw_cache_domain);
 
-	loading_timeout = old_timeout;
+		loading_timeout = old_timeout;
+	}
 }
 
 /**
@@ -1616,12 +1622,14 @@ static void device_uncache_fw_images_delay(unsigned long delay)
 static int fw_pm_notify(struct notifier_block *notify_block,
 			unsigned long mode, void *unused)
 {
+	unsigned int suspend = 0;
+
 	switch (mode) {
 	case PM_HIBERNATION_PREPARE:
 	case PM_SUSPEND_PREPARE:
 	case PM_RESTORE_PREPARE:
 		kill_requests_without_uevent();
-		device_cache_fw_images();
+		device_cache_fw_images(suspend);
 		break;
 
 	case PM_POST_SUSPEND:
