diff --git a/drivers/base/core.c b/drivers/base/core.c
index 4576d9fa2f1d..86dc9b1e039e 100644
--- a/drivers/base/core.c
+++ b/drivers/base/core.c
@@ -28,6 +28,10 @@
 #include <linux/netdevice.h>
 #include <linux/sysfs.h>
 
+#ifdef CONFIG_ARCH_EXYNOS
+#include <soc/samsung/exynos-cpu_hotplug.h>
+#endif
+
 #include "base.h"
 #include "power/power.h"
 
@@ -427,10 +431,11 @@ static DEVICE_ATTR_RW(uevent);
 static ssize_t online_show(struct device *dev, struct device_attribute *attr,
 			   char *buf)
 {
+	struct cpu *cpu = container_of(dev, struct cpu, dev);
 	bool val;
 
 	device_lock(dev);
-	val = !dev->offline;
+	val = !!cpu_online(cpu->dev.id);
 	device_unlock(dev);
 	return sprintf(buf, "%u\n", val);
 }
@@ -441,6 +446,11 @@ static ssize_t online_store(struct device *dev, struct device_attribute *attr,
 	bool val;
 	int ret;
 
+#ifdef CONFIG_ARCH_EXYNOS
+	if (exynos_cpu_hotplug_enabled())
+		return count;
+#endif
+
 	ret = strtobool(buf, &val);
 	if (ret < 0)
 		return ret;
@@ -819,8 +829,16 @@ static void cleanup_glue_dir(struct device *dev, struct kobject *glue_dir)
 
 static int device_add_class_symlinks(struct device *dev)
 {
+	struct device_node *of_node = dev_of_node(dev);
 	int error;
 
+	if (of_node) {
+		error = sysfs_create_link(&dev->kobj, &of_node->kobj,"of_node");
+		if (error)
+			dev_warn(dev, "Error %d creating of_node link\n",error);
+		/* An error here doesn't warrant bringing down the device */
+	}
+
 	if (!dev->class)
 		return 0;
 
@@ -828,7 +846,7 @@ static int device_add_class_symlinks(struct device *dev)
 				  &dev->class->p->subsys.kobj,
 				  "subsystem");
 	if (error)
-		goto out;
+		goto out_devnode;
 
 	if (dev->parent && device_is_not_partition(dev)) {
 		error = sysfs_create_link(&dev->kobj, &dev->parent->kobj,
@@ -856,12 +874,16 @@ out_device:
 
 out_subsys:
 	sysfs_remove_link(&dev->kobj, "subsystem");
-out:
+out_devnode:
+	sysfs_remove_link(&dev->kobj, "of_node");
 	return error;
 }
 
 static void device_remove_class_symlinks(struct device *dev)
 {
+	if (dev_of_node(dev))
+		sysfs_remove_link(&dev->kobj, "of_node");
+
 	if (!dev->class)
 		return;
 
@@ -1414,13 +1436,14 @@ int __init devices_init(void)
 
 static int device_check_offline(struct device *dev, void *not_used)
 {
+	struct cpu *cpu = container_of(dev, struct cpu, dev);
 	int ret;
 
 	ret = device_for_each_child(dev, NULL, device_check_offline);
 	if (ret)
 		return ret;
 
-	return device_supports_offline(dev) && !dev->offline ? -EBUSY : 0;
+	return device_supports_offline(dev) && cpu_online(cpu->dev.id) ? -EBUSY : 0;
 }
 
 /**
@@ -1436,6 +1459,7 @@ static int device_check_offline(struct device *dev, void *not_used)
  */
 int device_offline(struct device *dev)
 {
+	struct cpu *cpu = container_of(dev, struct cpu, dev);
 	int ret;
 
 	if (dev->offline_disabled)
@@ -1447,14 +1471,12 @@ int device_offline(struct device *dev)
 
 	device_lock(dev);
 	if (device_supports_offline(dev)) {
-		if (dev->offline) {
+		if (!cpu_online(cpu->dev.id)) {
 			ret = 1;
 		} else {
 			ret = dev->bus->offline(dev);
-			if (!ret) {
+			if (!ret)
 				kobject_uevent(&dev->kobj, KOBJ_OFFLINE);
-				dev->offline = true;
-			}
 		}
 	}
 	device_unlock(dev);
@@ -1474,16 +1496,15 @@ int device_offline(struct device *dev)
  */
 int device_online(struct device *dev)
 {
+	struct cpu *cpu = container_of(dev, struct cpu, dev);
 	int ret = 0;
 
 	device_lock(dev);
 	if (device_supports_offline(dev)) {
-		if (dev->offline) {
+		if (!cpu_online(cpu->dev.id)) {
 			ret = dev->bus->online(dev);
-			if (!ret) {
+			if (!ret)
 				kobject_uevent(&dev->kobj, KOBJ_ONLINE);
-				dev->offline = false;
-			}
 		} else {
 			ret = 1;
 		}
@@ -1941,6 +1962,9 @@ int device_move(struct device *dev, struct device *new_parent,
 	case DPM_ORDER_DEV_LAST:
 		device_pm_move_last(dev);
 		break;
+	case DPM_ORDER_DEV_FIRST:
+		device_pm_move_first(dev);
+		break;
 	}
 
 	put_device(old_parent);
@@ -2158,7 +2182,11 @@ EXPORT_SYMBOL(func);
 define_dev_printk_level(dev_emerg, KERN_EMERG);
 define_dev_printk_level(dev_alert, KERN_ALERT);
 define_dev_printk_level(dev_crit, KERN_CRIT);
+#if defined(CONFIG_SEC_BAT_AUT) && !defined(CONFIG_SAMSUNG_PRODUCT_SHIP)
+define_dev_printk_level(dev_err, BAT_AUTOMAION_TEST_PREFIX_ERR);
+#else
 define_dev_printk_level(dev_err, KERN_ERR);
+#endif
 define_dev_printk_level(dev_warn, KERN_WARNING);
 define_dev_printk_level(dev_notice, KERN_NOTICE);
 define_dev_printk_level(_dev_info, KERN_INFO);
