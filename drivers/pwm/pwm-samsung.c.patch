diff --git a/drivers/pwm/pwm-samsung.c b/drivers/pwm/pwm-samsung.c
index 00e60513ea82..bf2c7731fe6c 100644
--- a/drivers/pwm/pwm-samsung.c
+++ b/drivers/pwm/pwm-samsung.c
@@ -27,6 +27,8 @@
 
 /* For struct samsung_timer_variant and samsung_pwm_lock. */
 #include <clocksource/samsung_pwm.h>
+#include <soc/samsung/exynos-pm.h>
+#include <soc/samsung/exynos-powermode.h>
 
 #define REG_TCFG0			0x00
 #define REG_TCFG1			0x04
@@ -57,6 +59,12 @@
 #define TCON_AUTORELOAD(chan)		\
 	((chan < 5) ? _TCON_AUTORELOAD(chan) : _TCON_AUTORELOAD4(chan))
 
+enum duty_cycle {
+	DUTY_CYCLE_ZERO,
+	DUTY_CYCLE_PULSE,
+	DUTY_CYCLE_FULL,
+};
+
 /**
  * struct samsung_pwm_channel - private data of PWM channel
  * @period_ns:	current period in nanoseconds programmed to the hardware
@@ -64,9 +72,14 @@
  * @tin_ns:	time of one timer tick in nanoseconds with current timer rate
  */
 struct samsung_pwm_channel {
-	u32 period_ns;
-	u32 duty_ns;
-	u32 tin_ns;
+	struct clk		*clk_div;
+	struct clk		*clk_tin;
+
+	u32 			period_ns;
+	u32 			duty_ns;
+	u32 			tin_ns;
+	unsigned char	running;
+	enum duty_cycle	duty_cycle;
 };
 
 /**
@@ -76,8 +89,6 @@ struct samsung_pwm_channel {
  * @inverter_mask:	inverter status for all channels - one bit per channel
  * @base:		base address of mapped PWM registers
  * @base_clk:		base clock used to drive the timers
- * @tclk0:		external clock 0 (can be ERR_PTR if not present)
- * @tclk1:		external clock 1 (can be ERR_PTR if not present)
  */
 struct samsung_pwm_chip {
 	struct pwm_chip chip;
@@ -86,8 +97,12 @@ struct samsung_pwm_chip {
 
 	void __iomem *base;
 	struct clk *base_clk;
-	struct clk *tclk0;
-	struct clk *tclk1;
+	struct clk *sclk;
+	unsigned int reg_tcfg0;
+	int enable_cnt;
+	unsigned int need_hw_init;
+	unsigned int idle_ip_index;
+	bool sclk_ctrl;
 };
 
 #ifndef CONFIG_CLKSRC_SAMSUNG_PWM
@@ -104,6 +119,42 @@ struct samsung_pwm_chip {
  */
 static DEFINE_SPINLOCK(samsung_pwm_lock);
 #endif
+struct samsung_pwm_chip *g_samsung_pwm;
+
+static void pwm_samsung_save(struct samsung_pwm_chip *chip);
+static void pwm_samsung_restore(struct samsung_pwm_chip *chip);
+
+static int pwm_samsung_clk_enable(struct samsung_pwm_chip *chip)
+{
+	int ret;
+
+	exynos_update_ip_idle_status(chip->idle_ip_index, 0);
+	ret = clk_enable(chip->base_clk);
+	if (ret)
+		goto base_clk_err;
+
+	if (chip->sclk_ctrl) {
+		ret = clk_enable(chip->sclk);
+		if (ret)
+			goto sclk_err;
+	}
+
+	return 0;
+sclk_err:
+	clk_disable(chip->base_clk);
+base_clk_err:
+	exynos_update_ip_idle_status(chip->idle_ip_index, 1);
+	return ret;
+}
+
+static void pwm_samsung_clk_disable(struct samsung_pwm_chip *chip)
+{
+	if (chip->sclk_ctrl)
+		clk_disable(chip->sclk);
+
+	clk_disable(chip->base_clk);
+	exynos_update_ip_idle_status(chip->idle_ip_index, 1);
+}
 
 static inline
 struct samsung_pwm_chip *to_samsung_pwm_chip(struct pwm_chip *chip)
@@ -117,72 +168,52 @@ static inline unsigned int to_tcon_channel(unsigned int channel)
 	return (channel == 0) ? 0 : (channel + 1);
 }
 
-static void pwm_samsung_set_divisor(struct samsung_pwm_chip *pwm,
-				    unsigned int channel, u8 divisor)
+static void pwm_samsung_set_divisor(struct samsung_pwm_chip *chip,
+				    unsigned int chan, unsigned long rate)
 {
-	u8 shift = TCFG1_SHIFT(channel);
-	unsigned long flags;
-	u32 reg;
-	u8 bits;
+	struct pwm_device *pwm = &chip->chip.pwms[chan];
+	struct samsung_pwm_channel *channel = pwm_get_chip_data(pwm);
 
-	bits = (fls(divisor) - 1) - pwm->variant.div_base;
-
-	spin_lock_irqsave(&samsung_pwm_lock, flags);
-
-	reg = readl(pwm->base + REG_TCFG1);
-	reg &= ~(TCFG1_MUX_MASK << shift);
-	reg |= bits << shift;
-	writel(reg, pwm->base + REG_TCFG1);
-
-	spin_unlock_irqrestore(&samsung_pwm_lock, flags);
+	clk_set_rate(channel->clk_div, rate);
 }
 
 static int pwm_samsung_is_tdiv(struct samsung_pwm_chip *chip, unsigned int chan)
 {
-	struct samsung_pwm_variant *variant = &chip->variant;
-	u32 reg;
-
-	reg = readl(chip->base + REG_TCFG1);
-	reg >>= TCFG1_SHIFT(chan);
-	reg &= TCFG1_MUX_MASK;
+	struct pwm_device *pwm = &chip->chip.pwms[chan];
+	struct samsung_pwm_channel *channel = pwm_get_chip_data(pwm);
 
-	return (BIT(reg) & variant->tclk_mask) == 0;
+	return clk_get_parent(channel->clk_tin) == channel->clk_div;
 }
 
 static unsigned long pwm_samsung_get_tin_rate(struct samsung_pwm_chip *chip,
 					      unsigned int chan)
 {
+	struct pwm_device *pwm = &chip->chip.pwms[chan];
+	struct samsung_pwm_channel *channel = pwm_get_chip_data(pwm);
 	unsigned long rate;
-	u32 reg;
 
-	rate = clk_get_rate(chip->base_clk);
+	rate = clk_get_rate(clk_get_parent(channel->clk_div));
+	clk_set_rate(clk_get_parent(channel->clk_div), rate);
 
-	reg = readl(chip->base + REG_TCFG0);
-	if (chan >= 2)
-		reg >>= TCFG0_PRESCALER1_SHIFT;
-	reg &= TCFG0_PRESCALER_MASK;
-
-	return rate / (reg + 1);
+	return rate;
 }
 
 static unsigned long pwm_samsung_calc_tin(struct samsung_pwm_chip *chip,
 					  unsigned int chan, unsigned long freq)
 {
+	struct pwm_device *pwm = &chip->chip.pwms[chan];
+	struct samsung_pwm_channel *channel = pwm_get_chip_data(pwm);
 	struct samsung_pwm_variant *variant = &chip->variant;
 	unsigned long rate;
-	struct clk *clk;
 	u8 div;
 
 	if (!pwm_samsung_is_tdiv(chip, chan)) {
-		clk = (chan < 2) ? chip->tclk0 : chip->tclk1;
-		if (!IS_ERR(clk)) {
-			rate = clk_get_rate(clk);
-			if (rate)
-				return rate;
-		}
+		rate = clk_get_rate(channel->clk_tin);
+		if (rate)
+			return rate;
 
 		dev_warn(chip->chip.dev,
-			"tclk of PWM %d is inoperational, using tdiv\n", chan);
+			"tin of PWM %d is inoperational, using tdiv\n", chan);
 	}
 
 	rate = pwm_samsung_get_tin_rate(chip, chan);
@@ -197,15 +228,37 @@ static unsigned long pwm_samsung_calc_tin(struct samsung_pwm_chip *chip,
 		if ((rate >> (variant->bits + div)) < freq)
 			break;
 
-	pwm_samsung_set_divisor(chip, chan, BIT(div));
+	pwm_samsung_set_divisor(chip, chan, rate >> div);
+	dev_dbg(chip->chip.dev, "tdiv at %lu\n", clk_get_rate(channel->clk_div));
 
 	return rate >> div;
 }
 
+static void pwm_samsung_init(struct samsung_pwm_chip *chip,
+					struct pwm_device *pwm)
+{
+	unsigned int tcon_chan = to_tcon_channel(pwm->hwpwm);
+	u32 tcon;
+
+	__raw_writel(0, chip->base + REG_TCMPB(pwm->hwpwm));
+	__raw_writel(0, chip->base + REG_TCNTB(pwm->hwpwm));
+
+	tcon = __raw_readl(chip->base + REG_TCON);
+	tcon |= TCON_INVERT(tcon_chan) | TCON_MANUALUPDATE(tcon_chan);
+	tcon &= ~(TCON_AUTORELOAD(tcon_chan) | TCON_START(tcon_chan));
+	__raw_writel(tcon, chip->base + REG_TCON);
+
+	tcon &= ~TCON_MANUALUPDATE(tcon_chan);
+	__raw_writel(tcon, chip->base + REG_TCON);
+}
+
 static int pwm_samsung_request(struct pwm_chip *chip, struct pwm_device *pwm)
 {
 	struct samsung_pwm_chip *our_chip = to_samsung_pwm_chip(chip);
 	struct samsung_pwm_channel *our_chan;
+	unsigned char clk_tin_name[16];
+	unsigned char clk_tdiv_name[16];
+	unsigned long flags;
 
 	if (!(our_chip->variant.output_mask & BIT(pwm->hwpwm))) {
 		dev_warn(chip->dev,
@@ -220,6 +273,26 @@ static int pwm_samsung_request(struct pwm_chip *chip, struct pwm_device *pwm)
 
 	pwm_set_chip_data(pwm, our_chan);
 
+	snprintf(clk_tin_name, sizeof(clk_tin_name), "pwm-tin%d", pwm->hwpwm);
+	our_chan->clk_tin = devm_clk_get(chip->dev, clk_tin_name);
+	if (IS_ERR(our_chan->clk_tin)) {
+		dev_err(chip->dev, "failed to get pwm tin clk\n");
+		return PTR_ERR(our_chan->clk_tin);
+	}
+
+	snprintf(clk_tdiv_name, sizeof(clk_tdiv_name), "pwm-tdiv%d", pwm->hwpwm);
+	our_chan->clk_div = devm_clk_get(chip->dev, clk_tdiv_name);
+	if (IS_ERR(our_chan->clk_div)) {
+		dev_err(chip->dev, "failed to get pwm tdiv clk\n");
+		return PTR_ERR(our_chan->clk_div);
+	}
+
+	spin_lock_irqsave(&samsung_pwm_lock, flags);
+	pwm_samsung_clk_enable(our_chip);
+	pwm_samsung_init(our_chip, pwm);
+	pwm_samsung_clk_disable(our_chip);
+	spin_unlock_irqrestore(&samsung_pwm_lock, flags);
+
 	return 0;
 }
 
@@ -232,23 +305,45 @@ static int pwm_samsung_enable(struct pwm_chip *chip, struct pwm_device *pwm)
 {
 	struct samsung_pwm_chip *our_chip = to_samsung_pwm_chip(chip);
 	unsigned int tcon_chan = to_tcon_channel(pwm->hwpwm);
+	struct samsung_pwm_channel *channel = pwm_get_chip_data(pwm);
 	unsigned long flags;
 	u32 tcon;
 
 	spin_lock_irqsave(&samsung_pwm_lock, flags);
 
-	tcon = readl(our_chip->base + REG_TCON);
+	if (!our_chip->enable_cnt && !our_chip->need_hw_init)
+		pwm_samsung_clk_enable(our_chip);
+
+	if (our_chip->need_hw_init)
+		pwm_samsung_restore(our_chip);
+
+	tcon = __raw_readl(our_chip->base + REG_TCON);
+	if (!(tcon & TCON_START(tcon_chan))) {
+		tcon |= TCON_MANUALUPDATE(tcon_chan);
+		__raw_writel(tcon, our_chip->base + REG_TCON);
+
+		tcon &= ~TCON_MANUALUPDATE(tcon_chan);
+		if (channel->duty_cycle == DUTY_CYCLE_ZERO)
+			tcon &= ~TCON_AUTORELOAD(tcon_chan);
+		else
+			tcon |= TCON_AUTORELOAD(tcon_chan);
+
+		tcon |= TCON_START(tcon_chan);
+		__raw_writel(tcon, our_chip->base + REG_TCON);
+	} else if (!(tcon & TCON_AUTORELOAD(tcon_chan)) &&
+		   channel->duty_cycle != DUTY_CYCLE_ZERO) {
+		tcon |= TCON_MANUALUPDATE(tcon_chan);
+		__raw_writel(tcon, our_chip->base + REG_TCON);
+
+		tcon &= ~TCON_MANUALUPDATE(tcon_chan);
+		tcon |= TCON_AUTORELOAD(tcon_chan);
+		__raw_writel(tcon, our_chip->base + REG_TCON);
+	}
 
-	tcon &= ~TCON_START(tcon_chan);
-	tcon |= TCON_MANUALUPDATE(tcon_chan);
-	writel(tcon, our_chip->base + REG_TCON);
-
-	tcon &= ~TCON_MANUALUPDATE(tcon_chan);
-	tcon |= TCON_START(tcon_chan) | TCON_AUTORELOAD(tcon_chan);
-	writel(tcon, our_chip->base + REG_TCON);
+	channel->running = 1;
+	our_chip->enable_cnt++;
 
 	spin_unlock_irqrestore(&samsung_pwm_lock, flags);
-
 	return 0;
 }
 
@@ -256,6 +351,7 @@ static void pwm_samsung_disable(struct pwm_chip *chip, struct pwm_device *pwm)
 {
 	struct samsung_pwm_chip *our_chip = to_samsung_pwm_chip(chip);
 	unsigned int tcon_chan = to_tcon_channel(pwm->hwpwm);
+	struct samsung_pwm_channel *channel = pwm_get_chip_data(pwm);
 	unsigned long flags;
 	u32 tcon;
 
@@ -265,6 +361,11 @@ static void pwm_samsung_disable(struct pwm_chip *chip, struct pwm_device *pwm)
 	tcon &= ~TCON_AUTORELOAD(tcon_chan);
 	writel(tcon, our_chip->base + REG_TCON);
 
+	channel->running = 0;
+	our_chip->enable_cnt--;
+	if (!our_chip->enable_cnt && !our_chip->need_hw_init)
+		pwm_samsung_clk_disable(our_chip);
+
 	spin_unlock_irqrestore(&samsung_pwm_lock, flags);
 }
 
@@ -272,8 +373,12 @@ static int pwm_samsung_config(struct pwm_chip *chip, struct pwm_device *pwm,
 			      int duty_ns, int period_ns)
 {
 	struct samsung_pwm_chip *our_chip = to_samsung_pwm_chip(chip);
+	unsigned int tcon_chan = to_tcon_channel(pwm->hwpwm);
 	struct samsung_pwm_channel *chan = pwm_get_chip_data(pwm);
-	u32 tin_ns = chan->tin_ns, tcnt, tcmp;
+	enum duty_cycle duty_cycle;
+	u32 tin_ns = chan->tin_ns, tcnt, tcmp, tcon;
+	unsigned long flags;
+	int ret = 0;
 
 	/*
 	 * We currently avoid using 64bit arithmetic by using the
@@ -283,13 +388,19 @@ static int pwm_samsung_config(struct pwm_chip *chip, struct pwm_device *pwm,
 	if (period_ns > NSEC_PER_SEC)
 		return -ERANGE;
 
+	if (duty_ns > period_ns)
+		return -EINVAL;
+
 	if (period_ns == chan->period_ns && duty_ns == chan->duty_ns)
 		return 0;
 
-	tcnt = readl(our_chip->base + REG_TCNTB(pwm->hwpwm));
+	pwm_samsung_clk_enable(our_chip);
 
-	/* We need tick count for calculation, not last tick. */
-	++tcnt;
+	dev_dbg(our_chip->chip.dev, "base_clk at %lu\n",
+			clk_get_rate(our_chip->base_clk));
+	if (our_chip->sclk_ctrl)
+		dev_dbg(our_chip->chip.dev, "sclk at %lu\n",
+				clk_get_rate(our_chip->base_clk));
 
 	/* Check to see if we are changing the clock rate of the PWM. */
 	if (chan->period_ns != period_ns) {
@@ -297,31 +408,44 @@ static int pwm_samsung_config(struct pwm_chip *chip, struct pwm_device *pwm,
 		u32 period;
 
 		period = NSEC_PER_SEC / period_ns;
-
 		dev_dbg(our_chip->chip.dev, "duty_ns=%d, period_ns=%d (%u)\n",
 						duty_ns, period_ns, period);
 
 		tin_rate = pwm_samsung_calc_tin(our_chip, pwm->hwpwm, period);
-
-		dev_dbg(our_chip->chip.dev, "tin_rate=%lu\n", tin_rate);
+		if(!tin_rate) {
+			ret = -EINVAL;
+			goto out;
+		}
 
 		tin_ns = NSEC_PER_SEC / tin_rate;
-		tcnt = period_ns / tin_ns;
 	}
 
-	/* Period is too short. */
-	if (tcnt <= 1)
-		return -ERANGE;
-
 	/* Note that counters count down. */
-	tcmp = duty_ns / tin_ns;
+	tcnt = DIV_ROUND_CLOSEST(period_ns, tin_ns);
+	tcmp = DIV_ROUND_CLOSEST(duty_ns, tin_ns);
 
-	/* 0% duty is not available */
-	if (!tcmp)
-		++tcmp;
+	/* Period is too short. */
+	if (tcnt <= 1) {
+		ret = -ERANGE;
+		goto out;
+	}
+
+	if (tcmp == 0)
+		duty_cycle = DUTY_CYCLE_ZERO;
+	else if (tcmp == tcnt)
+		duty_cycle = DUTY_CYCLE_FULL;
+	else
+		duty_cycle = DUTY_CYCLE_PULSE;
 
 	tcmp = tcnt - tcmp;
+	/* the pwm hw only checks the compare register after a decrement,
+	   so the pin never toggles if tcmp = tcnt */
+	if (tcmp == tcnt)
+		tcmp--;
 
+	/* PWM counts 1 hidden tick at the end of each period on S3C64XX and
+	 * EXYNOS series, so tcmp and tcnt should be subtracted 1.
+	 */
 	/* Decrement to get tick numbers, instead of tick counts. */
 	--tcnt;
 	/* -1UL will give 100% duty. */
@@ -331,14 +455,37 @@ static int pwm_samsung_config(struct pwm_chip *chip, struct pwm_device *pwm,
 				"tin_ns=%u, tcmp=%u/%u\n", tin_ns, tcmp, tcnt);
 
 	/* Update PWM registers. */
+	spin_lock_irqsave(&samsung_pwm_lock, flags);
+	if (our_chip->need_hw_init)
+		pwm_samsung_restore(our_chip);
+
 	writel(tcnt, our_chip->base + REG_TCNTB(pwm->hwpwm));
 	writel(tcmp, our_chip->base + REG_TCMPB(pwm->hwpwm));
 
+	tcon = __raw_readl(our_chip->base + REG_TCON);
+	if (chan->running == 1 && tcon & TCON_START(tcon_chan) &&
+	    chan->duty_cycle != duty_cycle) {
+		if (duty_cycle == DUTY_CYCLE_ZERO) {
+			tcon |= TCON_MANUALUPDATE(tcon_chan);
+			__raw_writel(tcon, our_chip->base + REG_TCON);
+			tcon &= ~TCON_MANUALUPDATE(tcon_chan);
+			tcon &= ~TCON_AUTORELOAD(tcon_chan);
+		} else {
+			tcon |= TCON_AUTORELOAD(tcon_chan);
+		}
+		__raw_writel(tcon, our_chip->base + REG_TCON);
+	}
+
 	chan->period_ns = period_ns;
 	chan->tin_ns = tin_ns;
 	chan->duty_ns = duty_ns;
+	chan->duty_cycle = duty_cycle;
 
-	return 0;
+	spin_unlock_irqrestore(&samsung_pwm_lock, flags);
+out:
+	pwm_samsung_clk_disable(our_chip);
+
+	return ret;
 }
 
 static void pwm_samsung_set_invert(struct samsung_pwm_chip *chip,
@@ -349,9 +496,10 @@ static void pwm_samsung_set_invert(struct samsung_pwm_chip *chip,
 	u32 tcon;
 
 	spin_lock_irqsave(&samsung_pwm_lock, flags);
+	if (!chip->enable_cnt)
+		pwm_samsung_clk_enable(chip);
 
 	tcon = readl(chip->base + REG_TCON);
-
 	if (invert) {
 		chip->inverter_mask |= BIT(channel);
 		tcon |= TCON_INVERT(tcon_chan);
@@ -359,9 +507,11 @@ static void pwm_samsung_set_invert(struct samsung_pwm_chip *chip,
 		chip->inverter_mask &= ~BIT(channel);
 		tcon &= ~TCON_INVERT(tcon_chan);
 	}
-
 	writel(tcon, chip->base + REG_TCON);
 
+	if (!chip->enable_cnt)
+		pwm_samsung_clk_disable(chip);
+
 	spin_unlock_irqrestore(&samsung_pwm_lock, flags);
 }
 
@@ -397,8 +547,8 @@ static const struct samsung_pwm_variant s3c24xx_variant = {
 };
 
 static const struct samsung_pwm_variant s3c64xx_variant = {
-	.bits		= 32,
-	.div_base	= 0,
+	.bits		= 16,
+	.div_base	= 1,
 	.has_tint_cstat	= true,
 	.tclk_mask	= BIT(7) | BIT(6) | BIT(5),
 };
@@ -450,6 +600,11 @@ static int pwm_samsung_parse_dt(struct samsung_pwm_chip *chip)
 		chip->variant.output_mask |= BIT(val);
 	}
 
+	if (of_find_property(np, "samsung,pwm-sclk-ctrl", NULL))
+		chip->sclk_ctrl = true;
+	else
+		chip->sclk_ctrl = false;
+
 	return 0;
 }
 #else
@@ -459,12 +614,34 @@ static int pwm_samsung_parse_dt(struct samsung_pwm_chip *chip)
 }
 #endif
 
+#ifdef CONFIG_CPU_IDLE
+static int pwm_samsung_notifier(struct notifier_block *nb,
+				unsigned long cmd, void *v)
+{
+	switch (cmd) {
+	case LPA_ENTER:
+		if (!g_samsung_pwm->need_hw_init && !g_samsung_pwm->enable_cnt)
+			pwm_samsung_save(g_samsung_pwm);
+		break;
+	case LPA_EXIT:
+		if (!g_samsung_pwm->need_hw_init && !g_samsung_pwm->enable_cnt)
+			g_samsung_pwm->need_hw_init = 1;
+		break;
+	}
+
+	return NOTIFY_OK;
+}
+
+static struct notifier_block pwm_samsung_notifier_block = {
+	.notifier_call = pwm_samsung_notifier,
+};
+#endif
+
 static int pwm_samsung_probe(struct platform_device *pdev)
 {
 	struct device *dev = &pdev->dev;
 	struct samsung_pwm_chip *chip;
 	struct resource *res;
-	unsigned int chan;
 	int ret;
 
 	chip = devm_kzalloc(&pdev->dev, sizeof(*chip), GFP_KERNEL);
@@ -476,6 +653,8 @@ static int pwm_samsung_probe(struct platform_device *pdev)
 	chip->chip.base = -1;
 	chip->chip.npwm = SAMSUNG_PWM_NUM;
 	chip->inverter_mask = BIT(SAMSUNG_PWM_NUM) - 1;
+	chip->idle_ip_index = exynos_get_idle_ip_index(dev_name(&pdev->dev));
+	g_samsung_pwm = chip;
 
 	if (IS_ENABLED(CONFIG_OF) && pdev->dev.of_node) {
 		ret = pwm_samsung_parse_dt(chip);
@@ -499,41 +678,58 @@ static int pwm_samsung_probe(struct platform_device *pdev)
 	if (IS_ERR(chip->base))
 		return PTR_ERR(chip->base);
 
-	chip->base_clk = devm_clk_get(&pdev->dev, "timers");
+	chip->base_clk = devm_clk_get(&pdev->dev, "gate_timers");
 	if (IS_ERR(chip->base_clk)) {
 		dev_err(dev, "failed to get timer base clk\n");
 		return PTR_ERR(chip->base_clk);
 	}
 
-	ret = clk_prepare_enable(chip->base_clk);
-	if (ret < 0) {
-		dev_err(dev, "failed to enable base clock\n");
-		return ret;
+	if (chip->sclk_ctrl) {
+		chip->sclk = devm_clk_get(&pdev->dev, "sclk_pwm");
+		if (IS_ERR(chip->sclk)) {
+			dev_err(dev, "failed to get timer sclk-pwm\n");
+			return PTR_ERR(chip->sclk);
+		}
 	}
 
-	for (chan = 0; chan < SAMSUNG_PWM_NUM; ++chan)
-		if (chip->variant.output_mask & BIT(chan))
-			pwm_samsung_set_invert(chip, chan, true);
+	exynos_update_ip_idle_status(chip->idle_ip_index, 0);
+	ret = clk_prepare_enable(chip->base_clk);
+	if (ret)
+		goto base_clk_err;
 
-	/* Following clocks are optional. */
-	chip->tclk0 = devm_clk_get(&pdev->dev, "pwm-tclk0");
-	chip->tclk1 = devm_clk_get(&pdev->dev, "pwm-tclk1");
+	if (chip->sclk_ctrl) {
+		ret = clk_prepare_enable(chip->sclk);
+		if (ret)
+			goto sclk_err;
+	}
 
-	platform_set_drvdata(pdev, chip);
+	dev_info(dev, "base_clk at %lu", clk_get_rate(chip->base_clk));
+	if (chip->sclk_ctrl)
+		dev_info(dev, "sclk at %lu", clk_get_rate(chip->sclk));
 
+	platform_set_drvdata(pdev, chip);
 	ret = pwmchip_add(&chip->chip);
 	if (ret < 0) {
 		dev_err(dev, "failed to register PWM chip\n");
-		clk_disable_unprepare(chip->base_clk);
-		return ret;
+		goto chip_add_err;
 	}
 
-	dev_dbg(dev, "base_clk at %lu, tclk0 at %lu, tclk1 at %lu\n",
-		clk_get_rate(chip->base_clk),
-		!IS_ERR(chip->tclk0) ? clk_get_rate(chip->tclk0) : 0,
-		!IS_ERR(chip->tclk1) ? clk_get_rate(chip->tclk1) : 0);
-
+#ifndef CONFIG_EXYNOS_LCD_PWM_BACKLIGHT
+	pwm_samsung_clk_disable(chip);
+#endif
+#ifdef CONFIG_CPU_IDLE
+	exynos_pm_register_notifier(&pwm_samsung_notifier_block);
+#endif
 	return 0;
+chip_add_err:
+	if (chip->sclk_ctrl)
+		clk_disable_unprepare(chip->sclk);
+sclk_err:
+	clk_disable_unprepare(chip->base_clk);
+base_clk_err:
+	exynos_update_ip_idle_status(chip->idle_ip_index, 1);
+
+	return ret;
 }
 
 static int pwm_samsung_remove(struct platform_device *pdev)
@@ -545,50 +741,88 @@ static int pwm_samsung_remove(struct platform_device *pdev)
 	if (ret < 0)
 		return ret;
 
+	if (chip->sclk_ctrl)
+		clk_disable_unprepare(chip->sclk);
+
 	clk_disable_unprepare(chip->base_clk);
 
 	return 0;
 }
 
-#ifdef CONFIG_PM_SLEEP
-static int pwm_samsung_suspend(struct device *dev)
+static void pwm_samsung_save(struct samsung_pwm_chip *chip)
 {
-	struct samsung_pwm_chip *chip = dev_get_drvdata(dev);
+	u32 tcon;
 	unsigned int i;
 
-	/*
-	 * No one preserves these values during suspend so reset them.
-	 * Otherwise driver leaves PWM unconfigured if same values are
-	 * passed to pwm_config() next time.
-	 */
+	if (!chip->enable_cnt && !chip->need_hw_init)
+		pwm_samsung_clk_enable(chip);
+
 	for (i = 0; i < SAMSUNG_PWM_NUM; ++i) {
 		struct pwm_device *pwm = &chip->chip.pwms[i];
 		struct samsung_pwm_channel *chan = pwm_get_chip_data(pwm);
+		unsigned int tcon_chan = to_tcon_channel(pwm->hwpwm);
 
 		if (!chan)
 			continue;
 
-		chan->period_ns = 0;
-		chan->duty_ns = 0;
+		if (chan->running == 0) {
+			tcon = __raw_readl(chip->base + REG_TCON);
+			if (chan->duty_cycle == DUTY_CYCLE_ZERO) {
+				tcon |= TCON_MANUALUPDATE(tcon_chan);
+			} else if (chan->duty_cycle == DUTY_CYCLE_FULL) {
+				tcon &= TCON_INVERT(tcon_chan);
+				tcon |= TCON_MANUALUPDATE(tcon_chan);
+			}
+			tcon &= ~TCON_START(tcon_chan);
+			__raw_writel(tcon, chip->base + REG_TCON);
+		}
+
+		chan->period_ns = -1;
+		chan->duty_ns = -1;
 	}
+	/* Save pwm registers*/
+	chip->reg_tcfg0 = __raw_readl(chip->base + REG_TCFG0);
 
-	return 0;
+	pwm_samsung_clk_disable(chip);
 }
 
-static int pwm_samsung_resume(struct device *dev)
+static void pwm_samsung_restore(struct samsung_pwm_chip *chip)
 {
-	struct samsung_pwm_chip *chip = dev_get_drvdata(dev);
 	unsigned int chan;
 
-	/*
-	 * Inverter setting must be preserved across suspend/resume
-	 * as nobody really seems to configure it more than once.
-	 */
+	pwm_samsung_clk_enable(chip);
+
+	chip->need_hw_init = 0;
+	/* Restore pwm registers*/
+	__raw_writel(chip->reg_tcfg0, chip->base + REG_TCFG0);
+
 	for (chan = 0; chan < SAMSUNG_PWM_NUM; ++chan) {
-		if (chip->variant.output_mask & BIT(chan))
-			pwm_samsung_set_invert(chip, chan,
-					chip->inverter_mask & BIT(chan));
+		if (chip->variant.output_mask & BIT(chan)) {
+			struct pwm_device *pwm = &chip->chip.pwms[chan];
+			pwm_samsung_init(chip, pwm);
+		}
 	}
+}
+
+#ifdef CONFIG_PM_SLEEP
+static int pwm_samsung_suspend(struct device *dev)
+{
+	struct samsung_pwm_chip *chip = dev_get_drvdata(dev);
+
+	if(!chip->need_hw_init)
+		pwm_samsung_save(chip);
+
+	return 0;
+}
+
+static int pwm_samsung_resume(struct device *dev)
+{
+	struct samsung_pwm_chip *chip = dev_get_drvdata(dev);
+
+	pwm_samsung_restore(chip);
+
+	if (!chip->enable_cnt)
+		pwm_samsung_clk_disable(chip);
 
 	return 0;
 }
