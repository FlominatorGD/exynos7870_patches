diff --git a/drivers/regulator/core.c b/drivers/regulator/core.c
index af65dc82c63d..7a7e7bfc0058 100644
--- a/drivers/regulator/core.c
+++ b/drivers/regulator/core.c
@@ -1266,6 +1266,13 @@ static void regulator_supply_alias(struct device **dev, const char **supply)
 	}
 }
 
+static int _regulator_get_disable_time(struct regulator_dev *rdev)
+{
+	if (!rdev->desc->ops->disable_time)
+		return rdev->desc->disable_time;
+	return rdev->desc->ops->disable_time(rdev);
+}
+
 static struct regulator_dev *regulator_dev_lookup(struct device *dev,
 						  const char *supply,
 						  int *ret)
@@ -1940,7 +1947,16 @@ EXPORT_SYMBOL_GPL(regulator_enable);
 
 static int _regulator_do_disable(struct regulator_dev *rdev)
 {
-	int ret;
+	int ret, delay;
+
+	/* Query before disabling in case configuration dependent.  */
+	ret = _regulator_get_disable_time(rdev);
+	if (ret >= 0) {
+		delay = ret;
+	} else {
+		rdev_warn(rdev, "disable_time() failed: %d\n", ret);
+		delay = 0;
+	}
 
 	trace_regulator_disable(rdev_get_name(rdev));
 
@@ -1964,6 +1980,18 @@ static int _regulator_do_disable(struct regulator_dev *rdev)
 	if (rdev->desc->off_on_delay)
 		rdev->last_off_jiffy = jiffies;
 
+	/* Allow the regulator to ramp; it would be useful to extend
+	 * this for bulk operations so that the regulators can ramp
+	 * together.  */
+	trace_regulator_disable_delay(rdev_get_name(rdev));
+
+	if (delay >= 1000) {
+		mdelay(delay / 1000);
+		udelay(delay % 1000);
+	} else if (delay) {
+		udelay(delay);
+	}
+
 	trace_regulator_disable_complete(rdev_get_name(rdev));
 
 	return 0;
@@ -2414,6 +2442,38 @@ int regulator_is_supported_voltage(struct regulator *regulator,
 }
 EXPORT_SYMBOL_GPL(regulator_is_supported_voltage);
 
+/**
+ * regulator_get_max_support_voltage - standard get_max_supporting_volt()
+ *
+ * @rdev: Regulator to operate on
+ *
+ * This function returns maximum supporting voltage of given regulator.
+ * When one regulator buck (or ldo) is shared between multiple consumers,
+ * any consumer can get maximum supporting voltage from this function,
+ * lust like sysfs supports max_uV.
+ */
+int regulator_get_max_support_voltage(struct regulator *regulator)
+{
+	return regulator->rdev->constraints->max_uV;
+}
+EXPORT_SYMBOL_GPL(regulator_get_max_support_voltage);
+
+/**
+ * regulator_get_min_support_voltage - standard get_min_supporting_volt()
+ *
+ * @rdev: Regulator to operate on
+ *
+ * This function returns minimum supporting voltage of given regulator.
+ * When one regulator buck (or ldo) is shared between multiple consumers,
+ * any consumer can get minimum supporting voltage from this function,
+ * lust like sysfs supports min_uV.
+ */
+int regulator_get_min_support_voltage(struct regulator *regulator)
+{
+	return regulator->rdev->constraints->min_uV;
+}
+EXPORT_SYMBOL_GPL(regulator_get_min_support_voltage);
+
 static int _regulator_call_set_voltage(struct regulator_dev *rdev,
 				       int min_uV, int max_uV,
 				       unsigned *selector)
@@ -2634,6 +2694,10 @@ int regulator_set_voltage(struct regulator *regulator, int min_uV, int max_uV)
 	regulator->min_uV = min_uV;
 	regulator->max_uV = max_uV;
 
+	if ((rdev->open_count < rdev->constraints->expected_consumer)
+			&& rdev->constraints->expected_consumer)
+		goto out;
+
 	ret = regulator_check_consumers(rdev, &min_uV, &max_uV);
 	if (ret < 0)
 		goto out2;
