diff --git a/drivers/iio/adc/exynos_adc.c b/drivers/iio/adc/exynos_adc.c
index 43620fd4c66a..d60c218fe01a 100644
--- a/drivers/iio/adc/exynos_adc.c
+++ b/drivers/iio/adc/exynos_adc.c
@@ -40,6 +40,8 @@
 #include <linux/iio/machine.h>
 #include <linux/iio/driver.h>
 
+#include <soc/samsung/exynos-powermode.h>
+
 /* S3C/EXYNOS4412/5250 ADC_V1 registers definitions */
 #define ADC_V1_CON(x)		((x) + 0x00)
 #define ADC_V1_DLY(x)		((x) + 0x08)
@@ -58,6 +60,11 @@
 #define ADC_V2_INT_ST(x)	((x) + 0x14)
 #define ADC_V2_VER(x)		((x) + 0x20)
 
+/* Sharing ADC_V3 registers definitions */
+#define ADC_V3_DAT(x)		((x) + 0x08)
+#define ADC_V3_DAT_SUM(x)	((x) + 0x0C)
+#define ADC_V3_DBG_DATA(x)	((x) + 0x1C)
+
 /* Bit definitions for ADC_V1 */
 #define ADC_V1_CON_RES		(1u << 16)
 #define ADC_V1_CON_PRSCEN	(1u << 14)
@@ -71,6 +78,7 @@
 
 /* Bit definitions for ADC_V2 */
 #define ADC_V2_CON1_SOFT_RESET	(1u << 2)
+#define ADC_V2_CON1_SOFT_NON_RESET	(1u << 1)
 
 #define ADC_V2_CON2_OSEL	(1u << 10)
 #define ADC_V2_CON2_ESEL	(1u << 9)
@@ -79,13 +87,16 @@
 #define ADC_V2_CON2_ACH_SEL(x)	(((x) & 0xF) << 0)
 #define ADC_V2_CON2_ACH_MASK	0xF
 
+/* Bit definitions for ADC_V3 */
+#define ADC_V3_DAT_FLAG		(1u << 31)
+
+#define MAX_ADC_V3_CHANNELS		8
 #define MAX_ADC_V2_CHANNELS		10
 #define MAX_ADC_V1_CHANNELS		8
 #define MAX_EXYNOS3250_ADC_CHANNELS	2
 
-/* Bit definitions common for ADC_V1 and ADC_V2 */
+/* Bit definitions common for ADC_V1, ADC_V2, ADC_V3 */
 #define ADC_CON_EN_START	(1u << 0)
-#define ADC_CON_EN_START_MASK	(0x3 << 0)
 #define ADC_DATX_MASK		0xFFF
 
 #define EXYNOS_ADC_TIMEOUT	(msecs_to_jiffies(100))
@@ -99,23 +110,25 @@ struct exynos_adc {
 	struct clk		*sclk;
 	unsigned int		irq;
 	struct regulator	*vdd;
+	bool needs_adc_phy;
 
 	struct completion	completion;
 
 	u32			value;
 	unsigned int            version;
+	int			idle_ip_index;
 };
 
 struct exynos_adc_data {
 	int num_channels;
 	bool needs_sclk;
-	bool needs_adc_phy;
 	u32 mask;
 
 	void (*init_hw)(struct exynos_adc *info);
 	void (*exit_hw)(struct exynos_adc *info);
 	void (*clear_irq)(struct exynos_adc *info);
 	void (*start_conv)(struct exynos_adc *info, unsigned long addr);
+	irqreturn_t (*adc_isr)(int irq, void *dev_id);
 };
 
 static void exynos_adc_unprepare_clk(struct exynos_adc *info)
@@ -178,13 +191,49 @@ static int exynos_adc_enable_clk(struct exynos_adc *info)
 	return 0;
 }
 
-static void exynos_adc_v1_init_hw(struct exynos_adc *info)
+static int exynos_adc_enable_access(struct exynos_adc *info)
 {
-	u32 con1;
+	int ret;
 
-	if (info->data->needs_adc_phy)
+	exynos_update_ip_idle_status(info->idle_ip_index, 0);
+	if (info->needs_adc_phy)
 		writel(1, info->enable_reg);
 
+	if (info->vdd) {
+		ret = regulator_enable(info->vdd);
+		if (ret)
+			goto err;
+	}
+	ret = exynos_adc_prepare_clk(info);
+	if (ret)
+		goto err;
+
+	ret = exynos_adc_enable_clk(info);
+	if (ret)
+		goto err;
+
+	return 0;
+err:
+	exynos_update_ip_idle_status(info->idle_ip_index, 1);
+	return ret;
+}
+
+static void exynos_adc_disable_access(struct exynos_adc *info)
+{
+	exynos_adc_disable_clk(info);
+	exynos_adc_unprepare_clk(info);
+	if (info->vdd)
+		regulator_disable(info->vdd);
+
+	if (info->needs_adc_phy)
+		writel(0, info->enable_reg);
+	exynos_update_ip_idle_status(info->idle_ip_index, 1);
+}
+
+static void exynos_adc_v1_init_hw(struct exynos_adc *info)
+{
+	u32 con1;
+
 	/* set default prescaler values and Enable prescaler */
 	con1 =  ADC_V1_CON_PRSCLV(49) | ADC_V1_CON_PRSCEN;
 
@@ -197,9 +246,6 @@ static void exynos_adc_v1_exit_hw(struct exynos_adc *info)
 {
 	u32 con;
 
-	if (info->data->needs_adc_phy)
-		writel(0, info->enable_reg);
-
 	con = readl(ADC_V1_CON(info->regs));
 	con |= ADC_V1_CON_STANDBY;
 	writel(con, ADC_V1_CON(info->regs));
@@ -221,15 +267,32 @@ static void exynos_adc_v1_start_conv(struct exynos_adc *info,
 	writel(con1 | ADC_CON_EN_START, ADC_V1_CON(info->regs));
 }
 
+static irqreturn_t exynos_adc_v1_isr(int irq, void *dev_id)
+{
+	struct exynos_adc *info = (struct exynos_adc *)dev_id;
+	u32 mask = info->data->mask;
+
+	/* Read value */
+	info->value = readl(ADC_V1_DATX(info->regs)) & mask;
+
+	/* clear irq */
+	if (info->data->clear_irq)
+		info->data->clear_irq(info);
+
+	complete(&info->completion);
+
+	return IRQ_HANDLED;
+}
+
 static const struct exynos_adc_data exynos_adc_v1_data = {
 	.num_channels	= MAX_ADC_V1_CHANNELS,
 	.mask		= ADC_DATX_MASK,	/* 12 bit ADC resolution */
-	.needs_adc_phy	= true,
 
 	.init_hw	= exynos_adc_v1_init_hw,
 	.exit_hw	= exynos_adc_v1_exit_hw,
 	.clear_irq	= exynos_adc_v1_clear_irq,
 	.start_conv	= exynos_adc_v1_start_conv,
+	.adc_isr	= exynos_adc_v1_isr,
 };
 
 static void exynos_adc_s3c2416_start_conv(struct exynos_adc *info,
@@ -256,6 +319,7 @@ static struct exynos_adc_data const exynos_adc_s3c2416_data = {
 	.init_hw	= exynos_adc_v1_init_hw,
 	.exit_hw	= exynos_adc_v1_exit_hw,
 	.start_conv	= exynos_adc_s3c2416_start_conv,
+	.adc_isr	= exynos_adc_v1_isr,
 };
 
 static void exynos_adc_s3c2443_start_conv(struct exynos_adc *info,
@@ -277,6 +341,7 @@ static struct exynos_adc_data const exynos_adc_s3c2443_data = {
 	.init_hw	= exynos_adc_v1_init_hw,
 	.exit_hw	= exynos_adc_v1_exit_hw,
 	.start_conv	= exynos_adc_s3c2443_start_conv,
+	.adc_isr	= exynos_adc_v1_isr,
 };
 
 static void exynos_adc_s3c64xx_start_conv(struct exynos_adc *info,
@@ -297,6 +362,7 @@ static struct exynos_adc_data const exynos_adc_s3c24xx_data = {
 	.init_hw	= exynos_adc_v1_init_hw,
 	.exit_hw	= exynos_adc_v1_exit_hw,
 	.start_conv	= exynos_adc_s3c64xx_start_conv,
+	.adc_isr	= exynos_adc_v1_isr,
 };
 
 static struct exynos_adc_data const exynos_adc_s3c64xx_data = {
@@ -307,20 +373,18 @@ static struct exynos_adc_data const exynos_adc_s3c64xx_data = {
 	.exit_hw	= exynos_adc_v1_exit_hw,
 	.clear_irq	= exynos_adc_v1_clear_irq,
 	.start_conv	= exynos_adc_s3c64xx_start_conv,
+	.adc_isr	= exynos_adc_v1_isr,
 };
 
 static void exynos_adc_v2_init_hw(struct exynos_adc *info)
 {
 	u32 con1, con2;
 
-	if (info->data->needs_adc_phy)
-		writel(1, info->enable_reg);
-
 	con1 = ADC_V2_CON1_SOFT_RESET;
 	writel(con1, ADC_V2_CON1(info->regs));
 
 	con2 = ADC_V2_CON2_OSEL | ADC_V2_CON2_ESEL |
-		ADC_V2_CON2_HIGHF | ADC_V2_CON2_C_TIME(0);
+		ADC_V2_CON2_HIGHF | ADC_V2_CON2_C_TIME(6);
 	writel(con2, ADC_V2_CON2(info->regs));
 
 	/* Enable interrupts */
@@ -329,14 +393,15 @@ static void exynos_adc_v2_init_hw(struct exynos_adc *info)
 
 static void exynos_adc_v2_exit_hw(struct exynos_adc *info)
 {
-	u32 con;
+	u32 con2;
 
-	if (info->data->needs_adc_phy)
-		writel(0, info->enable_reg);
+	con2 = readl(ADC_V2_CON2(info->regs));
+	con2 &= ~(ADC_V2_CON2_OSEL | ADC_V2_CON2_ESEL |
+		ADC_V2_CON2_HIGHF | ADC_V2_CON2_C_TIME(7));
+	writel(con2, ADC_V2_CON2(info->regs));
 
-	con = readl(ADC_V2_CON1(info->regs));
-	con &= ~ADC_CON_EN_START;
-	writel(con, ADC_V2_CON1(info->regs));
+	/* Disable interrupts */
+	writel(0, ADC_V2_INT_EN(info->regs));
 }
 
 static void exynos_adc_v2_clear_irq(struct exynos_adc *info)
@@ -361,24 +426,81 @@ static void exynos_adc_v2_start_conv(struct exynos_adc *info,
 static const struct exynos_adc_data exynos_adc_v2_data = {
 	.num_channels	= MAX_ADC_V2_CHANNELS,
 	.mask		= ADC_DATX_MASK, /* 12 bit ADC resolution */
-	.needs_adc_phy	= true,
 
 	.init_hw	= exynos_adc_v2_init_hw,
 	.exit_hw	= exynos_adc_v2_exit_hw,
 	.clear_irq	= exynos_adc_v2_clear_irq,
 	.start_conv	= exynos_adc_v2_start_conv,
+	.adc_isr	= exynos_adc_v1_isr,
 };
 
 static const struct exynos_adc_data exynos3250_adc_data = {
 	.num_channels	= MAX_EXYNOS3250_ADC_CHANNELS,
 	.mask		= ADC_DATX_MASK, /* 12 bit ADC resolution */
 	.needs_sclk	= true,
-	.needs_adc_phy	= true,
 
 	.init_hw	= exynos_adc_v2_init_hw,
 	.exit_hw	= exynos_adc_v2_exit_hw,
 	.clear_irq	= exynos_adc_v2_clear_irq,
 	.start_conv	= exynos_adc_v2_start_conv,
+	.adc_isr	= exynos_adc_v1_isr,
+};
+
+static void exynos_adc_v3_init_hw(struct exynos_adc *info)
+{
+	u32 con1, con2;
+
+	con1 = ADC_V2_CON1_SOFT_RESET;
+	writel(con1, ADC_V2_CON1(info->regs));
+
+	con1 = ADC_V2_CON1_SOFT_NON_RESET;
+	writel(con1, ADC_V2_CON1(info->regs));
+
+	con2 = ADC_V2_CON2_C_TIME(6);
+	writel(con2, ADC_V2_CON2(info->regs));
+
+	/* Enable interrupts */
+	writel(1, ADC_V2_INT_EN(info->regs));
+}
+
+static void exynos_adc_v3_exit_hw(struct exynos_adc *info)
+{
+	u32 con2;
+
+	con2 = readl(ADC_V2_CON2(info->regs));
+	con2 &= ~ADC_V2_CON2_C_TIME(7);
+	writel(con2, ADC_V2_CON2(info->regs));
+
+	/* Disable interrupts */
+	writel(0, ADC_V2_INT_EN(info->regs));
+}
+
+static irqreturn_t exynos_adc_v3_isr(int irq, void *dev_id)
+{
+	struct exynos_adc *info = (struct exynos_adc *)dev_id;
+	u32 mask = info->data->mask;
+
+	/* Read value */
+	info->value = readl(ADC_V3_DAT(info->regs)) & mask;
+
+	/* clear irq */
+	if (info->data->clear_irq)
+		info->data->clear_irq(info);
+
+	complete(&info->completion);
+
+	return IRQ_HANDLED;
+}
+
+static const struct exynos_adc_data exynos_adc_v3_data = {
+	.num_channels	= MAX_ADC_V3_CHANNELS,
+	.mask		= ADC_DATX_MASK, /* 12 bit ADC resolution */
+
+	.init_hw	= exynos_adc_v3_init_hw,
+	.exit_hw	= exynos_adc_v3_exit_hw,
+	.clear_irq	= exynos_adc_v2_clear_irq,
+	.start_conv	= exynos_adc_v2_start_conv,
+	.adc_isr	= exynos_adc_v3_isr,
 };
 
 static const struct of_device_id exynos_adc_match[] = {
@@ -403,6 +525,9 @@ static const struct of_device_id exynos_adc_match[] = {
 	}, {
 		.compatible = "samsung,exynos-adc-v2",
 		.data = &exynos_adc_v2_data,
+	}, {
+		.compatible = "samsung,exynos-adc-v3",
+		.data = &exynos_adc_v3_data,
 	}, {
 		.compatible = "samsung,exynos3250-adc",
 		.data = &exynos3250_adc_data,
@@ -434,6 +559,15 @@ static int exynos_read_raw(struct iio_dev *indio_dev,
 
 	mutex_lock(&indio_dev->mlock);
 	reinit_completion(&info->completion);
+	ret = exynos_adc_enable_access(info);
+	if (ret) {
+		mutex_unlock(&indio_dev->mlock);
+		return ret;
+	}
+
+	enable_irq(info->irq);
+	if (info->data->init_hw)
+		info->data->init_hw(info);
 
 	/* Select the channel to be used and Trigger conversion */
 	if (info->data->start_conv)
@@ -443,8 +577,6 @@ static int exynos_read_raw(struct iio_dev *indio_dev,
 			(&info->completion, EXYNOS_ADC_TIMEOUT);
 	if (timeout == 0) {
 		dev_warn(&indio_dev->dev, "Conversion timed out! Resetting\n");
-		if (info->data->init_hw)
-			info->data->init_hw(info);
 		ret = -ETIMEDOUT;
 	} else {
 		*val = info->value;
@@ -452,39 +584,40 @@ static int exynos_read_raw(struct iio_dev *indio_dev,
 		ret = IIO_VAL_INT;
 	}
 
+	if (info->data->exit_hw)
+		info->data->exit_hw(info);
+
+	disable_irq(info->irq);
+	exynos_adc_disable_access(info);
+
 	mutex_unlock(&indio_dev->mlock);
 
 	return ret;
 }
 
-static irqreturn_t exynos_adc_isr(int irq, void *dev_id)
-{
-	struct exynos_adc *info = (struct exynos_adc *)dev_id;
-	u32 mask = info->data->mask;
-
-	/* Read value */
-	info->value = readl(ADC_V1_DATX(info->regs)) & mask;
-
-	/* clear irq */
-	if (info->data->clear_irq)
-		info->data->clear_irq(info);
-
-	complete(&info->completion);
-
-	return IRQ_HANDLED;
-}
 
 static int exynos_adc_reg_access(struct iio_dev *indio_dev,
 			      unsigned reg, unsigned writeval,
 			      unsigned *readval)
 {
 	struct exynos_adc *info = iio_priv(indio_dev);
+	int ret;
 
 	if (readval == NULL)
 		return -EINVAL;
 
+	mutex_lock(&indio_dev->mlock);
+	ret = exynos_adc_enable_access(info);
+	if (ret) {
+		mutex_unlock(&indio_dev->mlock);
+		return ret;
+	}
+
 	*readval = readl(info->regs + reg);
 
+	exynos_adc_disable_access(info);
+	mutex_unlock(&indio_dev->mlock);
+
 	return 0;
 }
 
@@ -551,13 +684,18 @@ static int exynos_adc_probe(struct platform_device *pdev)
 		return -EINVAL;
 	}
 
+	if (of_find_property(np, "samsung,adc-phy-control", NULL))
+		info->needs_adc_phy = true;
+	else
+		info->needs_adc_phy = false;
+
 	mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	info->regs = devm_ioremap_resource(&pdev->dev, mem);
 	if (IS_ERR(info->regs))
 		return PTR_ERR(info->regs);
 
 
-	if (info->data->needs_adc_phy) {
+	if (info->needs_adc_phy) {
 		mem = platform_get_resource(pdev, IORESOURCE_MEM, 1);
 		info->enable_reg = devm_ioremap_resource(&pdev->dev, mem);
 		if (IS_ERR(info->enable_reg))
@@ -572,10 +710,11 @@ static int exynos_adc_probe(struct platform_device *pdev)
 
 	info->irq = irq;
 	info->dev = &pdev->dev;
+	info->idle_ip_index = exynos_get_idle_ip_index(dev_name(&pdev->dev));
 
 	init_completion(&info->completion);
 
-	info->clk = devm_clk_get(&pdev->dev, "adc");
+	info->clk = devm_clk_get(&pdev->dev, "gate_adcif");
 	if (IS_ERR(info->clk)) {
 		dev_err(&pdev->dev, "failed getting clock, err = %ld\n",
 							PTR_ERR(info->clk));
@@ -596,13 +735,15 @@ static int exynos_adc_probe(struct platform_device *pdev)
 	if (IS_ERR(info->vdd)) {
 		dev_err(&pdev->dev, "failed getting regulator, err = %ld\n",
 							PTR_ERR(info->vdd));
-		return PTR_ERR(info->vdd);
+		info->vdd = NULL;
 	}
 
-	ret = regulator_enable(info->vdd);
-	if (ret)
-		return ret;
-
+	exynos_update_ip_idle_status(info->idle_ip_index, 0);
+	if (info->vdd) {
+		ret = regulator_enable(info->vdd);
+		if (ret)
+			return ret;
+	}
 	ret = exynos_adc_prepare_clk(info);
 	if (ret)
 		goto err_disable_reg;
@@ -621,7 +762,7 @@ static int exynos_adc_probe(struct platform_device *pdev)
 	indio_dev->channels = exynos_adc_iio_channels;
 	indio_dev->num_channels = info->data->num_channels;
 
-	ret = request_irq(info->irq, exynos_adc_isr,
+	ret = devm_request_irq(&pdev->dev, info->irq, info->data->adc_isr,
 					0, dev_name(&pdev->dev), info);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "failed requesting irq, irq = %d\n",
@@ -629,19 +770,25 @@ static int exynos_adc_probe(struct platform_device *pdev)
 		goto err_disable_clk;
 	}
 
+	disable_irq(info->irq);
+	exynos_adc_disable_clk(info);
+	exynos_adc_unprepare_clk(info);
+	if (info->vdd)
+		regulator_disable(info->vdd);
+	exynos_update_ip_idle_status(info->idle_ip_index, 1);
+
 	ret = iio_device_register(indio_dev);
 	if (ret)
 		goto err_irq;
 
-	if (info->data->init_hw)
-		info->data->init_hw(info);
-
 	ret = of_platform_populate(np, exynos_adc_match, NULL, &indio_dev->dev);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "failed adding child nodes\n");
 		goto err_of_populate;
 	}
 
+	dev_info(&pdev->dev, "Probed successfully driver.\n");
+
 	return 0;
 
 err_of_populate:
@@ -657,7 +804,8 @@ err_disable_clk:
 err_unprepare_clk:
 	exynos_adc_unprepare_clk(info);
 err_disable_reg:
-	regulator_disable(info->vdd);
+	if (info->vdd)
+		regulator_disable(info->vdd);
 	return ret;
 }
 
@@ -665,16 +813,20 @@ static int exynos_adc_remove(struct platform_device *pdev)
 {
 	struct iio_dev *indio_dev = platform_get_drvdata(pdev);
 	struct exynos_adc *info = iio_priv(indio_dev);
+	int ret;
 
 	device_for_each_child(&indio_dev->dev, NULL,
 				exynos_adc_remove_devices);
 	iio_device_unregister(indio_dev);
-	free_irq(info->irq, info);
+
+	ret = exynos_adc_enable_access(info);
+	if (ret)
+		return ret;
+
 	if (info->data->exit_hw)
 		info->data->exit_hw(info);
-	exynos_adc_disable_clk(info);
-	exynos_adc_unprepare_clk(info);
-	regulator_disable(info->vdd);
+
+	exynos_adc_disable_access(info);
 
 	return 0;
 }
@@ -684,11 +836,16 @@ static int exynos_adc_suspend(struct device *dev)
 {
 	struct iio_dev *indio_dev = dev_get_drvdata(dev);
 	struct exynos_adc *info = iio_priv(indio_dev);
+	int ret;
+
+	ret = exynos_adc_enable_access(info);
+	if (ret)
+		return ret;
 
 	if (info->data->exit_hw)
 		info->data->exit_hw(info);
-	exynos_adc_disable_clk(info);
-	regulator_disable(info->vdd);
+
+	exynos_adc_disable_access(info);
 
 	return 0;
 }
@@ -699,17 +856,15 @@ static int exynos_adc_resume(struct device *dev)
 	struct exynos_adc *info = iio_priv(indio_dev);
 	int ret;
 
-	ret = regulator_enable(info->vdd);
-	if (ret)
-		return ret;
-
-	ret = exynos_adc_enable_clk(info);
+	ret = exynos_adc_enable_access(info);
 	if (ret)
 		return ret;
 
 	if (info->data->init_hw)
 		info->data->init_hw(info);
 
+	exynos_adc_disable_access(info);
+
 	return 0;
 }
 #endif
@@ -724,7 +879,6 @@ static struct platform_driver exynos_adc_driver = {
 	.driver		= {
 		.name	= "exynos-adc",
 		.of_match_table = exynos_adc_match,
-		.pm	= &exynos_adc_pm_ops,
 	},
 };
 
