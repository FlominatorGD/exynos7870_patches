diff --git a/drivers/scsi/scsi_lib_dma.c b/drivers/scsi/scsi_lib_dma.c
index 2ac3f3975f78..6751fbfa1fe8 100644
--- a/drivers/scsi/scsi_lib_dma.c
+++ b/drivers/scsi/scsi_lib_dma.c
@@ -12,6 +12,8 @@
 #include <scsi/scsi_device.h>
 #include <scsi/scsi_host.h>
 
+static struct dma_attrs scsi_direct_attrs;
+
 /**
  * scsi_dma_map - perform DMA mapping against command's sg lists
  * @cmd:	scsi command
@@ -22,12 +24,15 @@
 int scsi_dma_map(struct scsi_cmnd *cmd)
 {
 	int nseg = 0;
+	struct dma_attrs *attrs = &scsi_direct_attrs;
 
 	if (scsi_sg_count(cmd)) {
 		struct device *dev = cmd->device->host->dma_dev;
 
-		nseg = dma_map_sg(dev, scsi_sglist(cmd), scsi_sg_count(cmd),
-				  cmd->sc_data_direction);
+		if (dma_get_attr(DMA_ATTR_SKIP_CPU_SYNC, attrs))
+			attrs = (cmd->request->cmd_flags & REQ_KERNEL) ?
+				&scsi_direct_attrs : NULL;
+		nseg = dma_map_sg_attr(dev, scsi_sglist(cmd),scsi_sg_count(cmd), cmd->sc_data_direction, attrs);
 		if (unlikely(!nseg))
 			return -ENOMEM;
 	}
@@ -49,3 +54,13 @@ void scsi_dma_unmap(struct scsi_cmnd *cmd)
 	}
 }
 EXPORT_SYMBOL(scsi_dma_unmap);
+
+/**
+ * scsi_dma_set_skip_cpu_sync - skip operations for cache coherency
+ */
+void scsi_dma_set_skip_cpu_sync(void)
+{
+	init_dma_attrs(&scsi_direct_attrs);
+	dma_set_attr(DMA_ATTR_SKIP_CPU_SYNC, &scsi_direct_attrs);
+}
+EXPORT_SYMBOL(scsi_dma_set_skip_cpu_sync);
