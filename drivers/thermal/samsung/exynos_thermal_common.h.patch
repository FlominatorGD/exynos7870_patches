diff --git a/drivers/thermal/samsung/exynos_thermal_common.h b/drivers/thermal/samsung/exynos_thermal_common.h
index 158f5aa8dc5d..aa1afccebc0d 100644
--- a/drivers/thermal/samsung/exynos_thermal_common.h
+++ b/drivers/thermal/samsung/exynos_thermal_common.h
@@ -23,14 +23,16 @@
 #ifndef _EXYNOS_THERMAL_COMMON_H
 #define _EXYNOS_THERMAL_COMMON_H
 
+#include <linux/types.h>
+
 /* In-kernel thermal framework related macros & definations */
 #define SENSOR_NAME_LEN	16
 #define MAX_TRIP_COUNT	8
 #define MAX_COOLING_DEVICE 4
 #define MAX_TRIMINFO_CTRL_REG	2
 
-#define ACTIVE_INTERVAL 500
-#define IDLE_INTERVAL 10000
+#define ACTIVE_INTERVAL 300
+#define IDLE_INTERVAL 	500
 #define MCELSIUS	1000
 
 /* CPU Zone information */
@@ -42,6 +44,10 @@
 #define GET_ZONE(trip) (trip + 2)
 #define GET_TRIP(zone) (zone - 2)
 
+/* Bit type */
+#define TYPE_8BIT_MASK	(0xFF)
+#define TYPE_9BIT_MASK	(0x1FF)
+
 enum trigger_type {
 	THROTTLE_ACTIVE = 1,
 	THROTTLE_PASSIVE,
@@ -49,6 +55,13 @@ enum trigger_type {
 	HW_TRIP,
 };
 
+enum dev_type {
+	CLUSTER0,
+	CLUSTER1,
+	GPU,
+	ISP,
+};
+
 /**
  * struct freq_clip_table
  * @freq_clip_max: maximum frequency allowed for this cooling state.
@@ -86,6 +99,12 @@ struct thermal_sensor_conf {
 	void *driver_data;
 	void *pzone_data;
 	struct device *dev;
+	enum dev_type d_type;
+	int id;
+	bool hotplug_enable;
+	int count;
+	int hotplug_in_threshold;
+	int hotplug_out_threshold;
 };
 
 /*Functions used exynos based thermal sensor driver*/
