diff --git a/drivers/thermal/thermal_core.c b/drivers/thermal/thermal_core.c
index a55c8b3f0029..b675b163ea9a 100644
--- a/drivers/thermal/thermal_core.c
+++ b/drivers/thermal/thermal_core.c
@@ -60,6 +60,14 @@ static LIST_HEAD(thermal_governor_list);
 static DEFINE_MUTEX(thermal_list_lock);
 static DEFINE_MUTEX(thermal_governor_lock);
 
+#ifdef CONFIG_SCHED_MC
+#define BOUNDED_CPU		1
+static void start_poll_queue(struct thermal_zone_device *tz, int delay)
+{
+	mod_delayed_work_on(tz->poll_queue_cpu, system_freezable_wq, &tz->poll_queue,
+			msecs_to_jiffies(delay));
+}
+#endif
 static atomic_t in_suspend;
 
 static struct thermal_governor *def_governor;
@@ -333,11 +341,19 @@ static void thermal_zone_device_set_polling(struct thermal_zone_device *tz,
 					    int delay)
 {
 	if (delay > 1000)
+#ifdef CONFIG_SCHED_MC
+		start_poll_queue(tz, delay);
+#else
 		mod_delayed_work(system_freezable_wq, &tz->poll_queue,
 				 round_jiffies(msecs_to_jiffies(delay)));
+#endif
 	else if (delay)
+#ifdef CONFIG_SCHED_MC
+		start_poll_queue(tz, delay);
+#else
 		mod_delayed_work(system_freezable_wq, &tz->poll_queue,
 				 msecs_to_jiffies(delay));
+#endif
 	else
 		cancel_delayed_work(&tz->poll_queue);
 }
@@ -547,6 +563,32 @@ temp_show(struct device *dev, struct device_attribute *attr, char *buf)
 	return sprintf(buf, "%ld\n", temperature);
 }
 
+#ifdef CONFIG_SEC_PM
+static ssize_t
+curr_temp_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	struct thermal_zone_device *tz;
+	long temperature;
+	int ret;
+	int len = 0;
+	int cnt = 0;
+
+	list_for_each_entry(tz, &thermal_tz_list, node) {
+		if (cnt > 0)
+			len += sprintf(&buf[len], ",");
+		ret = thermal_zone_get_temp(tz, &temperature);
+		if (ret)
+			len += sprintf(&buf[len], "-1");
+		else
+			len += sprintf(&buf[len], "%ld", temperature / 1000);
+		cnt++;
+	}
+	len += sprintf(&buf[len], "\n");
+
+	return len; 
+}
+#endif
+
 static ssize_t
 mode_show(struct device *dev, struct device_attribute *attr, char *buf)
 {
@@ -835,6 +877,9 @@ static DEVICE_ATTR(temp, 0444, temp_show, NULL);
 static DEVICE_ATTR(mode, 0644, mode_show, mode_store);
 static DEVICE_ATTR(passive, S_IRUGO | S_IWUSR, passive_show, passive_store);
 static DEVICE_ATTR(policy, S_IRUGO | S_IWUSR, policy_show, policy_store);
+#ifdef CONFIG_SEC_PM
+static DEVICE_ATTR(curr_temp, 0444, curr_temp_show, NULL);
+#endif
 
 /* sys I/F for cooling device */
 #define to_cooling_device(_dev)	\
@@ -1526,6 +1571,9 @@ struct thermal_zone_device *thermal_zone_device_register(const char *type,
 	tz->trips = trips;
 	tz->passive_delay = passive_delay;
 	tz->polling_delay = polling_delay;
+#ifdef CONFIG_SCHED_MC
+	tz->poll_queue_cpu = BOUNDED_CPU;
+#endif
 	/* A new thermal zone needs to be updated anyway. */
 	atomic_set(&tz->need_update, 1);
 
@@ -1548,6 +1596,12 @@ struct thermal_zone_device *thermal_zone_device_register(const char *type,
 	if (result)
 		goto unregister;
 
+#ifdef CONFIG_SEC_PM
+	result = device_create_file(&tz->device, &dev_attr_curr_temp);
+	if (result)
+		goto unregister;
+#endif
+
 	if (ops->get_mode) {
 		result = device_create_file(&tz->device, &dev_attr_mode);
 		if (result)
@@ -1855,6 +1909,40 @@ static void thermal_unregister_governors(void)
 	thermal_gov_user_space_unregister();
 }
 
+#ifdef CONFIG_SCHED_MC
+static int __cpuinit thermal_cpu_callback(struct notifier_block *nfb,
+					unsigned long action, void *hcpu)
+{
+	unsigned int cpu = (unsigned long)hcpu;
+	struct thermal_zone_device *pos;
+
+	switch (action) {
+	case CPU_ONLINE:
+		if (cpu == BOUNDED_CPU) {
+			list_for_each_entry(pos, &thermal_tz_list, node) {
+				pos->poll_queue_cpu = BOUNDED_CPU;
+				start_poll_queue(pos, pos->polling_delay);
+			}
+		}
+		break;
+	case CPU_DOWN_PREPARE:
+		list_for_each_entry(pos, &thermal_tz_list, node) {
+			if (pos->poll_queue_cpu == cpu) {
+				pos->poll_queue_cpu = 0;
+				start_poll_queue(pos, pos->polling_delay);
+			}
+		}
+		break;
+	}
+	return NOTIFY_OK;
+}
+
+static struct notifier_block __cpuinitdata thermal_cpu_notifier =
+{
+	.notifier_call = thermal_cpu_callback,
+};
+#endif
+
 static int thermal_pm_notify(struct notifier_block *nb,
 				unsigned long mode, void *_unused)
 {
@@ -1878,11 +1966,12 @@ static int thermal_pm_notify(struct notifier_block *nb,
 	default:
 		break;
 	}
+
 	return 0;
 }
 
 static struct notifier_block thermal_pm_nb = {
-	.notifier_call = thermal_pm_notify,
+       .notifier_call = thermal_pm_notify,
 };
 
 static int __init thermal_init(void)
@@ -1905,10 +1994,9 @@ static int __init thermal_init(void)
 	if (result)
 		goto exit_netlink;
 
-	result = register_pm_notifier(&thermal_pm_nb);
-	if (result)
-		pr_warn("Thermal: Can not register suspend notifier, return %d\n",
-			result);
+#ifdef CONFIG_SCHED_MC
+	register_hotcpu_notifier(&thermal_cpu_notifier);
+#endif
 
 	return 0;
 
