diff --git a/drivers/net/ppp/pppopns.c b/drivers/net/ppp/pppopns.c
index dc15f978c922..81b8368274d3 100644
--- a/drivers/net/ppp/pppopns.c
+++ b/drivers/net/ppp/pppopns.c
@@ -37,7 +37,7 @@
 #include <asm/uaccess.h>
 
 #define GRE_HEADER_SIZE		8
-
+#define SC_GRE_SEQ_CHK  0x00008000  
 #define PPTP_GRE_BITS		htons(0x2001)
 #define PPTP_GRE_BITS_MASK	htons(0xEF7F)
 #define PPTP_GRE_SEQ_BIT	htons(0x1000)
@@ -65,6 +65,62 @@ static inline struct meta *skb_meta(struct sk_buff *skb)
 	return (struct meta *)skb->cb;
 }
 
+static void recv_queue_timer_callback(unsigned long data);
+static void traverse_receive_queue(struct sock *sk)
+{
+	struct pppox_sock *po = pppox_sk(sk);
+	struct pppopns_opt *opt = &pppox_sk(sk)->proto.pns;
+
+	struct sk_buff *skb;
+	struct sk_buff *skb1;
+	struct meta *meta;
+	__u32 now = jiffies;	
+
+	/* Remove packets from receive queue as long as
+	 * 1. the receive buffer is full,
+	 * 2. they are queued longer than one second, or
+	 * 3. there are no missing packets before them. */
+	skb_queue_walk_safe(&sk->sk_receive_queue, skb, skb1) {
+		meta = skb_meta(skb);
+		if (atomic_read(&sk->sk_rmem_alloc) < sk->sk_rcvbuf &&
+		    now - meta->timestamp < (HZ - 5) &&
+		    meta->sequence != opt->recv_sequence)
+		  break;
+		skb_unlink(skb, &sk->sk_receive_queue);
+		opt->recv_sequence = meta->sequence + 1;
+		skb_orphan(skb);
+		ppp_input(&po->chan, skb);
+	}
+	
+	if (skb_queue_len(&sk->sk_receive_queue) > 0) {
+		/* Start the timer. The timer will
+		   expire after one second. When the 
+		   timer expires, the receive_queue is 
+		   checked and all packets older than 
+		   one second are removed from the queue and
+		   passed forward. */
+	  	if (timer_pending(&po->recv_queue_timer)) {
+	        	/* Something is wrong. Recv timer is already active. However, Ignoring...*/
+		} else {	  
+			init_timer(&po->recv_queue_timer);
+			po->recv_queue_timer.data = (unsigned long)sk;
+			po->recv_queue_timer.function = recv_queue_timer_callback;
+			po->recv_queue_timer.expires = now + HZ;
+			add_timer(&po->recv_queue_timer);
+		}
+	}
+}
+
+static void recv_queue_timer_callback(unsigned long data)
+{
+  struct sock *sk = (struct sock *)data;
+  unsigned long flags;
+
+  spin_lock_irqsave(&pppox_sk(sk)->recv_queue_lock, flags);
+  traverse_receive_queue(sk);
+  spin_unlock_irqrestore(&pppox_sk(sk)->recv_queue_lock, flags);
+}
+
 /******************************************************************************/
 
 static int pppopns_recv_core(struct sock *sk_raw, struct sk_buff *skb)
@@ -74,6 +130,7 @@ static int pppopns_recv_core(struct sock *sk_raw, struct sk_buff *skb)
 	struct meta *meta = skb_meta(skb);
 	__u32 now = jiffies;
 	struct header *hdr;
+    unsigned long flags;
 
 	/* Skip transport header */
 	skb_pull(skb, skb_transport_header(skb) - skb->data);
@@ -122,13 +179,21 @@ static int pppopns_recv_core(struct sock *sk_raw, struct sk_buff *skb)
 	if (hdr->bits & PPTP_GRE_SEQ_BIT) {
 		struct sk_buff *skb1;
 
+		if (timer_pending(&pppox_sk(sk)->recv_queue_timer)) {
+			del_timer_sync(&pppox_sk(sk)->recv_queue_timer);
+		}
+
+		spin_lock_irqsave(&pppox_sk(sk)->recv_queue_lock, flags);
+
 		/* Insert the packet into receive queue in order. */
 		skb_set_owner_r(skb, sk);
 		skb_queue_walk(&sk->sk_receive_queue, skb1) {
 			struct meta *meta1 = skb_meta(skb1);
 			__s32 order = meta->sequence - meta1->sequence;
-			if (order == 0)
+			if (order == 0) {
+				spin_unlock_irqrestore(&pppox_sk(sk)->recv_queue_lock, flags);
 				goto drop;
+			}
 			if (order < 0) {
 				meta->timestamp = meta1->timestamp;
 				skb_insert(skb1, skb, &sk->sk_receive_queue);
@@ -140,22 +205,9 @@ static int pppopns_recv_core(struct sock *sk_raw, struct sk_buff *skb)
 			meta->timestamp = now;
 			skb_queue_tail(&sk->sk_receive_queue, skb);
 		}
-
-		/* Remove packets from receive queue as long as
-		 * 1. the receive buffer is full,
-		 * 2. they are queued longer than one second, or
-		 * 3. there are no missing packets before them. */
-		skb_queue_walk_safe(&sk->sk_receive_queue, skb, skb1) {
-			meta = skb_meta(skb);
-			if (atomic_read(&sk->sk_rmem_alloc) < sk->sk_rcvbuf &&
-					now - meta->timestamp < HZ &&
-					meta->sequence != opt->recv_sequence)
-				break;
-			skb_unlink(skb, &sk->sk_receive_queue);
-			opt->recv_sequence = meta->sequence + 1;
-			skb_orphan(skb);
-			ppp_input(&pppox_sk(sk)->chan, skb);
-		}
+		
+		traverse_receive_queue(sk);
+		spin_unlock_irqrestore(&pppox_sk(sk)->recv_queue_lock, flags);
 		return NET_RX_SUCCESS;
 	}
 
@@ -293,7 +345,7 @@ static int pppopns_connect(struct socket *sock, struct sockaddr *useraddr,
 	po->chan.mtu = PPP_MRU - 80;
 	po->proto.pns.local = addr->local;
 	po->proto.pns.remote = addr->remote;
-	po->proto.pns.data_ready = sk_raw->sk_data_ready;
+	po->proto.pns.data_ready = (void *)sk_raw->sk_data_ready;
 	po->proto.pns.backlog_rcv = sk_raw->sk_backlog_rcv;
 
 	error = ppp_register_channel(&po->chan);
@@ -302,7 +354,7 @@ static int pppopns_connect(struct socket *sock, struct sockaddr *useraddr,
 
 	sk->sk_state = PPPOX_CONNECTED;
 	lock_sock(sk_raw);
-	sk_raw->sk_data_ready = pppopns_recv;
+	sk_raw->sk_data_ready = (void *)pppopns_recv;
 	sk_raw->sk_backlog_rcv = pppopns_recv_core;
 	sk_raw->sk_user_data = sk;
 	release_sock(sk_raw);
@@ -318,6 +370,8 @@ out:
 static int pppopns_release(struct socket *sock)
 {
 	struct sock *sk = sock->sk;
+	struct pppox_sock *po = pppox_sk(sk);
+    unsigned long flags;
 
 	if (!sk)
 		return 0;
@@ -328,12 +382,20 @@ static int pppopns_release(struct socket *sock)
 		return -EBADF;
 	}
 
+	if (po) {
+		spin_lock_irqsave(&po->recv_queue_lock, flags);
+		if (po && timer_pending( &po->recv_queue_timer )) {	    
+			del_timer_sync( &po->recv_queue_timer );
+		}
+		spin_unlock_irqrestore(&po->recv_queue_lock, flags);
+	}
+
 	if (sk->sk_state != PPPOX_NONE) {
 		struct sock *sk_raw = (struct sock *)pppox_sk(sk)->chan.private;
 		lock_sock(sk_raw);
 		skb_queue_purge(&sk->sk_receive_queue);
 		pppox_unbind_sock(sk);
-		sk_raw->sk_data_ready = pppox_sk(sk)->proto.pns.data_ready;
+		sk_raw->sk_data_ready = (void *)pppox_sk(sk)->proto.pns.data_ready;
 		sk_raw->sk_backlog_rcv = pppox_sk(sk)->proto.pns.backlog_rcv;
 		sk_raw->sk_user_data = NULL;
 		release_sock(sk_raw);
@@ -378,6 +440,8 @@ static struct proto_ops pppopns_proto_ops = {
 static int pppopns_create(struct net *net, struct socket *sock)
 {
 	struct sock *sk;
+	struct pppox_sock *po;
+	struct pppopns_opt *opt;
 
 	sk = sk_alloc(net, PF_PPPOX, GFP_KERNEL, &pppopns_proto);
 	if (!sk)
@@ -388,13 +452,51 @@ static int pppopns_create(struct net *net, struct socket *sock)
 	sock->ops = &pppopns_proto_ops;
 	sk->sk_protocol = PX_PROTO_OPNS;
 	sk->sk_state = PPPOX_NONE;
+
+	po = pppox_sk(sk);
+	opt = &po->proto.pns;
+	opt->ppp_flags = SC_GRE_SEQ_CHK;
+	init_timer(&po->recv_queue_timer);
+	spin_lock_init(&po->recv_queue_lock);
+
 	return 0;
 }
 
+static int pppopns_ioctl(struct socket *sock, unsigned int cmd, unsigned long arg)
+{
+
+        struct sock *sk = sock->sk;
+	struct pppox_sock *po = pppox_sk(sk);
+	struct pppopns_opt *opt = &po->proto.pns;
+	void __user *argp = (void __user *)arg;
+	int __user *p = argp;
+	int err = -ENOTTY, val;
+
+	switch (cmd) {
+	case PPPIOCGFLAGS:
+		printk("Getting pppopns socket flags.\n");
+		val = opt->ppp_flags;
+		if (put_user(val, p))
+			break;
+		err = 0;
+		break;
+	case PPPIOCSFLAGS:
+		printk("Setting pppopns socket flags.\n");
+		if (get_user(val, p))
+			break;
+		opt->ppp_flags = val;
+		err = 0;
+		break;
+	}
+       
+	return err;
+}
+
 /******************************************************************************/
 
 static struct pppox_proto pppopns_pppox_proto = {
 	.create = pppopns_create,
+	.ioctl = pppopns_ioctl,
 	.owner = THIS_MODULE,
 };
 
