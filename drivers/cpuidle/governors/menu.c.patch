diff --git a/drivers/cpuidle/governors/menu.c b/drivers/cpuidle/governors/menu.c
index 386261afe2dd..6091b8b4b85d 100644
--- a/drivers/cpuidle/governors/menu.c
+++ b/drivers/cpuidle/governors/menu.c
@@ -292,6 +292,10 @@ again:
  * @drv: cpuidle driver containing state data
  * @dev: the CPU
  */
+#ifdef CONFIG_SEC_PHCOMP
+extern int get_phcomp_idle_time_threshold(void);
+extern void trigger_phcompd(int cpu);
+#endif
 static int menu_select(struct cpuidle_driver *drv, struct cpuidle_device *dev)
 {
 	struct menu_device *data = this_cpu_ptr(&menu_devices);
@@ -299,6 +303,9 @@ static int menu_select(struct cpuidle_driver *drv, struct cpuidle_device *dev)
 	int i;
 	unsigned int interactivity_req;
 	unsigned long nr_iowaiters, cpu_load;
+#ifdef CONFIG_SEC_PHCOMP
+	int cpu = smp_processor_id();
+#endif	
 
 	if (data->needs_update) {
 		menu_update(drv, dev);
@@ -322,9 +329,12 @@ static int menu_select(struct cpuidle_driver *drv, struct cpuidle_device *dev)
 	 * operands are 32 bits.
 	 * Make sure to round up for half microseconds.
 	 */
-	data->predicted_us = div_round64((uint64_t)data->next_timer_us *
-					 data->correction_factor[data->bucket],
-					 RESOLUTION * DECAY);
+	if (drv->skip_correction)
+		data->predicted_us = data->next_timer_us;
+	else
+		data->predicted_us = div_round64((uint64_t)data->next_timer_us *
+				data->correction_factor[data->bucket],
+				RESOLUTION * DECAY);
 
 	get_typical_interval(data);
 
@@ -364,6 +374,11 @@ static int menu_select(struct cpuidle_driver *drv, struct cpuidle_device *dev)
 		data->last_state_idx = i;
 	}
 
+#ifdef CONFIG_SEC_PHCOMP
+	if ( unlikely (data->last_state_idx >=1) )
+		if (data->predicted_us > get_phcomp_idle_time_threshold() )
+			trigger_phcompd(cpu);
+#endif
 	return data->last_state_idx;
 }
 
