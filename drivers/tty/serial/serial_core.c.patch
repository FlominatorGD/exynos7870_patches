diff --git a/drivers/tty/serial/serial_core.c b/drivers/tty/serial/serial_core.c
index 4f5d83e77e86..7603d5fadff2 100644
--- a/drivers/tty/serial/serial_core.c
+++ b/drivers/tty/serial/serial_core.c
@@ -38,6 +38,10 @@
 #include <asm/irq.h>
 #include <asm/uaccess.h>
 
+#if defined(CONFIG_BT_BCM43XX) || defined(CONFIG_BT_QCA9377)
+#define BT4339_LINE 0
+#endif
+
 /*
  * This is used to lock changes in serial line configuration.
  */
@@ -185,8 +189,14 @@ static int uart_port_startup(struct tty_struct *tty, struct uart_state *state,
 
 		spin_lock_irq(&uport->lock);
 		if (uart_cts_enabled(uport) &&
-		    !(uport->ops->get_mctrl(uport) & TIOCM_CTS))
-			uport->hw_stopped = 1;
+		    !(uport->ops->get_mctrl(uport) & TIOCM_CTS)) {
+#if defined(CONFIG_BT_BCM43XX) || defined(CONFIG_BT_QCA9377)
+				if (uport->line != BT4339_LINE)
+				uport->hw_stopped = 1;
+#else
+				uport->hw_stopped = 1;
+#endif
+			}
 		else
 			uport->hw_stopped = 0;
 		spin_unlock_irq(&uport->lock);
@@ -1314,7 +1324,12 @@ static void uart_set_termios(struct tty_struct *tty,
 	else if (!(old_termios->c_cflag & CRTSCTS) && (cflag & CRTSCTS)) {
 		spin_lock_irq(&uport->lock);
 		if (!(uport->ops->get_mctrl(uport) & TIOCM_CTS)) {
+#if defined(CONFIG_BT_BCM43XX) || defined(CONFIG_BT_QCA9377)
+			if (uport->line != BT4339_LINE)
+				uport->hw_stopped = 1;
+#else
 			uport->hw_stopped = 1;
+#endif
 			uport->ops->stop_tx(uport);
 		}
 		spin_unlock_irq(&uport->lock);
@@ -1334,8 +1349,16 @@ static void uart_close(struct tty_struct *tty, struct file *filp)
 	struct uart_port *uport;
 	unsigned long flags;
 
-	if (!state)
+	if (!state) {
+		struct uart_driver *drv = tty->driver->driver_state;
+
+		state = drv->state + tty->index;
+		port = &state->port;
+		spin_lock_irq(&port->lock);
+		--port->count;
+		spin_unlock_irq(&port->lock);
 		return;
+	}
 
 	uport = state->uart_port;
 	port = &state->port;
@@ -1555,6 +1578,10 @@ static int uart_open(struct tty_struct *tty, struct file *filp)
 
 	pr_debug("uart_open(%d) called\n", line);
 
+	spin_lock_irq(&port->lock);
+	++port->count;
+	spin_unlock_irq(&port->lock);
+
 	/*
 	 * We take the semaphore here to guarantee that we won't be re-entered
 	 * while allocating the state structure, or while we request any IRQs
@@ -1567,17 +1594,11 @@ static int uart_open(struct tty_struct *tty, struct file *filp)
 		goto end;
 	}
 
-	port->count++;
 	if (!state->uart_port || state->uart_port->flags & UPF_DEAD) {
 		retval = -ENXIO;
-		goto err_dec_count;
+		goto err_unlock;
 	}
 
-	/*
-	 * Once we set tty->driver_data here, we are guaranteed that
-	 * uart_close() will decrement the driver module use count.
-	 * Any failures from here onwards should not touch the count.
-	 */
 	tty->driver_data = state;
 	state->uart_port->state = state;
 	state->port.low_latency =
@@ -1598,8 +1619,7 @@ static int uart_open(struct tty_struct *tty, struct file *filp)
 
 end:
 	return retval;
-err_dec_count:
-	port->count--;
+err_unlock:
 	mutex_unlock(&port->mutex);
 	goto end;
 }
