diff --git a/drivers/misc/vmw_vmci/vmci_handle_array.c b/drivers/misc/vmw_vmci/vmci_handle_array.c
index 917e18a8af95..344973a0fb0a 100644
--- a/drivers/misc/vmw_vmci/vmci_handle_array.c
+++ b/drivers/misc/vmw_vmci/vmci_handle_array.c
@@ -16,29 +16,24 @@
 #include <linux/slab.h>
 #include "vmci_handle_array.h"
 
-static size_t handle_arr_calc_size(u32 capacity)
+static size_t handle_arr_calc_size(size_t capacity)
 {
-	return VMCI_HANDLE_ARRAY_HEADER_SIZE +
+	return sizeof(struct vmci_handle_arr) +
 	    capacity * sizeof(struct vmci_handle);
 }
 
-struct vmci_handle_arr *vmci_handle_arr_create(u32 capacity, u32 max_capacity)
+struct vmci_handle_arr *vmci_handle_arr_create(size_t capacity)
 {
 	struct vmci_handle_arr *array;
 
-	if (max_capacity == 0 || capacity > max_capacity)
-		return NULL;
-
 	if (capacity == 0)
-		capacity = min((u32)VMCI_HANDLE_ARRAY_DEFAULT_CAPACITY,
-			       max_capacity);
+		capacity = VMCI_HANDLE_ARRAY_DEFAULT_SIZE;
 
 	array = kmalloc(handle_arr_calc_size(capacity), GFP_ATOMIC);
 	if (!array)
 		return NULL;
 
 	array->capacity = capacity;
-	array->max_capacity = max_capacity;
 	array->size = 0;
 
 	return array;
@@ -49,34 +44,27 @@ void vmci_handle_arr_destroy(struct vmci_handle_arr *array)
 	kfree(array);
 }
 
-int vmci_handle_arr_append_entry(struct vmci_handle_arr **array_ptr,
-				 struct vmci_handle handle)
+void vmci_handle_arr_append_entry(struct vmci_handle_arr **array_ptr,
+				  struct vmci_handle handle)
 {
 	struct vmci_handle_arr *array = *array_ptr;
 
 	if (unlikely(array->size >= array->capacity)) {
 		/* reallocate. */
 		struct vmci_handle_arr *new_array;
-		u32 capacity_bump = min(array->max_capacity - array->capacity,
-					array->capacity);
-		size_t new_size = handle_arr_calc_size(array->capacity +
-						       capacity_bump);
-
-		if (array->size >= array->max_capacity)
-			return VMCI_ERROR_NO_MEM;
+		size_t new_capacity = array->capacity * VMCI_ARR_CAP_MULT;
+		size_t new_size = handle_arr_calc_size(new_capacity);
 
 		new_array = krealloc(array, new_size, GFP_ATOMIC);
 		if (!new_array)
-			return VMCI_ERROR_NO_MEM;
+			return;
 
-		new_array->capacity += capacity_bump;
+		new_array->capacity = new_capacity;
 		*array_ptr = array = new_array;
 	}
 
 	array->entries[array->size] = handle;
 	array->size++;
-
-	return VMCI_SUCCESS;
 }
 
 /*
@@ -86,7 +74,7 @@ struct vmci_handle vmci_handle_arr_remove_entry(struct vmci_handle_arr *array,
 						struct vmci_handle entry_handle)
 {
 	struct vmci_handle handle = VMCI_INVALID_HANDLE;
-	u32 i;
+	size_t i;
 
 	for (i = 0; i < array->size; i++) {
 		if (vmci_handle_is_equal(array->entries[i], entry_handle)) {
@@ -121,7 +109,7 @@ struct vmci_handle vmci_handle_arr_remove_tail(struct vmci_handle_arr *array)
  * Handle at given index, VMCI_INVALID_HANDLE if invalid index.
  */
 struct vmci_handle
-vmci_handle_arr_get_entry(const struct vmci_handle_arr *array, u32 index)
+vmci_handle_arr_get_entry(const struct vmci_handle_arr *array, size_t index)
 {
 	if (unlikely(index >= array->size))
 		return VMCI_INVALID_HANDLE;
@@ -132,7 +120,7 @@ vmci_handle_arr_get_entry(const struct vmci_handle_arr *array, u32 index)
 bool vmci_handle_arr_has_entry(const struct vmci_handle_arr *array,
 			       struct vmci_handle entry_handle)
 {
-	u32 i;
+	size_t i;
 
 	for (i = 0; i < array->size; i++)
 		if (vmci_handle_is_equal(array->entries[i], entry_handle))
