diff --git a/drivers/i2c/busses/i2c-s3c2410.c b/drivers/i2c/busses/i2c-s3c2410.c
index b928e7a62f59..504e6ecd4a33 100644
--- a/drivers/i2c/busses/i2c-s3c2410.c
+++ b/drivers/i2c/busses/i2c-s3c2410.c
@@ -29,7 +29,6 @@
 #include <linux/platform_device.h>
 #include <linux/pm_runtime.h>
 #include <linux/clk.h>
-#include <linux/cpufreq.h>
 #include <linux/slab.h>
 #include <linux/io.h>
 #include <linux/of.h>
@@ -40,6 +39,13 @@
 
 #include <linux/platform_data/i2c-s3c2410.h>
 
+#ifdef CONFIG_CPU_IDLE
+#include <soc/samsung/exynos-pm.h>
+static LIST_HEAD(drvdata_list);
+#endif
+#include <linux/exynos-ss.h>
+#include <linux/clk-private.h>
+
 /* see s3c2410x user guide, v1.1, section 9 (p447) for more info */
 
 #define S3C2410_IICCON			0x00
@@ -47,12 +53,17 @@
 #define S3C2410_IICADD			0x08
 #define S3C2410_IICDS			0x0C
 #define S3C2440_IICLC			0x10
+#define S3C2440_CLK_BYPASS		0x14
+#define S3C2440_IICINT			0x20
+#define S3C2440_IICNCLK_DIV2		0x28
 
+#define S3C2410_IICCON_BUSHOLD_IRQEN	(1 << 8)
 #define S3C2410_IICCON_ACKEN		(1 << 7)
 #define S3C2410_IICCON_TXDIV_16		(0 << 6)
 #define S3C2410_IICCON_TXDIV_512	(1 << 6)
 #define S3C2410_IICCON_IRQEN		(1 << 5)
 #define S3C2410_IICCON_IRQPEND		(1 << 4)
+#define S3C2410_IICCON_BUS_RELEASE	(1 << 4)
 #define S3C2410_IICCON_SCALE(x)		((x) & 0xf)
 #define S3C2410_IICCON_SCALEMASK	(0xf)
 
@@ -78,11 +89,18 @@
 
 #define S3C2410_IICLC_FILTER_ON		(1 << 2)
 
+#define S3C2440_IICINT_BUSHOLD_CLEAR	(1 << 8)
+
+#define S3C2410_NEED_REG_INIT		(1 << 0)
+#define S3C2410_NEED_BUS_INIT		(2 << 0)
+#define S3C2410_NEED_FULL_INIT		(3 << 0)
+
 /* Treat S3C2410 as baseline hardware, anything else is supported via quirks */
 #define QUIRK_S3C2440		(1 << 0)
 #define QUIRK_HDMIPHY		(1 << 1)
 #define QUIRK_NO_GPIO		(1 << 2)
 #define QUIRK_POLL		(1 << 3)
+#define QUIRK_FIMC_I2C		(1 << 3)
 
 /* Max time to wait for bus to become idle after a xfer (in us) */
 #define S3C2410_IDLE_TIMEOUT	5000
@@ -97,8 +115,10 @@ enum s3c24xx_i2c_state {
 };
 
 struct s3c24xx_i2c {
+	struct list_head	node;
 	wait_queue_head_t	wait;
 	kernel_ulong_t		quirks;
+	unsigned int		need_hw_init;
 	unsigned int		suspended:1;
 
 	struct i2c_msg		*msg;
@@ -113,6 +133,7 @@ struct s3c24xx_i2c {
 	unsigned long		clkrate;
 
 	void __iomem		*regs;
+	struct clk		*rate_clk;
 	struct clk		*clk;
 	struct device		*dev;
 	struct i2c_adapter	adap;
@@ -120,9 +141,7 @@ struct s3c24xx_i2c {
 	struct s3c2410_platform_i2c	*pdata;
 	int			gpios[2];
 	struct pinctrl          *pctrl;
-#if defined(CONFIG_ARM_S3C24XX_CPUFREQ)
-	struct notifier_block	freq_transition;
-#endif
+	int			bus_id;
 };
 
 static struct platform_device_id s3c24xx_driver_ids[] = {
@@ -135,6 +154,9 @@ static struct platform_device_id s3c24xx_driver_ids[] = {
 	}, {
 		.name		= "s3c2440-hdmiphy-i2c",
 		.driver_data	= QUIRK_S3C2440 | QUIRK_HDMIPHY | QUIRK_NO_GPIO,
+	}, {
+		.name		= "exynos5430-fimc-i2c",
+		.driver_data	= QUIRK_S3C2440 | QUIRK_FIMC_I2C,
 	}, { },
 };
 MODULE_DEVICE_TABLE(platform, s3c24xx_driver_ids);
@@ -147,6 +169,8 @@ static const struct of_device_id s3c24xx_i2c_match[] = {
 	{ .compatible = "samsung,s3c2440-i2c", .data = (void *)QUIRK_S3C2440 },
 	{ .compatible = "samsung,s3c2440-hdmiphy-i2c",
 	  .data = (void *)(QUIRK_S3C2440 | QUIRK_HDMIPHY | QUIRK_NO_GPIO) },
+	{ .compatible = "samsung,exynos5430-fimc-i2c",
+	  .data = (void *)(QUIRK_S3C2440 | QUIRK_FIMC_I2C) },
 	{ .compatible = "samsung,exynos5440-i2c",
 	  .data = (void *)(QUIRK_S3C2440 | QUIRK_NO_GPIO) },
 	{ .compatible = "samsung,exynos5-sata-phy-i2c",
@@ -156,6 +180,8 @@ static const struct of_device_id s3c24xx_i2c_match[] = {
 MODULE_DEVICE_TABLE(of, s3c24xx_i2c_match);
 #endif
 
+static int s3c24xx_i2c_clockrate(struct s3c24xx_i2c *i2c, unsigned int *got);
+
 /* s3c24xx_get_device_quirks
  *
  * Get controller type either from device tree or platform device variant.
@@ -206,6 +232,8 @@ static inline void s3c24xx_i2c_enable_ack(struct s3c24xx_i2c *i2c)
 	unsigned long tmp;
 
 	tmp = readl(i2c->regs + S3C2410_IICCON);
+	if (i2c->quirks & QUIRK_FIMC_I2C)
+		tmp &= ~S3C2410_IICCON_BUS_RELEASE;
 	writel(tmp | S3C2410_IICCON_ACKEN, i2c->regs + S3C2410_IICCON);
 }
 
@@ -215,16 +243,30 @@ static inline void s3c24xx_i2c_disable_irq(struct s3c24xx_i2c *i2c)
 {
 	unsigned long tmp;
 
-	tmp = readl(i2c->regs + S3C2410_IICCON);
-	writel(tmp & ~S3C2410_IICCON_IRQEN, i2c->regs + S3C2410_IICCON);
+	if (i2c->quirks & QUIRK_FIMC_I2C) {
+		/* disable bus hold interrupt */
+		tmp = readl(i2c->regs + S3C2410_IICCON);
+		tmp &= ~S3C2410_IICCON_BUSHOLD_IRQEN;
+		writel(tmp, i2c->regs + S3C2410_IICCON);
+	} else {
+		tmp = readl(i2c->regs + S3C2410_IICCON);
+		writel(tmp & ~S3C2410_IICCON_IRQEN, i2c->regs + S3C2410_IICCON);
+	}
 }
 
 static inline void s3c24xx_i2c_enable_irq(struct s3c24xx_i2c *i2c)
 {
 	unsigned long tmp;
 
-	tmp = readl(i2c->regs + S3C2410_IICCON);
-	writel(tmp | S3C2410_IICCON_IRQEN, i2c->regs + S3C2410_IICCON);
+	if (i2c->quirks & QUIRK_FIMC_I2C) {
+		/* enable bus hold interrupt */
+		tmp = readl(i2c->regs + S3C2410_IICCON);
+		tmp |= S3C2410_IICCON_BUSHOLD_IRQEN;
+		writel(tmp, i2c->regs + S3C2410_IICCON);
+	} else {
+		tmp = readl(i2c->regs + S3C2410_IICCON);
+		writel(tmp | S3C2410_IICCON_IRQEN, i2c->regs + S3C2410_IICCON);
+	}
 }
 
 static bool is_ack(struct s3c24xx_i2c *i2c)
@@ -269,9 +311,8 @@ static void s3c24xx_i2c_message_start(struct s3c24xx_i2c *i2c,
 		addr ^= 1;
 
 	/* todo - check for whether ack wanted or not */
-	s3c24xx_i2c_enable_ack(i2c);
-
 	iiccon = readl(i2c->regs + S3C2410_IICCON);
+	iiccon |= S3C2410_IICCON_ACKEN;
 	writel(stat, i2c->regs + S3C2410_IICSTAT);
 
 	dev_dbg(i2c->dev, "START: %08lx to IICSTAT, %02x to DS\n", stat, addr);
@@ -554,9 +595,21 @@ static int i2c_s3c_irq_nextbyte(struct s3c24xx_i2c *i2c, unsigned long iicstat)
 	/* acknowlegde the IRQ and get back on with the work */
 
  out_ack:
-	tmp = readl(i2c->regs + S3C2410_IICCON);
-	tmp &= ~S3C2410_IICCON_IRQPEND;
-	writel(tmp, i2c->regs + S3C2410_IICCON);
+	if (i2c->quirks & QUIRK_FIMC_I2C) {
+		/* clear bus hold status flag */
+		tmp = readl(i2c->regs + S3C2440_IICINT);
+		tmp |= S3C2440_IICINT_BUSHOLD_CLEAR;
+		writel(tmp, i2c->regs + S3C2440_IICINT);
+
+		/* release the i2c bus */
+		tmp = readl(i2c->regs + S3C2410_IICCON);
+		tmp |= S3C2410_IICCON_IRQPEND;
+		writel(tmp, i2c->regs + S3C2410_IICCON);
+	} else {
+		tmp = readl(i2c->regs + S3C2410_IICCON);
+		tmp &= ~S3C2410_IICCON_IRQPEND;
+		writel(tmp, i2c->regs + S3C2410_IICCON);
+	}
  out:
 	return ret;
 }
@@ -581,10 +634,21 @@ static irqreturn_t s3c24xx_i2c_irq(int irqno, void *dev_id)
 
 	if (i2c->state == STATE_IDLE) {
 		dev_dbg(i2c->dev, "IRQ: error i2c->state == IDLE\n");
-
-		tmp = readl(i2c->regs + S3C2410_IICCON);
-		tmp &= ~S3C2410_IICCON_IRQPEND;
-		writel(tmp, i2c->regs +  S3C2410_IICCON);
+		if (i2c->quirks & QUIRK_FIMC_I2C) {
+			/* clear bus hold status flag */
+			tmp = readl(i2c->regs + S3C2440_IICINT);
+			tmp |= S3C2440_IICINT_BUSHOLD_CLEAR;
+			writel(tmp, i2c->regs + S3C2440_IICINT);
+
+			/* release the i2c bus */
+			tmp = readl(i2c->regs + S3C2410_IICCON);
+			tmp |= S3C2410_IICCON_IRQPEND;
+			writel(tmp, i2c->regs + S3C2410_IICCON);
+		} else {
+			tmp = readl(i2c->regs + S3C2410_IICCON);
+			tmp &= ~S3C2410_IICCON_IRQPEND;
+			writel(tmp, i2c->regs +  S3C2410_IICCON);
+		}
 		goto out;
 	}
 
@@ -695,8 +759,11 @@ static void s3c24xx_i2c_wait_idle(struct s3c24xx_i2c *i2c)
 		iicstat = readl(i2c->regs + S3C2410_IICSTAT);
 	}
 
-	if (iicstat & S3C2410_IICSTAT_START)
+	if (iicstat & S3C2410_IICSTAT_START) {
 		dev_warn(i2c->dev, "timeout waiting for bus idle\n");
+		if (i2c->state != STATE_STOP)
+			s3c24xx_i2c_stop(i2c, -ENXIO);
+	}
 }
 
 /* s3c24xx_i2c_doxfer
@@ -716,6 +783,7 @@ static int s3c24xx_i2c_doxfer(struct s3c24xx_i2c *i2c,
 	ret = s3c24xx_i2c_set_master(i2c);
 	if (ret != 0) {
 		dev_err(i2c->dev, "cannot get bus (error %d)\n", ret);
+		i2c->need_hw_init = S3C2410_NEED_FULL_INIT;
 		ret = -EAGAIN;
 		goto out;
 	}
@@ -769,6 +837,7 @@ static int s3c24xx_i2c_doxfer(struct s3c24xx_i2c *i2c,
  * first port of call from the i2c bus code when an message needs
  * transferring across the i2c bus.
 */
+static int s3c24xx_i2c_init(struct s3c24xx_i2c *i2c);
 
 static int s3c24xx_i2c_xfer(struct i2c_adapter *adap,
 			struct i2c_msg *msgs, int num)
@@ -778,16 +847,21 @@ static int s3c24xx_i2c_xfer(struct i2c_adapter *adap,
 	int ret;
 
 	pm_runtime_get_sync(&adap->dev);
-	ret = clk_enable(i2c->clk);
-	if (ret)
-		return ret;
+	exynos_ss_i2c_clk(i2c->clk, i2c->bus_id, 0x1);
+	clk_prepare_enable(i2c->clk);
+	exynos_ss_i2c_clk(i2c->clk, i2c->bus_id, 0x3);
 
 	for (retry = 0; retry < adap->retries; retry++) {
 
+		if (i2c->need_hw_init & S3C2410_NEED_FULL_INIT)
+			s3c24xx_i2c_init(i2c);
+
 		ret = s3c24xx_i2c_doxfer(i2c, msgs, num);
 
 		if (ret != -EAGAIN) {
-			clk_disable(i2c->clk);
+			exynos_ss_i2c_clk(i2c->clk, i2c->bus_id, 0x11);
+			clk_disable_unprepare(i2c->clk);
+			exynos_ss_i2c_clk(i2c->clk, i2c->bus_id, 0x13);
 			pm_runtime_put(&adap->dev);
 			return ret;
 		}
@@ -797,7 +871,9 @@ static int s3c24xx_i2c_xfer(struct i2c_adapter *adap,
 		udelay(100);
 	}
 
-	clk_disable(i2c->clk);
+	exynos_ss_i2c_clk(i2c->clk, i2c->bus_id, 0x11);
+	clk_disable_unprepare(i2c->clk);
+	exynos_ss_i2c_clk(i2c->clk, i2c->bus_id, 0x13);
 	pm_runtime_put(&adap->dev);
 	return -EREMOTEIO;
 }
@@ -821,24 +897,34 @@ static const struct i2c_algorithm s3c24xx_i2c_algorithm = {
  * return the divisor settings for a given frequency
 */
 
-static int s3c24xx_i2c_calcdivisor(unsigned long clkin, unsigned int wanted,
-				   unsigned int *div1, unsigned int *divs)
+static int s3c24xx_i2c_calcdivisor(struct s3c24xx_i2c *i2c,
+			unsigned long clkin, unsigned int wanted,
+			unsigned int *div1, unsigned int *divs)
 {
 	unsigned int calc_divs = clkin / wanted;
 	unsigned int calc_div1;
+	unsigned int clk_prescaler;
+
+	if (i2c->quirks & QUIRK_FIMC_I2C) {
+		/* Input NCLK is used directly in i2c */
+		writel(0, i2c->regs + S3C2440_IICNCLK_DIV2);
+		writeb(1, i2c->regs + S3C2440_CLK_BYPASS);
+		clk_prescaler = 32;
+	} else
+		clk_prescaler = 16;
 
 	if (calc_divs > (16*16))
 		calc_div1 = 512;
 	else
-		calc_div1 = 16;
+		calc_div1 = clk_prescaler;
 
 	calc_divs += calc_div1-1;
 	calc_divs /= calc_div1;
 
 	if (calc_divs == 0)
 		calc_divs = 1;
-	if (calc_divs > 17)
-		calc_divs = 17;
+	if (calc_divs > (clk_prescaler + 1))
+		calc_divs = clk_prescaler + 1;
 
 	*divs = calc_divs;
 	*div1 = calc_div1;
@@ -856,12 +942,17 @@ static int s3c24xx_i2c_calcdivisor(unsigned long clkin, unsigned int wanted,
 static int s3c24xx_i2c_clockrate(struct s3c24xx_i2c *i2c, unsigned int *got)
 {
 	struct s3c2410_platform_i2c *pdata = i2c->pdata;
-	unsigned long clkin = clk_get_rate(i2c->clk);
+	unsigned long clkin;
 	unsigned int divs, div1;
 	unsigned long target_frequency;
 	u32 iiccon;
 	int freq;
 
+	if (i2c->quirks & QUIRK_FIMC_I2C)
+		clkin = 24000000;/* NCLK is fixed 24Mhz */
+	else
+		clkin = clk_get_rate(i2c->rate_clk);
+
 	i2c->clkrate = clkin;
 	clkin /= 1000;		/* clkin now in KHz */
 
@@ -871,7 +962,8 @@ static int s3c24xx_i2c_clockrate(struct s3c24xx_i2c *i2c, unsigned int *got)
 
 	target_frequency /= 1000; /* Target frequency now in KHz */
 
-	freq = s3c24xx_i2c_calcdivisor(clkin, target_frequency, &div1, &divs);
+	freq = s3c24xx_i2c_calcdivisor(i2c, clkin,
+			target_frequency, &div1, &divs);
 
 	if (freq > target_frequency) {
 		dev_err(i2c->dev,
@@ -914,65 +1006,6 @@ static int s3c24xx_i2c_clockrate(struct s3c24xx_i2c *i2c, unsigned int *got)
 	return 0;
 }
 
-#if defined(CONFIG_ARM_S3C24XX_CPUFREQ)
-
-#define freq_to_i2c(_n) container_of(_n, struct s3c24xx_i2c, freq_transition)
-
-static int s3c24xx_i2c_cpufreq_transition(struct notifier_block *nb,
-					  unsigned long val, void *data)
-{
-	struct s3c24xx_i2c *i2c = freq_to_i2c(nb);
-	unsigned int got;
-	int delta_f;
-	int ret;
-
-	delta_f = clk_get_rate(i2c->clk) - i2c->clkrate;
-
-	/* if we're post-change and the input clock has slowed down
-	 * or at pre-change and the clock is about to speed up, then
-	 * adjust our clock rate. <0 is slow, >0 speedup.
-	 */
-
-	if ((val == CPUFREQ_POSTCHANGE && delta_f < 0) ||
-	    (val == CPUFREQ_PRECHANGE && delta_f > 0)) {
-		i2c_lock_adapter(&i2c->adap);
-		ret = s3c24xx_i2c_clockrate(i2c, &got);
-		i2c_unlock_adapter(&i2c->adap);
-
-		if (ret < 0)
-			dev_err(i2c->dev, "cannot find frequency\n");
-		else
-			dev_info(i2c->dev, "setting freq %d\n", got);
-	}
-
-	return 0;
-}
-
-static inline int s3c24xx_i2c_register_cpufreq(struct s3c24xx_i2c *i2c)
-{
-	i2c->freq_transition.notifier_call = s3c24xx_i2c_cpufreq_transition;
-
-	return cpufreq_register_notifier(&i2c->freq_transition,
-					 CPUFREQ_TRANSITION_NOTIFIER);
-}
-
-static inline void s3c24xx_i2c_deregister_cpufreq(struct s3c24xx_i2c *i2c)
-{
-	cpufreq_unregister_notifier(&i2c->freq_transition,
-				    CPUFREQ_TRANSITION_NOTIFIER);
-}
-
-#else
-static inline int s3c24xx_i2c_register_cpufreq(struct s3c24xx_i2c *i2c)
-{
-	return 0;
-}
-
-static inline void s3c24xx_i2c_deregister_cpufreq(struct s3c24xx_i2c *i2c)
-{
-}
-#endif
-
 #ifdef CONFIG_OF
 static int s3c24xx_i2c_parse_dt_gpio(struct s3c24xx_i2c *i2c)
 {
@@ -1032,17 +1065,23 @@ static void s3c24xx_i2c_dt_gpio_free(struct s3c24xx_i2c *i2c)
 static int s3c24xx_i2c_init(struct s3c24xx_i2c *i2c)
 {
 	struct s3c2410_platform_i2c *pdata;
+	unsigned long iicstat = readl(i2c->regs + S3C2410_IICSTAT);
 	unsigned int freq;
 
 	/* get the plafrom data */
 
 	pdata = i2c->pdata;
 
-	/* write slave address */
+	if (i2c->need_hw_init & S3C2410_NEED_BUS_INIT) {
+		/* reset i2c bus to recover from "cannot get bus" */
+		iicstat &= ~S3C2410_IICSTAT_TXRXEN;
+		writel(iicstat, i2c->regs + S3C2410_IICSTAT);
+	}
 
+	/* write slave address */
 	writeb(pdata->slave_addr, i2c->regs + S3C2410_IICADD);
 
-	dev_info(i2c->dev, "slave address 0x%02x\n", pdata->slave_addr);
+	dev_dbg(i2c->dev, "slave address 0x%02x\n", pdata->slave_addr);
 
 	writel(0, i2c->regs + S3C2410_IICCON);
 	writel(0, i2c->regs + S3C2410_IICSTAT);
@@ -1056,10 +1095,11 @@ static int s3c24xx_i2c_init(struct s3c24xx_i2c *i2c)
 
 	/* todo - check that the i2c lines aren't being dragged anywhere */
 
-	dev_info(i2c->dev, "bus frequency set to %d KHz\n", freq);
+	dev_dbg(i2c->dev, "bus frequency set to %d KHz\n", freq);
 	dev_dbg(i2c->dev, "S3C2410_IICCON=0x%02x\n",
 		readl(i2c->regs + S3C2410_IICCON));
 
+	i2c->need_hw_init = 0;
 	return 0;
 }
 
@@ -1077,6 +1117,9 @@ s3c24xx_i2c_parse_dt(struct device_node *np, struct s3c24xx_i2c *i2c)
 	if (!np)
 		return;
 
+#ifdef CONFIG_FIX_I2C_BUS_NUM
+	if (of_property_read_u32(np, "samsung,i2c-bus-num", &pdata->bus_num))
+#endif
 	pdata->bus_num = -1; /* i2c bus number is dynamically assigned */
 	of_property_read_u32(np, "samsung,i2c-sda-delay", &pdata->sda_delay);
 	of_property_read_u32(np, "samsung,i2c-slave-addr", &pdata->slave_addr);
@@ -1091,6 +1134,27 @@ s3c24xx_i2c_parse_dt(struct device_node *np, struct s3c24xx_i2c *i2c)
 }
 #endif
 
+#ifdef CONFIG_CPU_IDLE
+static int s3c24xx_i2c_notifier(struct notifier_block *self,
+				unsigned long cmd, void *v)
+{
+	struct s3c24xx_i2c *i2c;
+
+	switch (cmd) {
+	case LPA_EXIT:
+		list_for_each_entry(i2c, &drvdata_list, node)
+			i2c->need_hw_init = S3C2410_NEED_REG_INIT;
+		break;
+	}
+
+	return NOTIFY_OK;
+}
+
+static struct notifier_block s3c24xx_i2c_notifier_block = {
+	.notifier_call = s3c24xx_i2c_notifier,
+};
+#endif /* CONFIG_CPU_IDLE */
+
 /* s3c24xx_i2c_probe
  *
  * called by the bus driver when a suitable device is found
@@ -1137,7 +1201,13 @@ static int s3c24xx_i2c_probe(struct platform_device *pdev)
 	/* find the clock and enable it */
 
 	i2c->dev = &pdev->dev;
-	i2c->clk = devm_clk_get(&pdev->dev, "i2c");
+	i2c->rate_clk = devm_clk_get(&pdev->dev, "rate_i2c");
+	if (IS_ERR(i2c->rate_clk)) {
+		dev_err(&pdev->dev, "cannot get rate clock\n");
+		return -ENOENT;
+	}
+
+	i2c->clk = devm_clk_get(&pdev->dev, "gate_i2c");
 	if (IS_ERR(i2c->clk)) {
 		dev_err(&pdev->dev, "cannot get clock\n");
 		return -ENOENT;
@@ -1172,15 +1242,8 @@ static int s3c24xx_i2c_probe(struct platform_device *pdev)
 		return -EINVAL;
 	}
 
-	/* initialise the i2c controller */
+	i2c->need_hw_init = S3C2410_NEED_REG_INIT;
 
-	clk_prepare_enable(i2c->clk);
-	ret = s3c24xx_i2c_init(i2c);
-	clk_disable(i2c->clk);
-	if (ret != 0) {
-		dev_err(&pdev->dev, "I2C controller init failed\n");
-		return ret;
-	}
 	/* find the IRQ for this unit (note, this relies on the init call to
 	 * ensure no current IRQs pending
 	 */
@@ -1203,13 +1266,6 @@ static int s3c24xx_i2c_probe(struct platform_device *pdev)
 		}
 	}
 
-	ret = s3c24xx_i2c_register_cpufreq(i2c);
-	if (ret < 0) {
-		dev_err(&pdev->dev, "failed to register cpufreq notifier\n");
-		clk_unprepare(i2c->clk);
-		return ret;
-	}
-
 	/* Note, previous versions of the driver used i2c_add_adapter()
 	 * to add the bus at any number. We now pass the bus number via
 	 * the platform data, so if unset it will now default to always
@@ -1219,21 +1275,21 @@ static int s3c24xx_i2c_probe(struct platform_device *pdev)
 	i2c->adap.nr = i2c->pdata->bus_num;
 	i2c->adap.dev.of_node = pdev->dev.of_node;
 
-	platform_set_drvdata(pdev, i2c);
-
-	pm_runtime_enable(&pdev->dev);
-
 	ret = i2c_add_numbered_adapter(&i2c->adap);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "failed to add bus to i2c core\n");
-		pm_runtime_disable(&pdev->dev);
-		s3c24xx_i2c_deregister_cpufreq(i2c);
-		clk_unprepare(i2c->clk);
 		return ret;
 	}
 
+	platform_set_drvdata(pdev, i2c);
+
+	pm_runtime_enable(&pdev->dev);
 	pm_runtime_enable(&i2c->adap.dev);
 
+#ifdef CONFIG_CPU_IDLE
+	list_add_tail(&i2c->node, &drvdata_list);
+#endif
+
 	dev_info(&pdev->dev, "%s: S3C I2C adapter\n", dev_name(&i2c->adap.dev));
 	return 0;
 }
@@ -1252,8 +1308,6 @@ static int s3c24xx_i2c_remove(struct platform_device *pdev)
 	pm_runtime_disable(&i2c->adap.dev);
 	pm_runtime_disable(&pdev->dev);
 
-	s3c24xx_i2c_deregister_cpufreq(i2c);
-
 	i2c_del_adapter(&i2c->adap);
 
 	if (pdev->dev.of_node && IS_ERR(i2c->pctrl))
@@ -1277,14 +1331,22 @@ static int s3c24xx_i2c_resume_noirq(struct device *dev)
 {
 	struct platform_device *pdev = to_platform_device(dev);
 	struct s3c24xx_i2c *i2c = platform_get_drvdata(pdev);
-	int ret;
 
-	ret = clk_enable(i2c->clk);
-	if (ret)
-		return ret;
-	s3c24xx_i2c_init(i2c);
-	clk_disable(i2c->clk);
 	i2c->suspended = 0;
+	i2c->need_hw_init = S3C2410_NEED_REG_INIT;
+
+	return 0;
+}
+#endif
+
+#ifdef CONFIG_PM_RUNTIME
+static int s3c24xx_i2c_runtime_resume(struct device *dev)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+	struct s3c24xx_i2c *i2c = platform_get_drvdata(pdev);
+
+	if (i2c->quirks & QUIRK_FIMC_I2C)
+		i2c->need_hw_init = S3C2410_NEED_REG_INIT;
 
 	return 0;
 }
@@ -1295,10 +1357,9 @@ static const struct dev_pm_ops s3c24xx_i2c_dev_pm_ops = {
 #ifdef CONFIG_PM_SLEEP
 	.suspend_noirq = s3c24xx_i2c_suspend_noirq,
 	.resume_noirq = s3c24xx_i2c_resume_noirq,
-	.freeze_noirq = s3c24xx_i2c_suspend_noirq,
-	.thaw_noirq = s3c24xx_i2c_resume_noirq,
-	.poweroff_noirq = s3c24xx_i2c_suspend_noirq,
-	.restore_noirq = s3c24xx_i2c_resume_noirq,
+#endif
+#ifdef CONFIG_PM_RUNTIME
+	.runtime_resume = s3c24xx_i2c_runtime_resume,
 #endif
 };
 
@@ -1323,6 +1384,9 @@ static struct platform_driver s3c24xx_i2c_driver = {
 
 static int __init i2c_adap_s3c_init(void)
 {
+#ifdef CONFIG_CPU_IDLE
+	exynos_pm_register_notifier(&s3c24xx_i2c_notifier_block);
+#endif
 	return platform_driver_register(&s3c24xx_i2c_driver);
 }
 subsys_initcall(i2c_adap_s3c_init);
