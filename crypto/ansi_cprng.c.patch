diff --git a/crypto/ansi_cprng.c b/crypto/ansi_cprng.c
index 6f5bebc9bf01..e9f9a6239b91 100644
--- a/crypto/ansi_cprng.c
+++ b/crypto/ansi_cprng.c
@@ -126,15 +126,26 @@ static int _get_more_prng_bytes(struct prng_context *ctx, int cont_test)
 			output = ctx->rand_data;
 			break;
 		case 2:
+#ifdef CONFIG_CRYPTO_FIPS
+			if (unlikely(in_fips_err()))
+				return -EINVAL;
+#endif
 			/*
 			 * First check that we didn't produce the same
 			 * random data that we did last time around through this
 			 */
+#if FIPS_FUNC_TEST == 5
+            		memcpy(ctx->rand_data, ctx->last_rand_data, DEFAULT_BLK_SZ);
+#endif
 			if (!memcmp(ctx->rand_data, ctx->last_rand_data,
 					DEFAULT_BLK_SZ)) {
 				if (cont_test) {
+#ifdef CONFIG_CRYPTO_FIPS
+					set_in_fips_err();
+#else
 					panic("cprng %p Failed repetition check!\n",
 						ctx);
+#endif
 				}
 
 				printk(KERN_ERR
@@ -372,6 +383,11 @@ static int cprng_reset(struct crypto_rng *tfm, u8 *seed, unsigned int slen)
 	if (slen < DEFAULT_PRNG_KSZ + DEFAULT_BLK_SZ)
 		return -EINVAL;
 
+#ifdef CONFIG_CRYPTO_FIPS
+	if (!memcmp(key, seed, DEFAULT_PRNG_KSZ))
+		return -EINVAL;
+#endif
+
 	if (slen >= (2 * DEFAULT_BLK_SZ + DEFAULT_PRNG_KSZ))
 		dt = key + DEFAULT_PRNG_KSZ;
 
@@ -388,6 +404,9 @@ static int fips_cprng_get_random(struct crypto_rng *tfm, u8 *rdata,
 {
 	struct prng_context *prng = crypto_rng_ctx(tfm);
 
+	if (unlikely(in_fips_err()))
+		return -EINVAL;
+
 	return get_prng_bytes(rdata, dlen, prng, 1);
 }
 
