diff --git a/crypto/blkcipher.c b/crypto/blkcipher.c
index 5ba9916a33c8..e0094fc6b8d8 100644
--- a/crypto/blkcipher.c
+++ b/crypto/blkcipher.c
@@ -103,6 +103,11 @@ int blkcipher_walk_done(struct blkcipher_desc *desc,
 	unsigned int n; /* bytes processed */
 	bool more;
 
+#ifdef CONFIG_CRYPTO_FIPS
+	if (unlikely(in_fips_err())) 
+		return (-EACCES);
+#endif
+
 	if (unlikely(err < 0))
 		goto finish;
 
@@ -321,6 +326,11 @@ EXPORT_SYMBOL_GPL(blkcipher_walk_phys);
 static int blkcipher_walk_first(struct blkcipher_desc *desc,
 				struct blkcipher_walk *walk)
 {
+#ifdef CONFIG_CRYPTO_FIPS
+	if (unlikely(in_fips_err())) 
+		return (-EACCES);
+#endif
+
 	if (WARN_ON_ONCE(in_irq()))
 		return -EDEADLK;
 
@@ -424,6 +434,10 @@ static int async_encrypt(struct ablkcipher_request *req)
 		.flags = req->base.flags,
 	};
 
+#ifdef CONFIG_CRYPTO_FIPS
+	if (unlikely(in_fips_err())) 
+		return (-EACCES);
+#endif
 
 	return alg->encrypt(&desc, req->dst, req->src, req->nbytes);
 }
@@ -438,6 +452,11 @@ static int async_decrypt(struct ablkcipher_request *req)
 		.flags = req->base.flags,
 	};
 
+#ifdef CONFIG_CRYPTO_FIPS
+	if (unlikely(in_fips_err())) 
+		return (-EACCES);
+#endif
+
 	return alg->decrypt(&desc, req->dst, req->src, req->nbytes);
 }
 
@@ -600,6 +619,11 @@ struct crypto_instance *skcipher_geniv_alloc(struct crypto_template *tmpl,
 	struct crypto_alg *alg;
 	int err;
 
+#ifdef CONFIG_CRYPTO_FIPS
+	if (unlikely(in_fips_err())) 
+		return ERR_PTR(-EACCES);
+#endif
+
 	algt = crypto_get_attr_type(tb);
 	if (IS_ERR(algt))
 		return ERR_CAST(algt);
@@ -722,6 +746,11 @@ int skcipher_geniv_init(struct crypto_tfm *tfm)
 	struct crypto_instance *inst = (void *)tfm->__crt_alg;
 	struct crypto_ablkcipher *cipher;
 
+#ifdef CONFIG_CRYPTO_FIPS
+	if (unlikely(in_fips_err())) 
+		return (-EACCES);
+#endif
+
 	cipher = crypto_spawn_skcipher(crypto_instance_ctx(inst));
 	if (IS_ERR(cipher))
 		return PTR_ERR(cipher);
