diff --git a/crypto/tcrypt.c b/crypto/tcrypt.c
index 890449e6e7ef..620394462448 100644
--- a/crypto/tcrypt.c
+++ b/crypto/tcrypt.c
@@ -72,6 +72,30 @@ static char *check[] = {
 	"lzo", "cts", "zlib", NULL
 };
 
+#ifdef CONFIG_CRYPTO_FIPS
+#ifdef CONFIG_CRYPTO_DRBG
+static char *drbg_cores[] = {
+#ifdef CONFIG_CRYPTO_DRBG_CTR
+	"ctr_aes128",
+	"ctr_aes192",
+	"ctr_aes256",
+#endif /* CONFIG_CRYPTO_DRBG_CTR */
+#ifdef CONFIG_CRYPTO_DRBG_HASH
+	"sha1",
+	"sha384",
+	"sha512",
+	"sha256",
+#endif /* CONFIG_CRYPTO_DRBG_HASH */
+#ifdef CONFIG_CRYPTO_DRBG_HMAC
+	"hmac_sha1",
+	"hmac_sha384",
+	"hmac_sha512",
+	"hmac_sha256",
+#endif /* CONFIG_CRYPTO_DRBG_HMAC */
+};
+#endif /* CONFIG_CRYPTO_DRBG */
+#endif
+
 static int test_cipher_jiffies(struct blkcipher_desc *desc, int enc,
 			       struct scatterlist *sg, int blen, int secs)
 {
@@ -252,10 +276,12 @@ static void sg_init_aead(struct scatterlist *sg, char *xbuf[XBUFSIZE],
 
 	np = (np > XBUFSIZE) ? XBUFSIZE : np;
 	rem = buflen % PAGE_SIZE;
+#if 0 // Prevent 60109 : Logically dead code
 	if (np > XBUFSIZE) {
 		rem = PAGE_SIZE;
 		np = XBUFSIZE;
 	}
+#endif
 	sg_init_table(sg, np);
 	for (k = 0; k < np; ++k) {
 		if (k == (np-1))
@@ -1202,6 +1228,27 @@ out:
 	crypto_free_ablkcipher(tfm);
 }
 
+#ifdef CONFIG_CRYPTO_DRBG
+static inline int test_drbg(const char *drbg_core, int pr)
+{
+	int pos = 0;
+	char cra_driver_name[CRYPTO_MAX_ALG_NAME] = "";
+
+	if(!drbg_core)
+		return -EINVAL;
+
+	if (pr) { /* with prediction resistance */
+		memcpy(cra_driver_name, "drbg_pr_", 8);
+		pos = 8;
+	} else {
+		memcpy(cra_driver_name, "drbg_nopr_", 10);
+		pos = 10;
+	}
+	memcpy(cra_driver_name + pos, drbg_core, strlen(drbg_core));
+	return alg_test(cra_driver_name, "stdrng", 0, 0);
+}
+#endif /* CONFIG_CRYPTO_DRBG */
+
 static void test_available(void)
 {
 	char **name = check;
@@ -2122,6 +2169,93 @@ static int do_test(int m)
 	case 1000:
 		test_available();
 		break;
+
+#ifdef CONFIG_CRYPTO_FIPS
+	case 1402 : //For FIPS 140-2
+		printk(KERN_INFO "FIPS 140-2 (%s) : POST\n", SKC_VERSION_TEXT);
+
+#ifdef CONFIG_CRYPTO_AES 
+		/* AES */
+		ret += alg_test("ecb(aes-generic)", "ecb(aes)", 0, 0);
+		ret += alg_test("cbc(aes-generic)", "cbc(aes)", 0, 0);
+	#ifdef CONFIG_CRYPTO_GCM
+		ret += alg_test("gcm(aes-generic)", "gcm(aes)", 0, 0);
+	#endif
+#endif
+
+#ifdef CONFIG_CRYPTO_AES_ARM
+		ret += alg_test("ecb(aes-asm)", "ecb(aes)", 0, 0);
+		ret += alg_test("cbc(aes-asm)", "cbc(aes)", 0, 0);
+	#ifdef CONFIG_CRYPTO_GCM
+		ret += alg_test("gcm(aes-asm)", "gcm(aes)", 0, 0);
+	#endif
+#endif
+
+#ifdef CONFIG_CRYPTO_AES_ARM64_CE
+		ret += alg_test("ecb(aes-ce)", "ecb(aes)", 0, 0);
+		ret += alg_test("cbc(aes-ce)", "cbc(aes)", 0, 0);
+	#ifdef CONFIG_CRYPTO_GCM
+		ret += alg_test("gcm(aes-ce)", "gcm(aes)", 0, 0);
+	#endif
+#endif
+
+		/* 3DES */
+		ret += alg_test("ecb(des3_ede-generic)", "ecb(des3_ede)", 0, 0);
+		ret += alg_test("cbc(des3_ede-generic)", "cbc(des3_ede)", 0, 0);
+
+		/* SHA */
+#ifdef CONFIG_CRYPTO_SHA1
+		ret += alg_test("sha1-generic", "sha1", 0, 0);
+		ret += alg_test("hmac(sha1-generic)", "hmac(sha1)", 0, 0);
+#endif
+
+#ifdef CONFIG_CRYPTO_SHA1_ARM64_CE
+		ret += alg_test("sha1-ce", "sha1", 0, 0);
+		ret += alg_test("hmac(sha1-ce)", "hmac(sha1)", 0, 0);
+#endif
+
+#ifdef CONFIG_CRYPTO_SHA256
+		ret += alg_test("sha224-generic", "sha224", 0, 0);
+		ret += alg_test("sha256-generic", "sha256", 0, 0);
+		ret += alg_test("hmac(sha224-generic)", "hmac(sha224)", 0, 0);
+		ret += alg_test("hmac(sha256-generic)", "hmac(sha256)", 0, 0);
+#endif
+
+#ifdef CONFIG_CRYPTO_SHA2_ARM64_CE
+		ret += alg_test("sha224-ce", "sha224", 0, 0);
+		ret += alg_test("sha256-ce", "sha256", 0, 0);
+		ret += alg_test("hmac(sha224-ce)", "hmac(sha224)", 0, 0);
+		ret += alg_test("hmac(sha256-ce)", "hmac(sha256)", 0, 0);
+#endif
+
+#ifdef CONFIG_CRYPTO_SHA512
+		ret += alg_test("sha384-generic", "sha384", 0, 0);
+		ret += alg_test("sha512-generic", "sha512", 0, 0);
+		ret += alg_test("hmac(sha384-generic)", "hmac(sha384)", 0, 0);
+		ret += alg_test("hmac(sha512-generic)", "hmac(sha512)", 0, 0);
+#endif
+
+#ifdef CONFIG_CRYPTO_SHA1_ARM
+		ret += alg_test("sha1-asm", "sha1", 0, 0);
+		ret += alg_test("hmac(sha1-asm)", "hmac(sha1)", 0, 0);
+#endif
+
+#ifdef CONFIG_CRYPTO_ANSI_CPRNG
+		/* RNG */
+		ret += alg_test("fips_ansi_cprng", "ansi_cprng", 0, 0);
+#endif
+
+#ifdef CONFIG_CRYPTO_DRBG
+		/* DRBG */
+		for (i = 0; ARRAY_SIZE(drbg_cores) > i; i++)
+			ret += test_drbg(drbg_cores[i], 0);	/* no prediction resistance */
+		for (i = 0; ARRAY_SIZE(drbg_cores) > i; i++)
+			ret += test_drbg(drbg_cores[i], 1);	/* with prediction resistance */
+#endif
+
+		printk(KERN_ERR "FIPS : Tcrypt Tests End\n");
+		break;
+#endif //CONFIG_CRYPTO_FIPS
 	}
 
 	return ret;
@@ -2144,16 +2278,43 @@ static int __init tcrypt_mod_init(void)
 			goto err_free_tv;
 	}
 
+#ifdef CONFIG_CRYPTO_FIPS
+	testmgr_crypto_proc_init();
+	mode = 1402; //For FIPS 140-2
+#endif
+
 	if (alg)
 		err = do_alg_test(alg, type, mask);
 	else
 		err = do_test(mode);
 
+#if FIPS_FUNC_TEST == 1
+	printk(KERN_ERR "FIPS FUNC TEST: Do test again\n");
+	do_test(mode);
+#else /* FIPS_FUNC_TEST != 1 */
 	if (err) {
 		printk(KERN_ERR "tcrypt: one or more tests failed!\n");
+	    #ifdef CONFIG_CRYPTO_FIPS
+		set_in_fips_err();
+	    #endif
 		goto err_free_tv;
+    #ifndef CONFIG_CRYPTO_FIPS
 	}
-
+    #else
+	} else {
+		if (do_integrity_check() != 0)
+		{
+		    printk(KERN_ERR "tcrypt: CRYPTO API FIPS Integrity Check failed!!!\n");
+		    set_in_fips_err();
+		}
+		if(in_fips_err()) {
+			printk(KERN_ERR "tcrypt: CRYPTO API in FIPS Error!!!\n");
+		} else {
+			printk(KERN_ERR "tcrypt: CRYPTO API started in FIPS mode!!!\n");
+		}
+	}
+    #endif
+#endif /* FIPS_FUNC_TEST */
 	/* We intentionaly return -EAGAIN to prevent keeping the module,
 	 * unless we're running in fips mode. It does all its work from
 	 * init() and doesn't offer any runtime functionality, but in
@@ -2177,7 +2338,15 @@ err_free_tv:
  */
 static void __exit tcrypt_mod_fini(void) { }
 
+#if defined(CONFIG_CRYPTO_POST_DEFERRED_INIT)
+deferred_module_init(tcrypt_mod_init);
+#elif defined(CONFIG_CRYPTO_POST_LATE_INIT_SYNC)
+late_initcall_sync(tcrypt_mod_init);
+#elif defined(CONFIG_CRYPTO_POST_LATE_INIT)
+late_initcall(tcrypt_mod_init);
+#else
 module_init(tcrypt_mod_init);
+#endif
 module_exit(tcrypt_mod_fini);
 
 module_param(alg, charp, 0);
