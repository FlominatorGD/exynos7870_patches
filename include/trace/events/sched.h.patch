diff --git a/include/trace/events/sched.h b/include/trace/events/sched.h
index 14497b87a90a..279303022829 100644
--- a/include/trace/events/sched.h
+++ b/include/trace/events/sched.h
@@ -189,16 +189,16 @@ TRACE_EVENT(sched_cpu_hotplug,
 	TP_ARGS(affected_cpu, error, status),
 
 	TP_STRUCT__entry(
-		__field(	int,	affected_cpu		)
-		__field(	int,	error			)
-		__field(	int,	status			)
-	),
+		__field(        int,    affected_cpu            )
+		__field(        int,    error                   )
+		__field(        int,    status                  )
+		),
 
 	TP_fast_assign(
-		__entry->affected_cpu	= affected_cpu;
-		__entry->error		= error;
-		__entry->status		= status;
-	),
+		__entry->affected_cpu   = affected_cpu;
+		__entry->error          = error;
+		__entry->status         = status;
+		),
 
 	TP_printk("cpu %d %s error=%d", __entry->affected_cpu,
 		__entry->status ? "online" : "offline", __entry->error)
@@ -386,30 +386,6 @@ DEFINE_EVENT(sched_stat_template, sched_stat_blocked,
 	     TP_PROTO(struct task_struct *tsk, u64 delay),
 	     TP_ARGS(tsk, delay));
 
-/*
- * Tracepoint for recording the cause of uninterruptible sleep.
- */
-TRACE_EVENT(sched_blocked_reason,
-
-	TP_PROTO(struct task_struct *tsk),
-
-	TP_ARGS(tsk),
-
-	TP_STRUCT__entry(
-		__field( pid_t,	pid	)
-		__field( void*, caller	)
-		__field( bool, io_wait	)
-	),
-
-	TP_fast_assign(
-		__entry->pid	= tsk->pid;
-		__entry->caller = (void*)get_wchan(tsk);
-		__entry->io_wait = tsk->in_iowait;
-	),
-
-	TP_printk("pid=%d iowait=%d caller=%pS", __entry->pid, __entry->io_wait, __entry->caller)
-);
-
 /*
  * Tracepoint for accounting runtime (time the task is executing
  * on a CPU).
@@ -581,532 +557,250 @@ TRACE_EVENT(sched_swap_numa,
 );
 
 /*
- * Tracepoint for waking a polling cpu without an IPI.
- */
-TRACE_EVENT(sched_wake_idle_without_ipi,
-
-	TP_PROTO(int cpu),
-
-	TP_ARGS(cpu),
-
-	TP_STRUCT__entry(
-		__field(	int,	cpu	)
-	),
-
-	TP_fast_assign(
-		__entry->cpu	= cpu;
-	),
-
-	TP_printk("cpu=%d", __entry->cpu)
-);
-
-TRACE_EVENT(sched_contrib_scale_f,
-
-	TP_PROTO(int cpu, unsigned long freq_scale_factor,
-		 unsigned long cpu_scale_factor),
-
-	TP_ARGS(cpu, freq_scale_factor, cpu_scale_factor),
-
-	TP_STRUCT__entry(
-		__field(int, cpu)
-		__field(unsigned long, freq_scale_factor)
-		__field(unsigned long, cpu_scale_factor)
-	),
-
-	TP_fast_assign(
-		__entry->cpu = cpu;
-		__entry->freq_scale_factor = freq_scale_factor;
-		__entry->cpu_scale_factor = cpu_scale_factor;
-	),
-
-	TP_printk("cpu=%d freq_scale_factor=%lu cpu_scale_factor=%lu",
-		  __entry->cpu, __entry->freq_scale_factor,
-		  __entry->cpu_scale_factor)
-);
-
-#ifdef CONFIG_SMP
-
-/*
- * Tracepoint for accounting sched averages for tasks.
+ * Tracepoint for showing tracked load contribution.
  */
-TRACE_EVENT(sched_load_avg_task,
+TRACE_EVENT(sched_task_load_contrib,
 
-	TP_PROTO(struct task_struct *tsk, struct sched_avg *avg),
+	TP_PROTO(struct task_struct *tsk, unsigned long load_contrib),
 
-	TP_ARGS(tsk, avg),
+	TP_ARGS(tsk, load_contrib),
 
 	TP_STRUCT__entry(
-		__array( char,	comm,	TASK_COMM_LEN		)
-		__field( pid_t,	pid				)
-		__field( int,	cpu				)
-		__field( unsigned long,	load_avg		)
-		__field( unsigned long,	util_avg		)
-		__field( u64,		load_sum		)
-		__field( u32,		util_sum		)
-		__field( u32,		period_contrib		)
+		__array(char, comm, TASK_COMM_LEN)
+		__field(pid_t, pid)
+		__field(unsigned long, load_contrib)
 	),
 
 	TP_fast_assign(
 		memcpy(__entry->comm, tsk->comm, TASK_COMM_LEN);
-		__entry->pid			= tsk->pid;
-		__entry->cpu			= task_cpu(tsk);
-		__entry->load_avg		= avg->load_avg;
-		__entry->util_avg		= avg->util_avg;
-		__entry->load_sum		= avg->load_sum;
-		__entry->util_sum		= avg->util_sum;
-		__entry->period_contrib		= avg->period_contrib;
+		__entry->pid            = tsk->pid;
+		__entry->load_contrib   = load_contrib;
 	),
 
-	TP_printk("comm=%s pid=%d cpu=%d load_avg=%lu util_avg=%lu load_sum=%llu"
-		  " util_sum=%u period_contrib=%u",
-		  __entry->comm,
-		  __entry->pid,
-		  __entry->cpu,
-		  __entry->load_avg,
-		  __entry->util_avg,
-		  (u64)__entry->load_sum,
-		  (u32)__entry->util_sum,
-		  (u32)__entry->period_contrib)
+	TP_printk("comm=%s pid=%d load_contrib=%lu",
+			__entry->comm, __entry->pid,
+			__entry->load_contrib)
 );
 
 /*
- * Tracepoint for accounting sched averages for cpus.
+ * Tracepoint for showing tracked task runnable ratio [0..1023].
  */
-TRACE_EVENT(sched_load_avg_cpu,
+TRACE_EVENT(sched_task_runnable_ratio,
 
-	TP_PROTO(int cpu, struct cfs_rq *cfs_rq),
+	TP_PROTO(struct task_struct *tsk, unsigned long ratio),
 
-	TP_ARGS(cpu, cfs_rq),
+	TP_ARGS(tsk, ratio),
 
 	TP_STRUCT__entry(
-		__field( int,	cpu				)
-		__field( unsigned long,	load_avg		)
-		__field( unsigned long,	util_avg		)
+		__array(char, comm, TASK_COMM_LEN)
+		__field(pid_t, pid)
+		__field(unsigned long, ratio)
 	),
 
 	TP_fast_assign(
-		__entry->cpu			= cpu;
-		__entry->load_avg		= cfs_rq->avg.load_avg;
-		__entry->util_avg		= cfs_rq->avg.util_avg;
+	memcpy(__entry->comm, tsk->comm, TASK_COMM_LEN);
+		__entry->pid   = tsk->pid;
+		__entry->ratio = ratio;
 	),
 
-	TP_printk("cpu=%d load_avg=%lu util_avg=%lu",
-		  __entry->cpu, __entry->load_avg, __entry->util_avg)
+	TP_printk("comm=%s pid=%d ratio=%lu",
+			__entry->comm, __entry->pid,
+			__entry->ratio)
 );
 
 /*
- * Tracepoint for sched_tune_config settings
+ * Tracepoint for showing tracked rq runnable ratio [0..1023].
  */
-TRACE_EVENT(sched_tune_config,
+TRACE_EVENT(sched_rq_runnable_ratio,
 
-	TP_PROTO(int boost, int pb_nrg_gain, int pb_cap_gain, int pc_nrg_gain, int pc_cap_gain),
+	TP_PROTO(int cpu, unsigned long ratio),
 
-	TP_ARGS(boost, pb_nrg_gain, pb_cap_gain, pc_nrg_gain, pc_cap_gain),
+	TP_ARGS(cpu, ratio),
 
 	TP_STRUCT__entry(
-		__field( int,	boost		)
-		__field( int,	pb_nrg_gain	)
-		__field( int,	pb_cap_gain	)
-		__field( int,	pc_nrg_gain	)
-		__field( int,	pc_cap_gain	)
+		__field(int, cpu)
+		__field(unsigned long, ratio)
 	),
 
 	TP_fast_assign(
-		__entry->boost 	= boost;
-		__entry->pb_nrg_gain	= pb_nrg_gain;
-		__entry->pb_cap_gain	= pb_cap_gain;
-		__entry->pc_nrg_gain	= pc_nrg_gain;
-		__entry->pc_cap_gain	= pc_cap_gain;
+		__entry->cpu   = cpu;
+		__entry->ratio = ratio;
 	),
 
-	TP_printk("boost=%d "
-			"pb_nrg_gain=%d pb_cap_gain=%d "
-			"pc_nrg_gain=%d pc_cap_gain=%d",
-		__entry->boost,
-		__entry->pb_nrg_gain, __entry->pb_cap_gain,
-		__entry->pc_nrg_gain, __entry->pc_cap_gain)
+	TP_printk("cpu=%d ratio=%lu",
+			__entry->cpu,
+			__entry->ratio)
 );
 
 /*
- * Tracepoint for accounting CPU  boosted utilization
+ * Tracepoint for showing tracked rq runnable load.
  */
-TRACE_EVENT(sched_boost_cpu,
+TRACE_EVENT(sched_rq_runnable_load,
 
-	TP_PROTO(int cpu, unsigned long util, long margin),
+	TP_PROTO(int cpu, u64 load),
 
-	TP_ARGS(cpu, util, margin),
+	TP_ARGS(cpu, load),
 
 	TP_STRUCT__entry(
-		__field( int,		cpu			)
-		__field( unsigned long,	util			)
-		__field(long,		margin			)
+		__field(int, cpu)
+		__field(u64, load)
 	),
 
 	TP_fast_assign(
-		__entry->cpu	= cpu;
-		__entry->util	= util;
-		__entry->margin	= margin;
+		__entry->cpu  = cpu;
+		__entry->load = load;
 	),
 
-	TP_printk("cpu=%d util=%lu margin=%ld",
-		  __entry->cpu,
-		  __entry->util,
-		  __entry->margin)
+	TP_printk("cpu=%d load=%llu",
+			__entry->cpu,
+			__entry->load)
 );
 
-/*
- * Tracepoint for schedtune_tasks_update
- */
-TRACE_EVENT(sched_tune_tasks_update,
+TRACE_EVENT(sched_rq_nr_running,
 
-	TP_PROTO(struct task_struct *tsk, int cpu, int tasks, int idx,
-		int boost, int max_boost),
+	TP_PROTO(int cpu, unsigned int nr_running, int nr_iowait),
 
-	TP_ARGS(tsk, cpu, tasks, idx, boost, max_boost),
+	TP_ARGS(cpu, nr_running, nr_iowait),
 
 	TP_STRUCT__entry(
-		__array( char,	comm,	TASK_COMM_LEN	)
-		__field( pid_t,		pid		)
-		__field( int,		cpu		)
-		__field( int,		tasks		)
-		__field( int,		idx		)
-		__field( int,		boost		)
-		__field( int,		max_boost	)
+		__field(int, cpu)
+		__field(unsigned int, nr_running)
+		__field(int, nr_iowait)
 	),
 
 	TP_fast_assign(
-		memcpy(__entry->comm, tsk->comm, TASK_COMM_LEN);
-		__entry->pid		= tsk->pid;
-		__entry->cpu 		= cpu;
-		__entry->tasks		= tasks;
-		__entry->idx 		= idx;
-		__entry->boost		= boost;
-		__entry->max_boost	= max_boost;
+		__entry->cpu  = cpu;
+		__entry->nr_running = nr_running;
+		__entry->nr_iowait = nr_iowait;
 	),
 
-	TP_printk("pid=%d comm=%s "
-			"cpu=%d tasks=%d idx=%d boost=%d max_boost=%d",
-		__entry->pid, __entry->comm,
-		__entry->cpu, __entry->tasks, __entry->idx,
-		__entry->boost, __entry->max_boost)
+	TP_printk("cpu=%d nr_running=%u nr_iowait=%d",
+		__entry->cpu,
+		__entry->nr_running, __entry->nr_iowait)
 );
 
+
 /*
- * Tracepoint for schedtune_boostgroup_update
+ * Tracepoint for showing tracked task cpu usage ratio [0..1023].
  */
-TRACE_EVENT(sched_tune_boostgroup_update,
+TRACE_EVENT(sched_task_usage_ratio,
 
-	TP_PROTO(int cpu, int variation, int max_boost),
+	TP_PROTO(struct task_struct *tsk, unsigned long ratio),
 
-	TP_ARGS(cpu, variation, max_boost),
+	TP_ARGS(tsk, ratio),
 
 	TP_STRUCT__entry(
-		__field( int,	cpu		)
-		__field( int,	variation	)
-		__field( int,	max_boost	)
+		__array(char, comm, TASK_COMM_LEN)
+		__field(pid_t, pid)
+		__field(unsigned long, ratio)
 	),
 
 	TP_fast_assign(
-		__entry->cpu		= cpu;
-		__entry->variation	= variation;
-		__entry->max_boost	= max_boost;
+	memcpy(__entry->comm, tsk->comm, TASK_COMM_LEN);
+		__entry->pid   = tsk->pid;
+		__entry->ratio = ratio;
 	),
 
-	TP_printk("cpu=%d variation=%d max_boost=%d",
-		__entry->cpu, __entry->variation, __entry->max_boost)
+	TP_printk("comm=%s pid=%d ratio=%lu",
+			__entry->comm, __entry->pid,
+			__entry->ratio)
 );
 
 /*
- * Tracepoint for accounting task boosted utilization
+ * Tracepoint for HMP (CONFIG_SCHED_HMP) task migrations.
  */
-TRACE_EVENT(sched_boost_task,
+#define HMP_MIGRATE_WAKEUP	0
+#define HMP_MIGRATE_FORCE	1
+#define HMP_MIGRATE_OFFLOAD	2
+#define HMP_MIGRATE_IDLE_PULL	3
+TRACE_EVENT(sched_hmp_migrate,
 
-	TP_PROTO(struct task_struct *tsk, unsigned long util, long margin),
+	TP_PROTO(struct task_struct *tsk, int dest, int force),
 
-	TP_ARGS(tsk, util, margin),
+	TP_ARGS(tsk, dest, force),
 
 	TP_STRUCT__entry(
-		__array( char,	comm,	TASK_COMM_LEN		)
-		__field( pid_t,		pid			)
-		__field( unsigned long,	util			)
-		__field( long,		margin			)
-
+		__array(char, comm, TASK_COMM_LEN)
+		__field(pid_t, pid)
+		__field(int,  dest)
+		__field(int,  force)
 	),
 
 	TP_fast_assign(
-		memcpy(__entry->comm, tsk->comm, TASK_COMM_LEN);
-		__entry->pid	= tsk->pid;
-		__entry->util	= util;
-		__entry->margin	= margin;
+	memcpy(__entry->comm, tsk->comm, TASK_COMM_LEN);
+		__entry->pid   = tsk->pid;
+		__entry->dest  = dest;
+		__entry->force = force;
 	),
 
-	TP_printk("comm=%s pid=%d util=%lu margin=%ld",
-		  __entry->comm, __entry->pid,
-		  __entry->util,
-		  __entry->margin)
+	TP_printk("comm=%s pid=%d dest=%d force=%d",
+			__entry->comm, __entry->pid,
+			__entry->dest, __entry->force)
 );
 
-/*
- * Tracepoint for accounting sched group energy
- */
-TRACE_EVENT(sched_energy_diff,
+TRACE_EVENT(sched_hmp_offload_abort,
 
-	TP_PROTO(struct task_struct *tsk, int scpu, int dcpu, int udelta,
-		int nrgb, int nrga, int nrgd, int capb, int capa, int capd,
-		int nrgn, int nrgp),
+	TP_PROTO(int cpu, int data, char *label),
 
-	TP_ARGS(tsk, scpu, dcpu, udelta,
-		nrgb, nrga, nrgd, capb, capa, capd,
-		nrgn, nrgp),
+	TP_ARGS(cpu,data,label),
 
 	TP_STRUCT__entry(
-		__array( char,	comm,	TASK_COMM_LEN	)
-		__field( pid_t,	pid	)
-		__field( int,	scpu	)
-		__field( int,	dcpu	)
-		__field( int,	udelta	)
-		__field( int,	nrgb	)
-		__field( int,	nrga	)
-		__field( int,	nrgd	)
-		__field( int,	capb	)
-		__field( int,	capa	)
-		__field( int,	capd	)
-		__field( int,	nrgn	)
-		__field( int,	nrgp	)
+		__array(char, label, 64)
+		__field(int, cpu)
+		__field(int, data)
 	),
 
 	TP_fast_assign(
-		memcpy(__entry->comm, tsk->comm, TASK_COMM_LEN);
-		__entry->pid		= tsk->pid;
-		__entry->scpu 		= scpu;
-		__entry->dcpu 		= dcpu;
-		__entry->udelta 	= udelta;
-		__entry->nrgb 		= nrgb;
-		__entry->nrga 		= nrga;
-		__entry->nrgd 		= nrgd;
-		__entry->capb 		= capb;
-		__entry->capa 		= capa;
-		__entry->capd 		= capd;
-		__entry->nrgn 		= nrgn;
-		__entry->nrgp 		= nrgp;
+		strncpy(__entry->label, label, 64);
+		__entry->cpu   = cpu;
+		__entry->data = data;
 	),
 
-	TP_printk("pid=%d comm=%s "
-			"src_cpu=%d dst_cpu=%d usage_delta=%d "
-			"nrg_before=%d nrg_after=%d nrg_diff=%d "
-			"cap_before=%d cap_after=%d cap_delta=%d "
-			"nrg_delta=%d nrg_payoff=%d",
-		__entry->pid, __entry->comm,
-		__entry->scpu, __entry->dcpu, __entry->udelta,
-		__entry->nrgb, __entry->nrga, __entry->nrgd,
-		__entry->capb, __entry->capa, __entry->capd,
-		__entry->nrgn, __entry->nrgp)
+	TP_printk("cpu=%d data=%d label=%63s",
+		__entry->cpu, __entry->data,
+		__entry->label)
 );
 
-/*
- * Tracepoint for schedtune_tasks_update
- */
-TRACE_EVENT(sched_tune_filter,
+TRACE_EVENT(sched_hmp_offload_succeed,
 
-	TP_PROTO(int nrg_delta, int cap_delta,
-		 int nrg_gain,  int cap_gain,
-		 int payoff, int region),
+	TP_PROTO(int cpu, int dest_cpu),
 
-	TP_ARGS(nrg_delta, cap_delta, nrg_gain, cap_gain, payoff, region),
+	TP_ARGS(cpu,dest_cpu),
 
 	TP_STRUCT__entry(
-		__field( int,	nrg_delta	)
-		__field( int,	cap_delta	)
-		__field( int,	nrg_gain	)
-		__field( int,	cap_gain	)
-		__field( int,	payoff		)
-		__field( int,	region		)
+		__field(int, cpu)
+		__field(int, dest_cpu)
 	),
 
 	TP_fast_assign(
-		__entry->nrg_delta	= nrg_delta;
-		__entry->cap_delta	= cap_delta;
-		__entry->nrg_gain	= nrg_gain;
-		__entry->cap_gain	= cap_gain;
-		__entry->payoff		= payoff;
-		__entry->region		= region;
+		__entry->cpu   = cpu;
+		__entry->dest_cpu = dest_cpu;
 	),
 
-	TP_printk("nrg_delta=%d cap_delta=%d nrg_gain=%d cap_gain=%d payoff=%d region=%d",
-		__entry->nrg_delta, __entry->cap_delta,
-		__entry->nrg_gain, __entry->cap_gain,
-		__entry->payoff, __entry->region)
+	TP_printk("cpu=%d dest=%d",
+		__entry->cpu,
+		__entry->dest_cpu)
 );
 
 /*
- * Tracepoint for system overutilized flag
+ * Tracepoint for waking a polling cpu without an IPI.
  */
-TRACE_EVENT(sched_overutilized,
-
-	TP_PROTO(bool overutilized),
-
-	TP_ARGS(overutilized),
-
-	TP_STRUCT__entry(
-		__field( bool,	overutilized	)
-	),
-
-	TP_fast_assign(
-		__entry->overutilized	= overutilized;
-	),
-
-	TP_printk("overutilized=%d",
-		__entry->overutilized ? 1 : 0)
-);
-#ifdef CONFIG_SCHED_WALT
-struct rq;
-
-extern unsigned int sched_ravg_window;
-TRACE_EVENT(walt_update_task_ravg,
-
-	TP_PROTO(struct task_struct *p, struct rq *rq, int evt,
-		 u64 wallclock, u64 irqtime),
-
-	TP_ARGS(p, rq, evt, wallclock, irqtime),
-
-	TP_STRUCT__entry(
-		__array(char,		comm,   TASK_COMM_LEN	)
-		__field(pid_t,		pid			)
-		__field(pid_t,		cur_pid			)
-		__field(unsigned int,	cur_freq		)
-		__field(u64,		wallclock		)
-		__field(u64,		mark_start		)
-		__field(u64,		win_start		)
-		__field(u64,		irqtime			)
-		__field(int,    	evt			)
-		__field(unsigned int,	demand			)
-		__field(unsigned int,	sum			)
-		__field(unsigned int,   walt_avg                )
-		__field(int,		cpu			)
-		__field(u64,		cs			)
-		__field(u64,		ps			)
-		__field(u32,		curr_window		)
-		__field(u32,		prev_window		)
-		__field(u32,		active_windows		)
-	),
-
-	TP_fast_assign(
-		__entry->wallclock      = wallclock;
-		__entry->win_start      = rq->window_start;
-		__entry->evt            = evt;
-		__entry->cpu            = rq->cpu;
-		__entry->cur_pid        = rq->curr->pid;
-		__entry->cur_freq       = rq->cur_freq;
-		memcpy(__entry->comm, 	  p->comm, TASK_COMM_LEN);
-		__entry->pid            = p->pid;
-		__entry->mark_start     = p->ravg.mark_start;
-		__entry->demand         = p->ravg.demand;
-		__entry->sum            = p->ravg.sum;
-		__entry->walt_avg       = p->ravg.demand << 10;
-		do_div(__entry->walt_avg, walt_ravg_window);
-		__entry->irqtime        = irqtime;
-		__entry->cs             = rq->curr_runnable_sum;
-		__entry->ps             = rq->prev_runnable_sum;
-		__entry->curr_window	= p->ravg.curr_window;
-		__entry->prev_window	= p->ravg.prev_window;
-		__entry->active_windows	= p->ravg.active_windows;
-	),
-
-	TP_printk("wclock=%llu win_start=%llu event=%d cpu=%d "
-		  "cur_freq=%u cur_pid=%d pid=%d comm=%s mrk_start=%llu "
-		  "demand=%u sum=%u walt_avg=%u irqtime=%llu "
-		  "cur_rsum=%llu pre_rsum=%llu "
-		  "cur_wdw=%u pre_wdw=%u act_wds=%u",
-		__entry->wallclock, __entry->win_start,
-		__entry->evt, __entry->cpu,
-		__entry->cur_freq, __entry->cur_pid,
-		__entry->pid, __entry->comm, __entry->mark_start,
-		__entry->demand, __entry->sum,
-		__entry->walt_avg, __entry->irqtime,
-		__entry->cs, __entry->ps,
-		__entry->curr_window, __entry->prev_window,
-		__entry->active_windows
-		)
-);
-
-TRACE_EVENT(walt_update_history,
-
-	TP_PROTO(struct rq *rq, struct task_struct *p, u32 runtime, int samples,
-			int evt),
-
-	TP_ARGS(rq, p, runtime, samples, evt),
-
-	TP_STRUCT__entry(
-		__array(char,		comm,   TASK_COMM_LEN	)
-		__field(pid_t,		pid			)
-		__field(unsigned int,	runtime			)
-		__field(int,		samples			)
-		__field(int,		evt			)
-		__field(u64,		demand			)
-		__field(unsigned int,	walt_avg		)
-		__field(unsigned int,	pelt_avg		)
-		__array(u32,		hist, RAVG_HIST_SIZE_MAX)
-		__field(int,		cpu			)
-	),
-
-	TP_fast_assign(
-		memcpy(__entry->comm, 	  p->comm, TASK_COMM_LEN);
-		__entry->pid            = p->pid;
-		__entry->runtime        = runtime;
-		__entry->samples        = samples;
-		__entry->evt            = evt;
-		__entry->demand         = p->ravg.demand;
-		__entry->walt_avg 	= p->ravg.demand << 10;
-		do_div(__entry->walt_avg, walt_ravg_window);
-		__entry->pelt_avg	= p->se.avg.util_avg;
-		memcpy(__entry->hist, 	  p->ravg.sum_history,
-					  RAVG_HIST_SIZE_MAX * sizeof(u32));
-		__entry->cpu            = rq->cpu;
-	),
-
-	TP_printk("pid=%d comm=%s runtime=%u samples=%d event=%d demand=%llu "
-		  "walt=%u pelt=%u h0=%u h1=%u h2=%u h3=%u h4=%u cpu=%d",
-		__entry->pid, __entry->comm,
-		__entry->runtime, __entry->samples, __entry->evt,
-		__entry->demand,
-		__entry->walt_avg,
-		__entry->pelt_avg,
-		__entry->hist[0], __entry->hist[1],
-		__entry->hist[2], __entry->hist[3],
-		__entry->hist[4], __entry->cpu)
-);
-
-TRACE_EVENT(walt_migration_update_sum,
+TRACE_EVENT(sched_wake_idle_without_ipi,
 
-	TP_PROTO(struct rq *rq, struct task_struct *p),
+	TP_PROTO(int cpu),
 
-	TP_ARGS(rq, p),
+	TP_ARGS(cpu),
 
 	TP_STRUCT__entry(
-		__field(int,		cpu			)
-		__array(char,		comm,   TASK_COMM_LEN	)
-		__field(int,		pid			)
-		__field(u64,		cs			)
-		__field(u64,		ps			)
+		__field(	int,	cpu	)
 	),
 
 	TP_fast_assign(
-		__entry->cpu		= cpu_of(rq);
-		__entry->cs		= rq->curr_runnable_sum;
-		__entry->ps		= rq->prev_runnable_sum;
-		__entry->pid		= p->pid;
-		memcpy(__entry->comm,	  p->comm, TASK_COMM_LEN);
+		__entry->cpu	= cpu;
 	),
 
-	TP_printk("cpu=%d pid=%d comm=%s "
-		  "cur_ravg=%llu pre_ravg=%llu",
-		  __entry->cpu, __entry->pid, __entry->comm,
-		  __entry->cs, __entry->ps)
+	TP_printk("cpu=%d", __entry->cpu)
 );
-#endif /* CONFIG_SCHED_WALT */
-
-#endif /* CONFIG_SMP */
-
 #endif /* _TRACE_SCHED_H */
 
 /* This part must be outside protection */
