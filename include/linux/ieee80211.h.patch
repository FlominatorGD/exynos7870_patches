diff --git a/include/linux/ieee80211.h b/include/linux/ieee80211.h
index 1da9993ed54e..cd62051402c9 100644
--- a/include/linux/ieee80211.h
+++ b/include/linux/ieee80211.h
@@ -1966,6 +1966,7 @@ enum ieee80211_key_len {
 	WLAN_KEY_LEN_TKIP = 32,
 	WLAN_KEY_LEN_AES_CMAC = 16,
 	WLAN_KEY_LEN_SMS4 = 32,
+	WLAN_KEY_LEN_WAPI_SMS4 = 32,
 };
 
 #define IEEE80211_WEP_IV_LEN		4
@@ -2187,15 +2188,21 @@ enum ieee80211_sa_query_action {
 #define WLAN_CIPHER_SUITE_GCMP		0x000FAC08
 
 #define WLAN_CIPHER_SUITE_SMS4		0x00147201
+#define WLAN_CIPHER_SUITE_PMK		0x00904C00 /* 802.11r */
 
 /* AKM suite selectors */
 #define WLAN_AKM_SUITE_8021X		0x000FAC01
 #define WLAN_AKM_SUITE_PSK		0x000FAC02
+#define WLAN_AKM_SUITE_FT_8021X		0x000FAC03 /* 802.11r */
+#define WLAN_AKM_SUITE_FT_PSK		0x000FAC04 /* 802.11r */
 #define WLAN_AKM_SUITE_8021X_SHA256	0x000FAC05
 #define WLAN_AKM_SUITE_PSK_SHA256	0x000FAC06
 #define WLAN_AKM_SUITE_TDLS		0x000FAC07
 #define WLAN_AKM_SUITE_SAE		0x000FAC08
 #define WLAN_AKM_SUITE_FT_OVER_SAE	0x000FAC09
+#define WLAN_AKM_SUITE_WAPI_PSK		0x000FAC0B  /* WAPI */
+#define WLAN_AKM_SUITE_WAPI_CERT	0x000FAC0C  /* WAPI */
+#define WLAN_AKM_SUITE_CCKM		0x00409600  /* CCKM */
 
 #define WLAN_MAX_KEY_LEN		32
 
@@ -2449,57 +2456,4 @@ static inline bool ieee80211_action_contains_tpc(struct sk_buff *skb)
 	return true;
 }
 
-struct element {
-	u8 id;
-	u8 datalen;
-	u8 data[];
-} __packed;
-
-/* element iteration helpers */
-#define for_each_element(_elem, _data, _datalen)			\
-	for (_elem = (const struct element *)(_data);			\
-	     (const u8 *)(_data) + (_datalen) - (const u8 *)_elem >=	\
-		(int)sizeof(*_elem) &&					\
-	     (const u8 *)(_data) + (_datalen) - (const u8 *)_elem >=	\
-		(int)sizeof(*_elem) + _elem->datalen;			\
-	     _elem = (const struct element *)(_elem->data + _elem->datalen))
-
-#define for_each_element_id(element, _id, data, datalen)		\
-	for_each_element(element, data, datalen)			\
-		if (element->id == (_id))
-
-#define for_each_element_extid(element, extid, data, datalen)		\
-	for_each_element(element, data, datalen)			\
-		if (element->id == WLAN_EID_EXTENSION &&		\
-		    element->datalen > 0 &&				\
-		    element->data[0] == (extid))
-
-#define for_each_subelement(sub, element)				\
-	for_each_element(sub, (element)->data, (element)->datalen)
-
-#define for_each_subelement_id(sub, id, element)			\
-	for_each_element_id(sub, id, (element)->data, (element)->datalen)
-
-#define for_each_subelement_extid(sub, extid, element)			\
-	for_each_element_extid(sub, extid, (element)->data, (element)->datalen)
-
-/**
- * for_each_element_completed - determine if element parsing consumed all data
- * @element: element pointer after for_each_element() or friends
- * @data: same data pointer as passed to for_each_element() or friends
- * @datalen: same data length as passed to for_each_element() or friends
- *
- * This function returns %true if all the data was parsed or considered
- * while walking the elements. Only use this if your for_each_element()
- * loop cannot be broken out of, otherwise it always returns %false.
- *
- * If some data was malformed, this returns %false since the last parsed
- * element will not fill the whole remaining data.
- */
-static inline bool for_each_element_completed(const struct element *element,
-					      const void *data, size_t datalen)
-{
-	return (const u8 *)element == (const u8 *)data + datalen;
-}
-
 #endif /* LINUX_IEEE80211_H */
