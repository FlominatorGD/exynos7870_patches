diff --git a/include/linux/dma-contiguous.h b/include/linux/dma-contiguous.h
index fec734df1524..cd020462de45 100644
--- a/include/linux/dma-contiguous.h
+++ b/include/linux/dma-contiguous.h
@@ -53,15 +53,37 @@
 
 #ifdef __KERNEL__
 
-#include <linux/device.h>
-
 struct cma;
 struct page;
+struct device;
+
+struct cma_info {
+	phys_addr_t	base;
+	size_t		size;
+	size_t		free;
+	bool		isolated;
+};
 
 #ifdef CONFIG_DMA_CMA
 
+/* Not to allow CMA migration */
+#undef CMA_NO_MIGRATION
+
+/*
+ * There is always at least global CMA area and a few optional device
+ * private areas configured in kernel .config.
+ */
+#define MAX_CMA_AREAS	(1 + CONFIG_CMA_AREAS)
+
 extern struct cma *dma_contiguous_default_area;
 
+static inline struct cma *dev_get_cma_priv_area(struct device *dev)
+{
+	if (dev && dev->cma_area)
+		return dev->cma_area;
+	return NULL;
+}
+
 static inline struct cma *dev_get_cma_area(struct device *dev)
 {
 	if (dev && dev->cma_area)
@@ -73,6 +95,8 @@ static inline void dev_set_cma_area(struct device *dev, struct cma *cma)
 {
 	if (dev)
 		dev->cma_area = cma;
+	if (!dev && !dma_contiguous_default_area)
+		dma_contiguous_default_area = cma;
 }
 
 static inline void dma_contiguous_set_default(struct cma *cma)
@@ -83,8 +107,7 @@ static inline void dma_contiguous_set_default(struct cma *cma)
 void dma_contiguous_reserve(phys_addr_t addr_limit);
 
 int __init dma_contiguous_reserve_area(phys_addr_t size, phys_addr_t base,
-				       phys_addr_t limit, struct cma **res_cma,
-				       bool fixed);
+				       phys_addr_t limit, struct cma **res_cma);
 
 /**
  * dma_declare_contiguous() - reserve area for contiguous memory handling
@@ -104,7 +127,7 @@ static inline int dma_declare_contiguous(struct device *dev, phys_addr_t size,
 {
 	struct cma *cma;
 	int ret;
-	ret = dma_contiguous_reserve_area(size, base, limit, &cma, true);
+	ret = dma_contiguous_reserve_area(size, base, limit, &cma);
 	if (ret == 0)
 		dev_set_cma_area(dev, cma);
 
@@ -116,7 +139,24 @@ struct page *dma_alloc_from_contiguous(struct device *dev, size_t count,
 bool dma_release_from_contiguous(struct device *dev, struct page *pages,
 				 int count);
 
+int dma_contiguous_info(struct device *dev, struct cma_info *info);
+
+#ifndef CMA_NO_MIGRATION
+int dma_contiguous_isolate(struct device *dev);
+
+void dma_contiguous_deisolate(struct device *dev);
+#else
+static inline int dma_contiguous_isolate(struct device *dev)
+{
+	return -ENOSYS;
+}
+#define dma_contiguous_deisolate(dev) do { } while (0)
+#endif /* CMA_NO_MIGRATION */
+
 #else
+#define dev_get_cma_priv_area(dev)	NULL
+
+#define MAX_CMA_AREAS	(0)
 
 static inline struct cma *dev_get_cma_area(struct device *dev)
 {
@@ -130,9 +170,7 @@ static inline void dma_contiguous_set_default(struct cma *cma) { }
 static inline void dma_contiguous_reserve(phys_addr_t limit) { }
 
 static inline int dma_contiguous_reserve_area(phys_addr_t size, phys_addr_t base,
-				       phys_addr_t limit, struct cma **res_cma,
-				       bool fixed)
-{
+				       phys_addr_t limit, struct cma **res_cma) {
 	return -ENOSYS;
 }
 
@@ -157,6 +195,20 @@ bool dma_release_from_contiguous(struct device *dev, struct page *pages,
 	return false;
 }
 
+static inline
+int dma_contiguous_info(struct device *dev, struct cma_info *info)
+{
+	return -ENOSYS;
+}
+
+static inline
+int dma_contiguous_isolate(struct device *dev)
+{
+	return -ENOSYS;
+}
+
+#define dma_contiguous_deisolate(dev) do { } while (0)
+
 #endif
 
 #endif
