diff --git a/kernel/locking/spinlock_debug.c b/kernel/locking/spinlock_debug.c
index 95e610e3f7ef..4535c839103c 100644
--- a/kernel/locking/spinlock_debug.c
+++ b/kernel/locking/spinlock_debug.c
@@ -51,19 +51,23 @@ EXPORT_SYMBOL(__rwlock_init);
 
 static void spin_dump(raw_spinlock_t *lock, const char *msg)
 {
-	struct task_struct *owner = READ_ONCE(lock->owner);
+	struct task_struct *owner = NULL;
 
-	if (owner == SPINLOCK_OWNER_INIT)
-		owner = NULL;
-	printk(KERN_EMERG "BUG: spinlock %s on CPU#%d, %s/%d\n",
+	if (!printk_ratelimit())
+		return;
+
+	if (lock->owner && lock->owner != SPINLOCK_OWNER_INIT)
+		owner = lock->owner;
+
+	pr_auto(ASL8, "BUG: spinlock %s on CPU#%d, %s/%d\n",
 		msg, raw_smp_processor_id(),
 		current->comm, task_pid_nr(current));
-	printk(KERN_EMERG " lock: %pS, .magic: %08x, .owner: %s/%d, "
+	pr_auto(ASL8, " lock: %pS, .magic: %08x, .owner: %s/%d, "
 			".owner_cpu: %d\n",
-		lock, READ_ONCE(lock->magic),
+		lock, lock->magic,
 		owner ? owner->comm : "<none>",
 		owner ? task_pid_nr(owner) : -1,
-		READ_ONCE(lock->owner_cpu));
+		lock->owner_cpu);
 	dump_stack();
 }
 
@@ -80,16 +84,16 @@ static void spin_bug(raw_spinlock_t *lock, const char *msg)
 static inline void
 debug_spin_lock_before(raw_spinlock_t *lock)
 {
-	SPIN_BUG_ON(READ_ONCE(lock->magic) != SPINLOCK_MAGIC, lock, "bad magic");
-	SPIN_BUG_ON(READ_ONCE(lock->owner) == current, lock, "recursion");
-	SPIN_BUG_ON(READ_ONCE(lock->owner_cpu) == raw_smp_processor_id(),
+	SPIN_BUG_ON(lock->magic != SPINLOCK_MAGIC, lock, "bad magic");
+	SPIN_BUG_ON(lock->owner == current, lock, "recursion");
+	SPIN_BUG_ON(lock->owner_cpu == raw_smp_processor_id(),
 							lock, "cpu recursion");
 }
 
 static inline void debug_spin_lock_after(raw_spinlock_t *lock)
 {
-	WRITE_ONCE(lock->owner_cpu, raw_smp_processor_id());
-	WRITE_ONCE(lock->owner, current);
+	lock->owner_cpu = raw_smp_processor_id();
+	lock->owner = current;
 }
 
 static inline void debug_spin_unlock(raw_spinlock_t *lock)
@@ -99,8 +103,8 @@ static inline void debug_spin_unlock(raw_spinlock_t *lock)
 	SPIN_BUG_ON(lock->owner != current, lock, "wrong owner");
 	SPIN_BUG_ON(lock->owner_cpu != raw_smp_processor_id(),
 							lock, "wrong CPU");
-	WRITE_ONCE(lock->owner, SPINLOCK_OWNER_INIT);
-	WRITE_ONCE(lock->owner_cpu, -1);
+	lock->owner = SPINLOCK_OWNER_INIT;
+	lock->owner_cpu = -1;
 }
 
 static void __spin_lock_debug(raw_spinlock_t *lock)
@@ -233,8 +237,8 @@ static inline void debug_write_lock_before(rwlock_t *lock)
 
 static inline void debug_write_lock_after(rwlock_t *lock)
 {
-	WRITE_ONCE(lock->owner_cpu, raw_smp_processor_id());
-	WRITE_ONCE(lock->owner, current);
+	lock->owner_cpu = raw_smp_processor_id();
+	lock->owner = current;
 }
 
 static inline void debug_write_unlock(rwlock_t *lock)
@@ -243,8 +247,8 @@ static inline void debug_write_unlock(rwlock_t *lock)
 	RWLOCK_BUG_ON(lock->owner != current, lock, "wrong owner");
 	RWLOCK_BUG_ON(lock->owner_cpu != raw_smp_processor_id(),
 							lock, "wrong CPU");
-	WRITE_ONCE(lock->owner, SPINLOCK_OWNER_INIT);
-	WRITE_ONCE(lock->owner_cpu, -1);
+	lock->owner = SPINLOCK_OWNER_INIT;
+	lock->owner_cpu = -1;
 }
 
 #if 0		/* This can cause lockups */
