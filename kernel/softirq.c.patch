diff --git a/kernel/softirq.c b/kernel/softirq.c
index 9e787d8311b5..15789fcb19db 100644
--- a/kernel/softirq.c
+++ b/kernel/softirq.c
@@ -26,6 +26,7 @@
 #include <linux/smpboot.h>
 #include <linux/tick.h>
 #include <linux/irq.h>
+#include <linux/exynos-ss.h>
 
 #define CREATE_TRACE_POINTS
 #include <trace/events/irq.h>
@@ -266,7 +267,9 @@ restart:
 		kstat_incr_softirqs_this_cpu(vec_nr);
 
 		trace_softirq_entry(vec_nr);
+		exynos_ss_irq(ESS_FLAG_SOFTIRQ, h->action, vec_nr, ESS_FLAG_IN);
 		h->action(h);
+		exynos_ss_irq(ESS_FLAG_SOFTIRQ, h->action, local_softirq_pending(), ESS_FLAG_OUT);
 		trace_softirq_exit(vec_nr);
 		if (unlikely(prev_count != preempt_count())) {
 			pr_err("huh, entered softirq %u %s %p with preempt_count %08x, exited with %08x?\n",
@@ -498,7 +501,11 @@ static void tasklet_action(struct softirq_action *a)
 				if (!test_and_clear_bit(TASKLET_STATE_SCHED,
 							&t->state))
 					BUG();
+				exynos_ss_irq(ESS_FLAG_SOFTIRQ_TASKLET,
+						t->func, t->state, ESS_FLAG_IN);
 				t->func(t->data);
+				exynos_ss_irq(ESS_FLAG_SOFTIRQ_TASKLET,
+						t->func, local_softirq_pending(), ESS_FLAG_OUT);
 				tasklet_unlock(t);
 				continue;
 			}
@@ -534,7 +541,11 @@ static void tasklet_hi_action(struct softirq_action *a)
 				if (!test_and_clear_bit(TASKLET_STATE_SCHED,
 							&t->state))
 					BUG();
+				exynos_ss_irq(ESS_FLAG_SOFTIRQ_HI_TASKLET,
+						t->func, t->state, ESS_FLAG_IN);
 				t->func(t->data);
+				exynos_ss_irq(ESS_FLAG_SOFTIRQ_HI_TASKLET,
+						t->func, local_softirq_pending(), ESS_FLAG_OUT);
 				tasklet_unlock(t);
 				continue;
 			}
